<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-19T03:03:49.157Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Benmr Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 VMware Fusion Pro 在 Mac 裝 Windows 打遊戲</title>
    <link href="http://example.com/2024/11/19/vmfusion-windows-on-mac/"/>
    <id>http://example.com/2024/11/19/vmfusion-windows-on-mac/</id>
    <published>2024-11-19T02:59:36.000Z</published>
    <updated>2024-11-19T03:03:49.157Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/vmfusion.webp" alt="vmfusion"></p><p>最近玩 Mac 版的 Card Shark 到一半竟然中文字幕會不見<br>出老千要用英文也太難了吧&#x3D; &#x3D;<br>剛好 VMware Fusion 免費了 直接研究一波</p><p>結果卡在奇怪的地方 這邊簡單紀錄一下</p><span id="more"></span><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>註冊 BROADCOM 後下載 VMware Fusion</li><li>下載 arm64 windows 11 iso 檔</li><li>掛 iso 檔到 VMware Fusion 後安裝</li><li>設置網路時會卡住 此時要按 Shift+F10 打開 cmd 後打 oobe\bypassnro</li><li>找到 install VMware Tools 安裝驅動程式</li><li>調整 VM 要用的核心數、RAM</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>ISO 檔<br><a href="https://massgrave.dev/windows_arm_links">https://massgrave.dev/windows_arm_links</a></li><li>網路設定解法<br><a href="https://www.intel.com.tw/content/www/tw/zh/support/articles/000092599/intel-nuc.html">https://www.intel.com.tw/content/www/tw/zh/support/articles/000092599/intel-nuc.html</a></li><li>安裝流程<br><a href="https://www.youtube.com/watch?v=EBpa6fguOO0">https://www.youtube.com/watch?v=EBpa6fguOO0</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/vmfusion.webp&quot; alt=&quot;vmfusion&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近玩 Mac 版的 Card Shark 到一半竟然中文字幕會不見&lt;br&gt;出老千要用英文也太難了吧&amp;#x3D; &amp;#x3D;&lt;br&gt;剛好 VMware Fusion 免費了 直接研究一波&lt;/p&gt;
&lt;p&gt;結果卡在奇怪的地方 這邊簡單紀錄一下&lt;/p&gt;</summary>
    
    
    
    <category term="雜學清談" scheme="http://example.com/categories/%E9%9B%9C%E5%AD%B8%E6%B8%85%E8%AB%87/"/>
    
    
  </entry>
  
  <entry>
    <title>Wordpress 搬家到 Hexo 心得</title>
    <link href="http://example.com/2024/11/18/Wordpress-transfer-to-Hexo/"/>
    <id>http://example.com/2024/11/18/Wordpress-transfer-to-Hexo/</id>
    <published>2024-11-18T15:59:27.000Z</published>
    <updated>2024-11-19T03:39:31.423Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2024/11/18/Wordpress-transfer-to-Hexo/claudia-cover.png" alt="cover"></p><p>對，我又搬家了<br>從最早期把 WordPress 架在 GCP<br>到搬家至 Cloudways<br>再到現在改成用 Hexo 直接放在 Github Pages<br>稍微紀錄一下心得這樣</p><span id="more"></span><h2 id="簡易步驟"><a href="#簡易步驟" class="headerlink" title="簡易步驟"></a>簡易步驟</h2><ol><li><p>安裝 Git, Node.js</p></li><li><p>安裝 Hexo</p></li></ol><pre><code>npm install -g hexo-cli</code></pre><ol start="3"><li>初始化</li></ol><pre><code>hexo init [folder]</code></pre><ol start="4"><li>安裝&#x2F;啟用主題，我用的是 <a href="https://github.com/Haojen/hexo-theme-Claudia?tab=readme-ov-file">Cloudia</a><br>把這個主題 clone 到 hexo 的 theme 資料夾下<br>接著把 _config.yml 使用的 theme 改成</li></ol><pre><code>theme: hexo-theme-claudia</code></pre><ol start="5"><li>code block 調整<br>Claudia 有寫好 code block 因此可以把 Hexo 內建的關掉<br>一樣在 _config.yml</li></ol><pre><code>syntax_highlighter: false</code></pre><ol start="6"><li>在文章插入圖片<br>在 _config.yml 打開</li></ol><pre><code>post_asset_folder: true</code></pre><p>並安裝</p><pre><code>npm install hexo-renderer-marked --save</code></pre><p>這樣在生成文章 <code>hexo new post [title]</code> 的時候就會自動生成相同 title 的 folder<br>把想要的圖片放進去 再用 markdown 語法 <code>![圖片](圖片名.jpg)</code> 就可以了</p><ol start="7"><li>把 Wordpress 的文章搬過來<br>安裝 hexo-migrator-wordpress 外掛</li></ol><pre><code>npm install hexo-migrator-wordpress --save</code></pre><p>由 WordPress 儀表板的 “工具” → “匯出” → “WordPress” 匯出網站資料<br>跑</p><pre><code>hexo migrate wordpress &lt;source&gt;</code></pre><p><code>source</code> 為 WordPress 匯出檔案的路徑</p><p><strong>目前文章內的圖片來源還是 WP 還沒找到一次性修改的方法</strong></p><ol start="8"><li>首頁預覽的文章摘要<br>參考 <a href="https://jiangding1990.github.io/2017/04/25/Hexo%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E6%96%B9%E6%B3%95/">這篇文章</a><br>我是用 <code>&lt;!--more--&gt;</code> 來手動截斷</li></ol><h2 id="佈署"><a href="#佈署" class="headerlink" title="佈署"></a>佈署</h2><p>可以參考 <a href="https://chanchandev.com/note/Hexo/hexo-introduction/2335841689/#%E8%A6%81%E6%80%8E%E9%BA%BC%E5%9C%A8%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%8A%E6%94%BE%E5%9C%96%E7%89%87%E5%91%A2-%EF%BC%9F">這篇文章</a><br>最後跑 <code>hexo clean &amp; hexo deploy</code> 就可以了</p><h2 id="自訂-Domain-網域"><a href="#自訂-Domain-網域" class="headerlink" title="自訂 Domain 網域"></a>自訂 Domain 網域</h2><p>一樣參考上面 <a href="https://chanchandev.com/note/Hexo/hexo-introduction/2335841689/#%E8%A6%81%E6%80%8E%E9%BA%BC%E5%9C%A8%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%8A%E6%94%BE%E5%9C%96%E7%89%87%E5%91%A2-%EF%BC%9F">這篇文章</a><br>不過我是另外再設了 subdomain<br>在 Namecheap 是這樣新增，value 一樣是指向 github pages 的那 4 個 IP<br><img src="/2024/11/18/Wordpress-transfer-to-Hexo/namecheap.png" alt="namecheap"><br>雖然 github pages 設定看起來不建議<br><img src="/2024/11/18/Wordpress-transfer-to-Hexo/github-pages.png" alt="github-pages"><br>但這樣設定是ok 的<br><img src="/2024/11/18/Wordpress-transfer-to-Hexo/home.png" alt="home"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>語系設置<br>可以新增一個 <code>themes/hexo-theme-Claudia/languages/zh-tw.yml</code><br>在裡面寫自己的繁體中文<br>接著在 <code>_config.yml</code> 調整</li></ol><pre><code>language: zh-tw</code></pre><p>就可以了!</p><ol start="2"><li>CNAME 設置<br>參考<a href="https://blog.dmoon.tw/github-pages-custom-domain/index.html">這篇文章</a><br>原來 CNAME 直接放在根目錄的話會在 <code> hexo generate &amp; hexo deploy</code> 時被覆蓋掉<br>要改放到 <code>/source/</code> 底下</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://github.com/Haojen/hexo-theme-Claudia?tab=readme-ov-file">https://github.com/Haojen/hexo-theme-Claudia?tab=readme-ov-file</a></li><li><a href="https://github.com/hexojs/hexo-renderer-marked">https://github.com/hexojs/hexo-renderer-marked</a></li><li><a href="https://chanchandev.com/note/Hexo/hexo-introduction/2335841689/#%E8%A6%81%E6%80%8E%E9%BA%BC%E5%9C%A8%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%8A%E6%94%BE%E5%9C%96%E7%89%87%E5%91%A2-%EF%BC%9F">https://chanchandev.com/note/Hexo/hexo-introduction/2335841689/#%E8%A6%81%E6%80%8E%E9%BA%BC%E5%9C%A8%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%8A%E6%94%BE%E5%9C%96%E7%89%87%E5%91%A2-%EF%BC%9F</a></li><li><a href="https://hexo.io/zh-tw/docs/asset-folders#Global-Asset-Folder">https://hexo.io/zh-tw/docs/asset-folders#Global-Asset-Folder</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2024/11/18/Wordpress-transfer-to-Hexo/claudia-cover.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;對，我又搬家了&lt;br&gt;從最早期把 WordPress 架在 GCP&lt;br&gt;到搬家至 Cloudways&lt;br&gt;再到現在改成用 Hexo 直接放在 Github Pages&lt;br&gt;稍微紀錄一下心得這樣&lt;/p&gt;</summary>
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 Firebase Import 備份檔並 Export 成 csv 檔</title>
    <link href="http://example.com/2024/01/23/%E4%BD%BF%E7%94%A8-firebase-import-%E5%82%99%E4%BB%BD%E6%AA%94%E4%B8%A6-export-%E6%88%90-csv-%E6%AA%94/"/>
    <id>http://example.com/2024/01/23/%E4%BD%BF%E7%94%A8-firebase-import-%E5%82%99%E4%BB%BD%E6%AA%94%E4%B8%A6-export-%E6%88%90-csv-%E6%AA%94/</id>
    <published>2024-01-23T01:24:04.000Z</published>
    <updated>2024-11-18T05:02:43.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前題"><a href="#前題" class="headerlink" title="前題"></a>前題</h1><p>有人給了一包 firebase export 出來的東西 而我們的目的是把它轉成 MySQO 可以吃的資料</p><span id="more"></span><h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><ol><li><p>上傳資料到 GCS bucket 內供 firebase import GCS: <a href="https://console.cloud.google.com/storage/browser?authuser=6&project=lucky-antler-412004&prefix=&forceOnBucketsSortingFiltering=true">https://console.cloud.google.com/storage/browser?authuser=6&project=lucky-antler-412004&prefix=&forceOnBucketsSortingFiltering=true</a> 這個要是付費帳戶才行，可以用 300usd 免費額度</p></li><li><p>import 到 firebase 的 firestore 指令: gcloud firestore import gs:&#x2F;&#x2F;my-bucket&#x2F;2017-05-25T23:54:39_76544&#x2F; –database&#x3D;’cymbal’</p><ul><li>注意路徑 (gcloud 指令可能會加東西)、gcs的區域要和 firestore 一樣 圖形化介面 Google Cloud Console 都會失敗 用could shell 就好 <a href="https://cloud.google.com/shell/?authuser=6">https://cloud.google.com/shell/?authuser=6</a></li></ul></li><li><p>export 成 csv 使用 firefoo: <a href="https://stackoverflow.com/questions/74713884/how-export-all-firestore-data-to-excel-of-csv">https://stackoverflow.com/questions/74713884/how-export-all-firestore-data-to-excel-of-csv</a> <a href="https://www.firefoo.app/docs/firestore-export-import/export-csv">https://www.firefoo.app/docs/firestore-export-import/export-csv</a> <img src="https://growingdna.com/wp-content/uploads/2024/01/image-1705972943050.png" alt="file"></p></li></ol><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>官方文件 (中文的翻譯有點怪) 英: <a href="https://cloud.google.com/firestore/docs/manage-data/export-import?authuser=6#gcloud_3">https://cloud.google.com/firestore/docs/manage-data/export-import?authuser=6#gcloud_3</a> 中: <a href="https://firebase.google.com/docs/firestore/manage-data/export-import?hl=zh-tw#google-cloud-console_2">https://firebase.google.com/docs/firestore/manage-data/export-import?hl=zh-tw#google-cloud-console_2</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前題&quot;&gt;&lt;a href=&quot;#前題&quot; class=&quot;headerlink&quot; title=&quot;前題&quot;&gt;&lt;/a&gt;前題&lt;/h1&gt;&lt;p&gt;有人給了一包 firebase export 出來的東西 而我們的目的是把它轉成 MySQO 可以吃的資料&lt;/p&gt;</summary>
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>實作 二階段驗證/雙重驗證 2FA — 以 Laravel 為例</title>
    <link href="http://example.com/2023/02/15/two-factor-authentication-laravel/"/>
    <id>http://example.com/2023/02/15/two-factor-authentication-laravel/</id>
    <published>2023-02-15T08:58:18.000Z</published>
    <updated>2024-11-18T17:09:21.986Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2FA.jpg" alt="2fa"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>或許大家已經對 二階段驗證 (<a href="https://en.wikipedia.org/wiki/Multi-factor_authentication">Two-factor authentication</a>) 不陌生</p><p>主要就是為了防止有心人士在獲得你的帳號密碼後，就得以登入並進行犯罪</p><p>二階段驗利用手機、或任何只有你才知道的資訊來進行第二層驗證</p><p>因此提高了安全性</p><span id="more"></span><p>主要的流程如下</p><h2 id="實例操作流程"><a href="#實例操作流程" class="headerlink" title="實例操作流程"></a><strong><strong>實例操作流程</strong></strong></h2><ol><li>使用者在登入後進入設定頁來設置二階段驗證 (可用工具如 Google Authenticator 、 Authy 等)</li><li>系統將藉工具產生的二階段驗碼當作 key 存入 server</li><li>當使用者要再次登入或進行具機敏性的操作時，須額外輸入二階段驗證工具產生的 code</li><li>系統驗證二階段驗證工具產生 code，在經過編碼後，是否與 server 內的 key 一致</li></ol><h2 id="以-Laravel-實作"><a href="#以-Laravel-實作" class="headerlink" title="以 Laravel 實作"></a>以 Laravel 實作</h2><p>以下將以 Laravel 實作</p><p>並只處理後端的部份，略過前端畫面 render</p><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ul><li>PHP 7.4</li><li>Laravel 8.x LTS</li><li>安裝套件 : <a href="https://github.com/antonioribeiro/google2fa">https://github.com/antonioribeiro/google2fa</a></li></ul><p><code>composer require pragmarx/google2fa</code></p><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><pre><code class="php">&lt;?phpuse Illuminate\Support\Facades\Route;use App\Http\Controllers\TestController;Route::post(&#39;twoFa-create&#39;, [TestController::class, &#39;twoFaCreate&#39;]);Route::post(&#39;twoFa-verify&#39;, [TestController::class, &#39;twoFaVerify&#39;]);</code></pre><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ol><li>使用 <code>Google2FA</code> 物件來產生 key 存入 db，並回傳 url 至前端供 user 以二階段驗證工具綁定</li></ol><pre><code class="php">&lt;?phpnamespace App\Http\Controllers;use Illuminate\Http\Request;use Illuminate\Routing\Controller as BaseController;use PragmaRX\Google2FA\Google2FA;class TestController extendsBaseController    public function twoFaCreate(Request $request)    &#123;        $id = $request-&gt;id;        $google2fa = new Google2FA();        $secret = $google2fa-&gt;generateSecretKey();        // 找到目前登入的 user 並將套件產生的二階段驗證碼存入        $updateDate = [            &#39;google2fa_token&#39; =&gt; $secret        ];        User::query()            -&gt;where(&#39;id&#39;, $id)            -&gt;update($updateDate);              // 使用工具產生 unique 的 url，讓使用者可以用二階段驗證工具掃碼存入        $qrCodeUrl = $google2fa-&gt;getQRCodeUrl(            &#39;testUser&#39;,            &#39;testUser@gmail.com&#39;,            $secret        );        // qrCodeUrl 可以直接用 google 的工具轉成 qrcode ，或給前端自己產。 見註1              return $qrCodeUrl;        // 根據 userId 取出        $secret = &#39;4YI2RPLREM64FKDM&#39;;        $otp = &#39;633672&#39;;        $valid = $google2fa-&gt;verifyKey($secret, $otp);        dd($valid);        return $google2fa-&gt;generateSecretKey();    &#125;&#125;</code></pre><ul><li>註1: 這邊可以使用 google 的<a href="https://developers.google.com/chart/infographics/docs/qr_codes?hl=zh-tw">工具</a>將 url 轉變成圖片 範例如下，掃了之後就可以得到 <code>otpauth://totp/test:test%40gmail.com?secret=4YI2RPLREM64FKDM</code> ，給二階段驗證工具使用</li></ul><p><img src="https://growingdna.com/wp-content/uploads/2023/02/%E6%88%AA%E5%9C%96-2023-02-15-%E4%B8%8B%E5%8D%884.50.16.png"> cht&#x3D;qr chl&#x3D;otpauth:&#x2F;&#x2F;totp&#x2F;test:test%40gmail.com?secret&#x3D;4YI2RPLREM64FKDM choe&#x3D;UTF-8</p><ol start="2"><li>驗證使用者輸入的 code 是否合法</li></ol><pre><code class="php">    public function twoFaVerify(Request $request)        &#123;            $user = User::findById($request-&gt;id);            $otpCode = $request-&gt;otpCode;      $google2fa = new Google2FA();            // 使用 verifyKey 來驗證是否是合法 code            $valid = $google2fa-&gt;verifyKey($secret, $otp);            // 繼續處理你要的東西...    &#125;</code></pre><ol start="3"><li>完成!</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://blog.twjoin.com/%E7%AD%86%E8%A8%98-google2fa-for-laravel-88b1febc2711">https://blog.twjoin.com/筆記-google2fa-for-laravel-88b1febc2711</a></li><li><a href="https://github.com/antonioribeiro/google2fa">https://github.com/antonioribeiro/google2fa</a> -<a href="https://developers.google.com/chart/infographics/docs/qr_codes?hl=zh-tw">https://developers.google.com/chart/infographics/docs/qr_codes?hl&#x3D;zh-tw</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/2FA.jpg&quot; alt=&quot;2fa&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;或許大家已經對 二階段驗證 (&lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-factor_authentication&quot;&gt;Two-factor authentication&lt;/a&gt;) 不陌生&lt;/p&gt;
&lt;p&gt;主要就是為了防止有心人士在獲得你的帳號密碼後，就得以登入並進行犯罪&lt;/p&gt;
&lt;p&gt;二階段驗利用手機、或任何只有你才知道的資訊來進行第二層驗證&lt;/p&gt;
&lt;p&gt;因此提高了安全性&lt;/p&gt;</summary>
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="PHP / Laravel" scheme="http://example.com/categories/tech-note/PHP-Laravel/"/>
    
    
  </entry>
  
  <entry>
    <title>FTX 帝國崩潰紀錄與檢討</title>
    <link href="http://example.com/2022/11/19/ftx-collapse/"/>
    <id>http://example.com/2022/11/19/ftx-collapse/</id>
    <published>2022-11-19T04:53:12.000Z</published>
    <updated>2024-11-18T17:01:39.099Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ftx.jpeg" alt="ftx"></p><span id="more"></span><h2 id="寫在前頭"><a href="#寫在前頭" class="headerlink" title="寫在前頭"></a>寫在前頭</h2><p>從結論來說，真的沒有想到全球第二大的交易所 FTX 就在一週左右就這樣倒了 錢拿不出來全卡在裡面、申請破產重組的進度不知道怎樣、各種對 FTX 亂搞公司的爆料、內控各種炸裂 訊息還是不斷在更新，手機一直跳 twitter、各式新聞頻道的推播</p><p>但還是得整理一下心情 重新理理這一切 整理這肯定是投資(投機?)以來最大的挫折</p><h2 id="入幣圈經歷"><a href="#入幣圈經歷" class="headerlink" title="入幣圈經歷"></a>入幣圈經歷</h2><h3 id="2021-5月-不完美的開始"><a href="#2021-5月-不完美的開始" class="headerlink" title="2021. 5月: 不完美的開始"></a>2021. 5月: 不完美的開始</h3><p>仔細想了一下 真正接觸應該是看到 Benson 大那篇 <a href="https://bensonsun.medium.com/%E7%94%A8-300-%E8%90%AC%E6%9C%AC%E9%87%91%E5%89%B5%E9%80%A0%E6%AF%8F%E6%9C%88-6-%E8%90%AC%E7%9A%84%E8%A2%AB%E5%8B%95%E6%94%B6%E5%85%A5-bitfinex-%E5%87%BA%E5%80%9F%E7%BE%8E%E5%85%83%E5%85%A8%E6%94%BB%E7%95%A5%E6%95%99%E5%AD%B8-47634cc54fbf">用 300 萬本金創造每月 6 萬的被動收入</a> (更早有註冊交易所但就放著 暫不列入) 看了一下好像風險滿低，對於小白也滿方便的 於是在 5月時註冊 ACE，並在 6 號時完成 KYC、20號完成出金到 Bitfinex <img src="https://growingdna.com/wp-content/uploads/2022/11/image-1668832780667.26.11.png" alt="file"> 然後…..就沒有然後了 XD 一方面是 Bitfinex 有夠難用 二方面是又懶了起來 結果在註冊 Fuly + ACE + Bitfinex 後就止步於此了</p><h3 id="2021-10-月-FOMO-Dog、Demi-Human-真正啟程"><a href="#2021-10-月-FOMO-Dog、Demi-Human-真正啟程" class="headerlink" title="2021. 10 月: FOMO Dog、Demi-Human 真正啟程"></a>2021. 10 月: FOMO Dog、Demi-Human 真正啟程</h3><p>後來陸續接觸到 Ryan、Raymond 雙 R 的 Podcast 和 YT 發現這個好像滿酷的而且有夠 FOMO 於是 PO 文參加抽獎 (但沒中) <img src="https://growingdna.com/wp-content/uploads/2022/11/image-1668832807020.45.18.png" alt="file"> 10&#x2F;24 開 Mint (手速太慢在調 gas fee 也沒搶到) 發現自己啥都不會的時候發現有個新手社群 Demi-Human 有做推廣給小白的新手系列</p><p>看了看價格不貴，而且那時台灣 NFT 正起飛 就 mint 了幾張 <img src="https://i.imgur.com/uQtXshU.jpg"> 這就這樣開始一知半解開始玩了 NFT、Olympus DAO、Defi、CeFi、放貸…的旅程 一路下來是有賺有賠 但整體下來應該就是差不多在打平的狀態</p><h3 id="2022-5-月-躲過-UST-脫鉤、Luna-歸零、Celcisus-停止出金"><a href="#2022-5-月-躲過-UST-脫鉤、Luna-歸零、Celcisus-停止出金" class="headerlink" title="2022. 5 月: 躲過 UST 脫鉤、Luna 歸零、Celcisus 停止出金"></a>2022. 5 月: 躲過 UST 脫鉤、Luna 歸零、Celcisus 停止出金</h3><p>因著 Anchor protocal 的 20% 高利率、Celcisus 10% 高息 基本上都有放資金在裡面 但因為加入的 <a href="https://www.pressplay.cc/project/8E868E86B993EA8BB077B51AB8B9BD99/about">呢喃貓</a>社群都有提醒要跑 於是都很幸運先出金跑掉了 <img src="https://i.imgur.com/RM1C0Wx.jpg"></p><h2 id="FTX-炸裂-SBF-跌落神壇經過"><a href="#FTX-炸裂-SBF-跌落神壇經過" class="headerlink" title="FTX 炸裂 SBF 跌落神壇經過"></a>FTX 炸裂 SBF 跌落神壇經過</h2><h3 id="2022-11月-FTX-爆雷"><a href="#2022-11月-FTX-爆雷" class="headerlink" title="2022. 11月 FTX 爆雷"></a>2022. 11月 FTX 爆雷</h3><p>沒想到同年 11月初開始 twitter 上開始有各種對 FTX 的質疑 11&#x2F;7(一) 晚上社群內的直播也有說該跑 但看了各界 KOL 的說法，想說應該也沒啥事 只是神仙吵架，我們小人物就也就等著就好 再加上那一陣子正好超忙，晚上只想早點睡 結果沒想到就錯過了脫逃的最佳時機….</p><p>11&#x2F;8(二) 中午後出金就有各種問題 晚上 12點 CZ 發布 “可能” 要全資收購 FTX 想說安心了可以洗洗睡</p><p>11&#x2F;9(三) 一覺醒來 CZ放棄收購、 FTX 資不抵債、FTT 跌到 2塊多 各種梗圖出現 <img src="https://i.imgur.com/jCR6twb.jpg"> Credit: <a href="https://www.instagram.com/cryptotw_meme/">https://www.instagram.com/cryptotw_meme&#x2F;</a></p><p>接著一連串爆炸 FTX 破產清算、巴拿馬帳戶出金、駭客把錢都轉走、SBF 被爆料各種資金挪用&amp;逃亡 這時也正式把手機 FTX PRO、FTX Blockfolio 都刪了 感覺人生一陣涼風吹過 幣圈資產配置最重的部位就這樣沒了</p><p>真的，要重頭開始了</p><h2 id="檢討與學習"><a href="#檢討與學習" class="headerlink" title="檢討與學習"></a>檢討與學習</h2><p>回顧一下事情發生的經過 真的不要不理性，尤其是在幣圈這種高風險的環境 有高度風險意識和行動的話，其實是可以避掉這次的</p><p>所以還是得總結下教訓</p><h3 id="1-沒有什麼是大到不能倒"><a href="#1-沒有什麼是大到不能倒" class="headerlink" title="1. 沒有什麼是大到不能倒"></a>1. 沒有什麼是大到不能倒</h3><p>想當初雷曼兄弟炸裂也是很多人覺得不可能 幣圈的呢? 嗯…更不用說了</p><h3 id="2-不要有信仰，無論是對-KOL、機構甚至所有人"><a href="#2-不要有信仰，無論是對-KOL、機構甚至所有人" class="headerlink" title="2. 不要有信仰，無論是對 KOL、機構甚至所有人"></a>2. 不要有信仰，無論是對 KOL、機構甚至所有人</h3><p>承接上一條教訓 該逃就要逃 KOL、發言人一定都有他們的立場 完全相信可能不一定會有什麼好下場 聽了後還是要回歸到自己身上 一旦自己沒躲掉 其風險可能是完全無法承擔的</p><h3 id="3-不要輕忽小概率事件"><a href="#3-不要輕忽小概率事件" class="headerlink" title="3. 不要輕忽小概率事件"></a>3. 不要輕忽小概率事件</h3><p>就算發生的機率再小 但就像保保險一樣 只要一但發生了就無法承擔的話 那還是規避吧 不要事後了才來後悔</p><h3 id="4-墨菲定律"><a href="#4-墨菲定律" class="headerlink" title="4. 墨菲定律"></a>4. 墨菲定律</h3><p>最近一次其實是 USDT 被 FUD 說擠兌會爆 那時就做了滿多避險，但實際沒用到 這次就抱了點僥倖心態，沒想到……</p><p>真的，不要僥倖 有可能會爆掉，就真的有可能會爆掉 <img src="https://i.imgur.com/iwRBpGo.png"> Credit: <a href="https://www.instagram.com/cryptotw_meme/">https://www.instagram.com/cryptotw_meme&#x2F;</a></p><h2 id="未來"><a href="#未來" class="headerlink" title="未來"></a>未來</h2><p>這次爆雷影響之大，還不知道有多少地方會被波及 冷靜下來後也真的是重新再盤點一下</p><h3 id="1-平衡幣圈資產"><a href="#1-平衡幣圈資產" class="headerlink" title="1. 平衡幣圈資產"></a>1. 平衡幣圈資產</h3><p>之前真的放太多 因為這次也持續出金放多一點到台美股上 可能等幣圈平靜些再入金了</p><h3 id="3-Not-your-keys-not-you-coin"><a href="#3-Not-your-keys-not-you-coin" class="headerlink" title="3. Not your keys, not you coin"></a>3. Not your keys, not you coin</h3><p>該來好好搞搞冷錢包了 手上有兩個都放著要發霉了</p><h3 id="3-努力工作-Work-Fi"><a href="#3-努力工作-Work-Fi" class="headerlink" title="3. 努力工作 Work-Fi"></a>3. 努力工作 Work-Fi</h3><p>重拾許久沒研究的技術領域、部落格(包括這篇) 積極尋找其他機會、加強自己的硬實力 讓虧損在明年補回來! <img src="https://i.imgur.com/DFFTfbo.jpg"></p><p>最後 這大概也是人生有始以來第一次這麼多人主動私訊關心我 看來我韭菜的名聲也是小有名氣 XD</p><p>老實說也是因為這個爆炸才有這麼強的動力去整理投資、工作和生活規劃 感謝有這個機會，讓我有動機重新再出發</p><p>有要取暖的朋友也歡迎留言 之後有什麼好的資訊也會不定期更新</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/ftx.jpeg&quot; alt=&quot;ftx&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="投資理財" scheme="http://example.com/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>創世區塊是什麼？</title>
    <link href="http://example.com/2022/02/21/what-is-genesis-block/"/>
    <id>http://example.com/2022/02/21/what-is-genesis-block/</id>
    <published>2022-02-21T09:22:32.000Z</published>
    <updated>2024-11-15T10:19:31.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>區塊 #0 又被稱為是創世區塊 但要了解創世區塊前，勢必得先了解什麼是區塊鏈 那什麼是區塊鏈呢? 區塊鏈技術可以把它想像成是一個去中心化的帳本 那什麼又是去中心化的帳本呢? 要回答這個問題，首先就得理解</p><ol><li>中心化 vs. 去中心化</li><li>帳本是什麼</li><li>和區塊鏈之間的關係是什麼</li></ol><h2 id="中心化-vs-去中心化"><a href="#中心化-vs-去中心化" class="headerlink" title="中心化 vs. 去中心化"></a>中心化 vs. 去中心化</h2><p>中心化就是我們目前大部份的社會運作方式 舉例來說 A 若要透過銀行轉帳 $NT100 給 B A 就要跟銀行說 “欸我要轉 NT$100 給 B 喔” 此時銀行就會在它的 “中心化帳本” 記下這筆 “A 轉帳 NT$100 給 B”的紀錄 在銀行紀錄下來之後 B 就會在他的銀行紀錄內看到自己的戶多多了 NT$100 塊了 <img src="https://growingdna.com/wp-content/uploads/2022/02/circle-design-electronic-funds-transfer-bank-payment-online-banking-money-bank-account-wire-transfer-png-clipart-400x400.jpeg"></p><p>在這個情境下 因為交易紀錄是記在銀行內 其他人都沒有 任何人想要知道這個交易紀錄的話 都必須要透過銀行來取得 因此，銀行是中心化的 意即所有的資料都記在它那邊 其他人都沒有</p><p>相較之下 去中心化就是將 “A 轉帳 NT$100 給 B” 的這個交易紀錄記在每個人手中的帳本裡 因此所有人都知道所有人的交易紀錄 沒有一個中心化的組織來紀錄交易資料 因此我們說這是 “去中心化”</p><h2 id="帳本"><a href="#帳本" class="headerlink" title="帳本"></a>帳本</h2><p>如同上面所說 帳本其實就是一堆的交易紀錄 就像是上面說的 “A 轉帳 NT$100 給 B” 就是眾多交易紀錄的其中一筆 而這些帳本沒有存在一個中心化的地方 (比如說傳統上的銀行) 而是在每個人手上 (我們會稱之為 “節點”) 所以才說這是去中心化的帳本 <img src="https://growingdna.com/wp-content/uploads/2022/02/examining-bank-statement-604x400.jpeg"></p><h2 id="和區塊鏈之間的關係"><a href="#和區塊鏈之間的關係" class="headerlink" title="和區塊鏈之間的關係"></a>和區塊鏈之間的關係</h2><p>但現在我們知道了區塊鏈是一個去中心化的帳本 具體而言它是長什麼樣子呢 可以看下面這張圖 <img src="https://growingdna.com/wp-content/uploads/2022/02/image-1645432372584.png" alt="file"> 其中的 BLOCK2、BLOCK3、BLOCK4 就是一個個的區塊 每個區塊可以約略區分成 Transactions (交易紀錄)、Time stamp (時間戳)、Hash of previous block (前一區塊的的 hash) 這麼多的區塊是怎麼連起來的呢? 就是用前一個區塊的 hash (hash 可以先把它理解成前一個區塊的部份加密過後的內容即可)連起來 進來變成一條長長的 “鏈” 也因此被稱為是 “區塊鏈”</p><p><img src="https://growingdna.com/wp-content/uploads/2022/02/image-1645432382027.png" alt="file"></p><h1 id="創世區塊是什麼"><a href="#創世區塊是什麼" class="headerlink" title="創世區塊是什麼"></a>創世區塊是什麼</h1><p>講了一堆 終於要回來說什麼是創世區塊了 如前文所述 每個區塊都是用前一個區塊的 hash 連在一起的 那麼第一個區塊呢? 因為它沒有前一個區塊的 hash，同時又是第一個 所以就被我們稱為 “創世區塊” (Genesis Block)</p><p>而如前所說 區塊鏈其實就是紀錄了一堆交易資料的分散式帳本 所以勢必要有至少一筆交易被紀錄才行 因此在實務上 我們只要完成了至少一筆交易交易紀錄 創世區塊就會被建立出來了 接下來所有的區塊都可以回溯到這個創世區塊 由此可見它的重要性啊!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;區塊 #0 又被稱為是創世區塊 但要了解創世區塊前，勢必得先了解什麼是區塊鏈 那什麼是區塊鏈呢? 區塊鏈技術可以把它想像成是一個去中心化的帳</summary>
      
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    <category term="投資理財" scheme="http://example.com/categories/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>用 PHP 實作 Web Service－一次搞懂 XML、SOAP、WSDL (下)</title>
    <link href="http://example.com/2021/09/02/user-php-soapclient-2/"/>
    <id>http://example.com/2021/09/02/user-php-soapclient-2/</id>
    <published>2021-09-02T09:56:35.000Z</published>
    <updated>2024-11-15T10:19:31.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><p>有了<a href="https://growingdna.com/user-php-soapclient-1/">上文的名詞解釋</a> 我們總算可以開始來實作了 以下將以 PHP 的 SoapClient 為例 說明怎麼用這個 class 來對 server 端發送 request 做 XML 格式的資料交換</p><h2 id="Contruct"><a href="#Contruct" class="headerlink" title="Contruct"></a>Contruct</h2><p>根據官方說明 (<a href="https://www.php.net/manual/en/soapclient.construct.php">https://www.php.net/manual/en/soapclient.construct.php</a>) <code>SoapClient::__construct</code> 可以是 WSDL 或 non-WSDL mode 的 以下將以 WSDL 為例</p><p>官方裡有提到</p><pre><code>public SoapClient::__construct(?string $wsdl, array $options = [])</code></pre><p>可以到有兩個要素: WSDL 和 options</p><h3 id="WSDL"><a href="#WSDL" class="headerlink" title="WSDL"></a>WSDL</h3><p>就是 WSDL 的位置 可能放在遠端也可能掛在 local 內</p><ul><li><p>若放在遠端</p><ul><li>放遠端的 URL</li><li>例: <a href="https://domain.net/example?WSDL">https://domain.net/example?WSDL</a> (注意這個最後的 <code>?WSDL</code> 很重要 server 端的 url 結尾不是 <code>.wsdl</code> 的話 就得改成這樣 原因不明 我之前就是沒放所以 GG 了)</li></ul></li><li><p>若放在 local</p><ul><li>放你 local 的絕對路徑</li><li>例: &#x2F;your&#x2F;path&#x2F;to&#x2F;file.xml</li></ul></li></ul><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>這個選項就多了 比較重要的應該是 <code>stream_context</code> 和 <code>trace</code> 這邊就可以設定一下 SSL 協定 例:</p><pre><code class="php">$streamContext = [            &quot;ssl&quot; =&gt; [                &quot;verify_peer&quot; =&gt; false,                &quot;verify_peer_name&quot; =&gt; false            ]        ];// 使用 `stream_context_create` 這個 func 來建 streamContext 物件，trace 開起來後有利之後看 log        $client = new SoapClient($url, [&#39;stream_context&#39; =&gt; stream_context_create($streamContext),                                 &#39;trace&#39; =&gt; 1]);        </code></pre><p>註: 如果在發送 SOAP 時也要在 http header 塞一些東西 (比如說 token 之類的) 也要特別寫在 stream_context 裡面</p><p>所以上面的例子可改寫成</p><pre><code class="php">$httpHeader = &#39;token: 123456&#39;;$streamContext = [            &quot;ssl&quot; =&gt; [                &quot;verify_peer&quot; =&gt; false,                &quot;verify_peer_name&quot; =&gt; false            ],            // 把這個塞進來，其他的不變            &#39;http&#39; =&gt; [                &#39;header&#39; =&gt; $httpHeader,             ]        ];$client = new SoapClient($url, [&#39;stream_context&#39; =&gt; stream_context_create($streamContext),                                 &#39;trace&#39; =&gt; 1]);        </code></pre><h2 id="setSoapHeaders"><a href="#setSoapHeaders" class="headerlink" title="setSoapHeaders"></a>setSoapHeaders</h2><p>SOAP 當然也有自己的 header 要處理 所以會使用到這個 func</p><p>例:</p><pre><code class="php">$auth = array(        &#39;UserName&#39;=&gt;&#39;USERNAME&#39;,        &#39;Password&#39;=&gt;&#39;PASSWORD&#39;,        &#39;SystemId&#39;=&gt; array(&#39;_&#39;=&gt;&#39;DATA&#39;,&#39;Param&#39;=&gt;&#39;PARAM&#39;),        );</code></pre><h2 id="呼叫-function"><a href="#呼叫-function" class="headerlink" title="呼叫 function"></a>呼叫 function</h2><p>最後當然就是呼叫 WSDL 裡定義的 func 來 call SOAP 啦 這邊就是根據文件或 WSDL 裡寫的 func 來做呼叫</p><p>所以整段code 的樣貌會變成:</p><pre><code class="php">// 宣告目的 url$url = &#39;https://domain.net/example?WSDL&#39;;// 宣告 httpHeader，並塞到 streamContext 裡$httpHeader = &#39;token: 123456&#39;;$streamContext = [            &quot;ssl&quot; =&gt; [                &quot;verify_peer&quot; =&gt; false,                &quot;verify_peer_name&quot; =&gt; false            ],            // 把這個塞進來，其他的不變            &#39;http&#39; =&gt; [                &#39;header&#39; =&gt; $httpHeader,             ]        ];// 使用上述的資料 new 一個 SoapClient 出來        $client = new SoapClient($url, [&#39;stream_context&#39; =&gt; stream_context_create($streamContext),                                 &#39;trace&#39; =&gt; 1]);   // 在 soapHeader 裡加入需要的資料$auth = array(        &#39;UserName&#39;=&gt;&#39;USERNAME&#39;,        &#39;Password&#39;=&gt;&#39;PASSWORD&#39;,        &#39;SystemId&#39;=&gt; array(&#39;_&#39;=&gt;&#39;DATA&#39;,&#39;Param&#39;=&gt;&#39;PARAM&#39;),        );$header = new SoapHeader(&#39;NAMESPACE&#39;,&#39;Auth&#39;, $auth, false);$client-&gt;__setSoapHeaders($header);// 假設在 body 裡面是被說明這次呼叫的目的$soapBody = [    &#39;action&#39; =&gt; &#39;login&#39;];// 根據文件以及當下的情境，我們要去執行 SOAP 裡面的 login 這個 func$function = &#39;login&#39;;// 執行這個 func 同時使用剛宣告的 soapBody$response = $client-&gt;function($soapBody);</code></pre><p>以上這樣 就完成了一個簡單的 SOAP 呼叫了</p><p>如果有任何問題 歡迎留言詢問 希望這篇文章有幫助到你~!</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="http://yes.nctu.edu.tw/Lecture/NewTech/C05/WebServices/Web%20Services%E4%BB%8B%E7%B4%B9.htm">http://yes.nctu.edu.tw/Lecture/NewTech/C05/WebServices/Web%20Services%E4%BB%8B%E7%B4%B9.htm</a> <a href="https://dotblogs.com.tw/marcus116/2011/08/28/34524">https://dotblogs.com.tw/marcus116/2011/08/28/34524</a> <a href="https://morosedog.gitlab.io/technology-20200226-tech-3/">https://morosedog.gitlab.io/technology-20200226-tech-3/</a> <a href="https://www.w3schools.com/xml/xml_soap.asp">https://www.w3schools.com/xml/xml_soap.asp</a> <a href="https://www.rusnake.com/2016/08/12/php-soapclient-%E9%80%A3%E6%8E%A5-https-%E7%9A%84-webservice/">https://www.rusnake.com/2016/08/12/php-soapclient-%E9%80%A3%E6%8E%A5-https-%E7%9A%84-webservice/</a> <a href="https://www.php.net/manual/en/class.soapclient.php">https://www.php.net/manual/en/class.soapclient.php</a> <a href="https://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1">https://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;實作&quot;&gt;&lt;a href=&quot;#實作&quot; class=&quot;headerlink&quot; title=&quot;實作&quot;&gt;&lt;/a&gt;實作&lt;/h1&gt;&lt;p&gt;有了&lt;a href=&quot;https://growingdna.com/user-php-soapclient-1/&quot;&gt;上文的名詞解釋&lt;/a&gt; </summary>
      
    
    
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="PHP / Laravel" scheme="http://example.com/categories/tech-note/PHP-Laravel/"/>
    
    
  </entry>
  
  <entry>
    <title>用 PHP 實作 Web Service－一次搞懂 XML、SOAP、WSDL (上)</title>
    <link href="http://example.com/2021/08/11/user-php-soapclient-1/"/>
    <id>http://example.com/2021/08/11/user-php-soapclient-1/</id>
    <published>2021-08-11T02:43:27.000Z</published>
    <updated>2024-11-15T10:19:31.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近真的串太多 XML 的 api 了 覺得太多眉眉角角要注意 又有滿多詭異的部份 所以這邊記下來 供有需要的朋友參考參考!</p><h1 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h1><h2 id="Web-Services-Web-服務"><a href="#Web-Services-Web-服務" class="headerlink" title="Web Services (Web 服務)"></a>Web Services (Web 服務)</h2><h3 id="是一種跨程式語言和跨作業系統平臺的遠端呼叫技術"><a href="#是一種跨程式語言和跨作業系統平臺的遠端呼叫技術" class="headerlink" title="是一種跨程式語言和跨作業系統平臺的遠端呼叫技術"></a>是一種跨程式語言和跨作業系統平臺的遠端呼叫技術</h3><pre><code>- 跨程式語言    - 也就是 server 端無論用什麼程式語言寫的， client 端都可以用其他語言寫- 跨操作平臺：    - server 端程式和 client 端程式可以在不同的作業系統上執行- 遠端呼叫技術:     - 機器 A 上的一個程式可以呼叫到另外機器 B 上的一個物件的方法    - 例: Youtube 把斗內的金額狀態以 Web Service 的方式暴露在外，讓 client 端可以呼叫並應用         比如說做一個斗內的進度條出來 (https://www.youtube.com/watch?v=xdySMoDZq-E)</code></pre><h3 id="三大平台技術"><a href="#三大平台技術" class="headerlink" title="三大平台技術"></a>三大平台技術</h3><pre><code>- XML XSD- SOAP- WSDL</code></pre><p>分成以下三個部份詳述</p><h2 id="XML-XSD"><a href="#XML-XSD" class="headerlink" title="XML XSD"></a>XML XSD</h2><p>Web Service採用HTTP協議傳輸資料 並採用XML格式封裝資料 (即XML中說明呼叫遠端服務物件的哪個方法，傳遞的引數是什麼，以及服務物件的返回結果是什麼)</p><h3 id="XML-Extensible-Markup-Language，可延伸標記式語言"><a href="#XML-Extensible-Markup-Language，可延伸標記式語言" class="headerlink" title="XML (Extensible Markup Language，可延伸標記式語言)"></a>XML (Extensible Markup Language，可延伸標記式語言)</h3><pre><code>- Web Service平臺中表示資料的格式。易於建立和易於分析- 例:</code></pre><p>example.xml</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;note&gt;&lt;to&gt;George&lt;/to&gt;&lt;from&gt;MoroseDog&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don&#39;t forget the meeting!&lt;/body&gt;&lt;/note&gt;</code></pre><h3 id="XSD-XML-Schema-Definition"><a href="#XSD-XML-Schema-Definition" class="headerlink" title="XSD (XML Schema Definition)"></a>XSD (XML Schema Definition)</h3><pre><code>- 指出如何形式描述XML文件的元素，定義了一套標準的資料型別，並給出了一種語言來擴充套件這套資料型別- 例:</code></pre><p>example.xsd (XML Schema文件，它定義了上面那個XML文件的元素。)</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;xs:schema xmlns:xs=&quot;http://morosedog.gitlab.io/2020/XMLSchema&quot;targetNamespace=&quot;http://morosedog.gitlab.io&quot;xmlns=&quot;http://morosedog.gitlab.io&quot;elementFormDefault=&quot;qualified&quot;&gt;&lt;xs:element name=&quot;note&quot;&gt;    &lt;xs:complexType&gt;      &lt;xs:sequence&gt;    &lt;xs:element name=&quot;to&quot; type=&quot;xs:string&quot;/&gt;    &lt;xs:element name=&quot;from&quot; type=&quot;xs:string&quot;/&gt;    &lt;xs:element name=&quot;heading&quot; type=&quot;xs:string&quot;/&gt;    &lt;xs:element name=&quot;body&quot; type=&quot;xs:string&quot;/&gt;      &lt;/xs:sequence&gt;    &lt;/xs:complexType&gt;&lt;/xs:element&gt;&lt;/xs:schema&gt;</code></pre><p>註: 工具可能已經自動完成了這個轉換，但我們或會根據需求修改一下轉換過程</p><h2 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h2><p>Web Service通過 HTTP 協議傳送請求和接收結果時 傳送的請求內容和結果內容都採用XML格式封裝 並增加了一些特定的HTTP header 以說明 HTTP 訊息的內容格式 這些特定的 HTTP header 和 XML 內容格式就是 SOAP 協議</p><blockquote><p>SOAP協議 &#x3D; HTTP協議 + XML資料格式</p></blockquote><p>例:</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;soap:Envelopexmlns:soap=&quot;http://morosedog.gitlab.io/2001/12/soap-envelope&quot;soap:encodingStyle=&quot;http://morosedog.gitlab.io/2001/12/soap-encoding&quot;&gt;&lt;soap:Header&gt;  ...  ...&lt;/soap:Header&gt;&lt;soap:Body&gt;  ...  ...  &lt;soap:Fault&gt;    ...    ...  &lt;/soap:Fault&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</code></pre><h2 id="WSDL-Web-Services-Description-Language"><a href="#WSDL-Web-Services-Description-Language" class="headerlink" title="WSDL (Web Services Description Language)"></a>WSDL (Web Services Description Language)</h2><p>Web Service 的 client 端要向 server 端呼叫一個Web Service服務時 首先要有知道這個服務的地址在哪 以及這個服務裡有什麼方法可以呼叫 所以Web Service servier端首先要通過一個 WSDL 檔案來說明上述資訊</p><p>WSDL 就是這樣一個基於XML的語言 它是Web Service客戶端和伺服器端都能理解的標準格式 用於描述Web Service及其函式、引數和返回值</p><p>例:</p><pre><code class="xml">&lt;message name=&quot;getTermRequest&quot;&gt;  &lt;part name=&quot;term&quot; type=&quot;xs:string&quot;/&gt;&lt;/message&gt;&lt;message name=&quot;getTermResponse&quot;&gt;  &lt;part name=&quot;value&quot; type=&quot;xs:string&quot;/&gt;&lt;/message&gt;&lt;portType name=&quot;glossaryTerms&quot;&gt;  &lt;operation name=&quot;getTerm&quot;&gt;    &lt;input message=&quot;getTermRequest&quot;/&gt;    &lt;output message=&quot;getTermResponse&quot;/&gt;  &lt;/operation&gt;&lt;/portType&gt;</code></pre><p>寫到這邊 架構大概會長成這樣 (可先忽略 UDDI 的部份) <img src="https://growingdna.com/wp-content/uploads/2021/09/image-1630575966283.51.09.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近真的串太多 XML 的 api 了 覺得太多眉眉角角要注意 又有滿多詭異的部份 所以這邊記下來 供有需要的朋友參考參考!&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="PHP / Laravel" scheme="http://example.com/categories/tech-note/PHP-Laravel/"/>
    
    
  </entry>
  
  <entry>
    <title>[反脆弱]讀後心得</title>
    <link href="http://example.com/2021/07/11/antifragile-note/"/>
    <id>http://example.com/2021/07/11/antifragile-note/</id>
    <published>2021-07-11T08:26:38.000Z</published>
    <updated>2024-11-15T10:19:31.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什麼是反脆弱"><a href="#什麼是反脆弱" class="headerlink" title="什麼是反脆弱?"></a>什麼是反脆弱?</h2><ul><li>脆弱: 遇到危機就GG</li><li>強固: 遇到危機就休止成長</li><li>反脆弱: 脆弱的相反，遇到危難時反而變更強，取得更大利益</li><li>脆弱喜歡安穩，反脆弱從混亂中成長，強固則不那麼在意外在的環境</li><li>e.g., 同樣是失言: 企業高管: 馬上GG 廣場粗工: 沒差 網紅館長: 講了反而會有討論度 (類比: 一些過氣的藝人會搞些緋聞)</li></ul><h2 id="凸性與凹性"><a href="#凸性與凹性" class="headerlink" title="凸性與凹性"></a>凸性與凹性</h2><p><img src="https://growingdna.com/wp-content/uploads/2021/08/image-1628670252608.23.32.png" alt="file"></p><ul><li>凸性: 風險規模越大，得到的利益越大</li><li>凹性: 風險規模越大，受到的損失越大</li></ul><h2 id="成就反脆弱的策略"><a href="#成就反脆弱的策略" class="headerlink" title="成就反脆弱的策略"></a>成就反脆弱的策略</h2><ul><li>槓鈴策略：採取兩邊的極端，避免中間的普通區 → 一邊採取極端高風險，一邊採取極端底風險<ul><li>e.g.,<br>投資: 90%現金，10%高風險證券; 工作: 一份無聊穩定的公務員+高風險的作家 塔雷伯: 專業文章+通俗文章</li></ul></li><li>在系統內注入脆弱性，得到反脆弱<ul><li>e.g., 一個公司如果持續淘汰不好的業務，就能讓整個公司更具反脆弱性 一個有讀書習慣的人，在固定讀的書外要加入一些平常不會讀的東西</li></ul></li><li>取得選擇權<ul><li>選擇權是反脆弱性的代理人 → 選擇權具備不對稱性</li><li>e.g., 投資: 期貨選擇權 工作: 取得其他工作的選擇權 or 做副業</li></ul></li><li>創造對於風險的凸性<ul><li>面對疫病的風險? → 買醫療保險</li><li>面對 AI 的取代性? → 買 AI 股票</li></ul></li><li>增加強固性<ul><li>本書並沒有否認強固性，因為很多東西其實是沒辦法反脆弱的，比如說建築物就沒辦法在地震越大時反而越強</li><li>作法:<ul><li>減法知識反則: 確認什麼是錯的比確認什麼是對的更簡單 e.g.,確認生活中哪些人是不能信任的</li><li>尊重經驗法則: 經歷百年或千年的傳統，比新觀念更有強固性</li></ul></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>增加強固性與增加反脆弱性並行</li><li>決策思考<ul><li>上檔利益很小，下檔損失很大 → 不做</li><li>上檔利益很大，下檔損失很小 → 做</li></ul></li><li>反脆弱不是所有事情的解答</li></ul><h2 id="來源"><a href="#來源" class="headerlink" title="來源"></a>來源</h2><p><a href="https://www.youtube.com/watch?v=uFOWTcWY0bY">https://www.youtube.com/watch?v=uFOWTcWY0bY</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什麼是反脆弱&quot;&gt;&lt;a href=&quot;#什麼是反脆弱&quot; class=&quot;headerlink&quot; title=&quot;什麼是反脆弱?&quot;&gt;&lt;/a&gt;什麼是反脆弱?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;脆弱: 遇到危機就GG&lt;/li&gt;
&lt;li&gt;強固: 遇到危機就休止成長&lt;/li&gt;
&lt;li&gt;反脆</summary>
      
    
    
    
    <category term="興趣陳列" scheme="http://example.com/categories/%E8%88%88%E8%B6%A3%E9%99%B3%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 Python 批次新增/修改 SQL</title>
    <link href="http://example.com/2021/06/24/use-python-batch-update-sql/"/>
    <id>http://example.com/2021/06/24/use-python-batch-update-sql/</id>
    <published>2021-06-24T11:00:50.000Z</published>
    <updated>2024-11-15T10:19:31.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>假設現在我們有一個情境要生成 500 個 SQL</p><pre><code class="sql">UPDATE `tableA` INNER JOIN `tableB` ON `tableA`.`foreign_id` = `tableB`.`id` SET `setting_value`  = &quot;number:111&quot; WHERE `tableB`.`test_name` = &quot;testABC&quot;;</code></pre><p>其中 裡面的變數 <code>111</code> 和 <code>testABC</code> 然後我們有一個 excel 的 mapping table 長的像這樣 <img src="https://growingdna.com/wp-content/uploads/2021/06/%E6%88%AA%E5%9C%96-2021-06-24-%E4%B8%8B%E5%8D%886.48.10.png"> 裡面就記載了這 500 句 sql 組成的邏輯 現在是還簡單 基本上是一對一的關係 也就是: <code>111</code> 會對應到 <code>testABC</code> <code>222</code> 會對應到 <code>testwjfaw</code> 原則上還是可以用 excel 內建的公式來建</p><p>但如果複雜一點 比如說根據條件 A ，來決定 <code>111</code> 要對應到的是 <code>testABC</code> 還是 <code>testwjfaw</code> 這樣就會有點複雜 雖然應該還是可以用 excel 的公司來寫 但就會有點麻煩</p><p>以下我們就來看看要怎麼用 python 完成吧!</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><p>[step]1[&#x2F;step] 首先將 excel 輸出成 <code>csv</code> 檔 當作是 python 要引入的資料源</p><p>[step]2[&#x2F;step] 新增 createSQL.py 檔 並在裡面把我們要批次更新的 sql 寫成類變數的型式</p><pre><code class="python">temp_sql = &#39;UPDATE `tableA`  INNER JOIN `tableB` ON `tableA`.`foreign_id` = `tableB`.`id` SET `setting_value`  = &quot;&#123;setting_value&#125;&quot; WHERE `tableB`.`test_name` = &quot;&#123;test_name&#125;&quot;;&#39;</code></pre><p>[step]3[&#x2F;step] 引入剛剛下載下來的 <code>csv</code> 檔並使用 <code>replace</code> function 來替換掉要改的變數</p><pre><code class="python">with open(&#39;/your-path-to-file/testFile.csv&#39;) as csvfile:  # 打開 csv    rows = csv.reader(csvfile, ) # 將 csv 內容一行一行存到 rows    next(rows);    for row in rows: # 一列一列更新        print (temp_sql.replace(&#39;&#123;setting_value&#125;&#39;,&#39;&#123;number&#39; + row[2] + &#39;&#125;&#39;).replace(&#39;&#123;prod_level2_oid&#125;&#39;,row[3])) # row[2]代表第二欄 、row[3]代表第三欄</code></pre><p>[step]4[&#x2F;step] 執行 python 直接在 command line 裡 <code>python ./createSQL</code> 就可以把 sql 都 print 出來了!</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>最後附上 github 連結: <a href="https://github.com/BenmrChen/createSQL.py/blob/main/createSQL.py">https://github.com/BenmrChen/createSQL.py/blob/main/createSQL.py</a> 有問題的歡迎大大們留言討論 謝謝!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;情境&quot;&gt;&lt;a href=&quot;#情境&quot; class=&quot;headerlink&quot; title=&quot;情境&quot;&gt;&lt;/a&gt;情境&lt;/h2&gt;&lt;p&gt;假設現在我們有一個情境要生成 500 個 SQL&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;UPDATE `tableA` IN</summary>
      
    
    
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="Python" scheme="http://example.com/categories/tech-note/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>[為什麼要睡覺？：睡出健康與學習力、夢出創意的新科學] 閱讀心得</title>
    <link href="http://example.com/2021/05/10/why-we-sleep/"/>
    <id>http://example.com/2021/05/10/why-we-sleep/</id>
    <published>2021-05-10T06:18:27.000Z</published>
    <updated>2024-11-15T10:19:31.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>衝著比爾蓋茲和癌大推薦 終於把這本書啃完 裡面內容真的太豐富，從實驗設計、數據統計到理論推導都相當嚴謹 以下節錄重點</p><h2 id="重點節錄"><a href="#重點節錄" class="headerlink" title="重點節錄"></a>重點節錄</h2><h3 id="掌握人睡眠的兩大趨力"><a href="#掌握人睡眠的兩大趨力" class="headerlink" title="掌握人睡眠的兩大趨力:"></a>掌握人睡眠的兩大趨力:</h3><ol><li><p>近日節奏: 人的一天”大約”為24小時的規律</p><ul><li>實際上比24小時多一點，所以叫近日</li><li>有個體差異，所以有晨型人、夜型人、介於兩者間的人</li><li>基因決定，為適應採集生活中須要防備外敵需求，但在工業社會後對夜型人相當不公平</li><li>實作方式: 分泌褪黑激素</li></ul></li><li><p>睡眠壓力</p><ul><li>腺苷: 濃度越高，人越想睡</li><li>咖啡因會和腺苷的受體結合，使人不想睡。這兩種趨力互相獨立 所以人可以熬夜卻不想睡 (腺苷高，但近日節奏走過低谷)</li></ul></li></ol><h3 id="判斷是否睡的足夠"><a href="#判斷是否睡的足夠" class="headerlink" title="判斷是否睡的足夠:"></a>判斷是否睡的足夠:</h3><ol><li>起床後，10、11點是否會回頭睡</li><li>中午前是否可以在沒有咖啡因的狀況下理想運作，若不行 則可能是腺苷一直累積 變長期慢性病</li><li>不設鬧會，是否會睡過頭</li><li>發現自己坐在電腦前，會重讀甚至再三讀</li></ol><h3 id="睡眠分類及其用途"><a href="#睡眠分類及其用途" class="headerlink" title="睡眠分類及其用途:"></a>睡眠分類及其用途:</h3><ol><li>簡單分睡眠成”非快速動眼期”、”快速動眼期”</li><li>前者用來鞏固記憶，讓短期記憶變長期(就算是中午的小睡也有用)</li><li>後者用來將記憶連結在一起，進而產生智慧、創意。e.g.,白天想不到的 idea，在睡眠時大腦幫你工作，進而連結出解法</li></ol><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ol><li>睡覺很重要，無論是非快速動眼期還是快速動眼期，前者鞏固記憶，後者連結記憶</li><li>我要睡去了 掰掰!</li></ol><h2 id="書本連結"><a href="#書本連結" class="headerlink" title="書本連結"></a>書本連結</h2><p><a href="https://growingdna.com/book-why-we-sleep" title="why-we-sleep"><img src="https://growingdna.com/wp-content/uploads/2021/05/getImage.jpeg" alt="why-we-sleep" title="why-we-sleep"></a> <a href="https://growingdna.com/why-we-sleep">https://growingdna.com/why-we-sleep</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;衝著比爾蓋茲和癌大推薦 終於把這本書啃完 裡面內容真的太豐富，從實驗設計、數據統計到理論推導都相當嚴謹 以下節錄重點&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    <category term="興趣陳列" scheme="http://example.com/categories/%E8%88%88%E8%B6%A3%E9%99%B3%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>[編譯 vs. 直譯] / [靜態 vs. 動態] / [強型別 vs. 弱型別]</title>
    <link href="http://example.com/2021/04/15/language-type-compiler/"/>
    <id>http://example.com/2021/04/15/language-type-compiler/</id>
    <published>2021-04-15T10:09:38.000Z</published>
    <updated>2024-11-15T10:19:31.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="編譯-vs-直譯-靜態-vs-動態-強型別-vs-弱型別"><a href="#編譯-vs-直譯-靜態-vs-動態-強型別-vs-弱型別" class="headerlink" title="[編譯 vs. 直譯] &#x2F; [靜態 vs. 動態] &#x2F; [強型別 vs. 弱型別]"></a>[編譯 vs. 直譯] &#x2F; [靜態 vs. 動態] &#x2F; [強型別 vs. 弱型別]</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近因為 <code>[編譯 vs. 直譯] / [靜態 vs. 動態] / [強型別 vs. 弱型別]</code> 有各種理解上的困難 索性寫一篇文章下來當作筆記 提醒自己的同時也希望對讀者有幫助!</p><h2 id="編譯-vs-直譯"><a href="#編譯-vs-直譯" class="headerlink" title="編譯 vs. 直譯"></a>編譯 vs. 直譯</h2><p>首先我們要理解到 為了讓我們人類寫的程式碼能讓機器讀懂 中間就一定會有一個轉譯的過程 透過這個過程 將我們人看的懂的語言轉換成機器看的懂的語言 也就是 0 和 1 圖解如下: <img src="https://growingdna.com/wp-content/uploads/2021/04/image-1618480532828.png" alt="file"> 而這個轉換的的方式則分成兩種 → <code>編譯</code> 與 <code>直譯</code> 對應到的工具就是 <code>編譯器</code> 與 <code>直譯器</code> 差別如下:</p><h3 id="編譯器"><a href="#編譯器" class="headerlink" title="編譯器:"></a>編譯器:</h3><p>一次性把所有的程式碼轉成機器看的懂的 0 和 1 他的文件就是在Windows裏叫的.exe檔 或者Unix中的可執行檔</p><h4 id="優點"><a href="#優點" class="headerlink" title="優點:"></a>優點:</h4><ul><li>執行速度快 (因為已經編譯好了)</li><li>程式有問題時在編譯時就能即時發現報錯 (而非執行時) 減少執行時的風險</li></ul><h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點:"></a>缺點:</h4><ul><li>開發較慢 → 開發時也不能開發一段就執行一次，而是須要等到編譯完後才能執行</li></ul><h4 id="特色"><a href="#特色" class="headerlink" title="特色:"></a>特色:</h4><ul><li>使用編譯器的編譯語言多數是靜態語言。他們會事先定義變數類別和做類別檢查等等。</li><li>常見語言: C++、C、Rust、Go、Visual Basic、Swift、Obj-C</li><li>編譯語言的可執行檔是可以獨立運行的 比如說 C++ 雖然只能在新電腦中編譯，但他的可執行檔甚至連不支援C++的電腦，都可以運行</li></ul><h3 id="直譯器"><a href="#直譯器" class="headerlink" title="直譯器:"></a>直譯器:</h3><p>一列一列轉換並執行</p><h4 id="優點-1"><a href="#優點-1" class="headerlink" title="優點:"></a>優點:</h4><ul><li>可以用交談式的方法寫程式</li><li>可以開發一小段程式碼就執行一次，加快開發時程</li></ul><h4 id="缺點-1"><a href="#缺點-1" class="headerlink" title="缺點:"></a>缺點:</h4><ul><li>執行速度較慢 而且沒辦法一次編譯完然後重複執行</li></ul><h4 id="特色-1"><a href="#特色-1" class="headerlink" title="特色"></a>特色</h4><ul><li>常見語言: Javascript 、Python、Shellscript、PHP</li><li>直譯語言需要有一個適合的執行環境&#x2F;或者說是一個VM，才可以執行 例如 Python3 程式碼便需要有在有安裝 Python3 的電腦中才可以運行</li></ul><h2 id="靜態-vs-動態"><a href="#靜態-vs-動態" class="headerlink" title="靜態 vs. 動態"></a>靜態 vs. 動態</h2><h3 id="定義："><a href="#定義：" class="headerlink" title="定義："></a>定義：</h3><p>變數和型別的綁定方法 白話來說，可以理解成變數在宣告的時候是否綁定型別</p><h3 id="靜態語言-Statically-Typed-Languages-："><a href="#靜態語言-Statically-Typed-Languages-：" class="headerlink" title="靜態語言(Statically Typed Languages)："></a>靜態語言(Statically Typed Languages)：</h3><ul><li>程式撰寫時必須使用明確的型別宣告。</li><li>型別一旦宣告後，在執行時期時無法任意更換型別，否則會發生錯誤。</li><li>編譯時期 (Compile Time)確認與檢查型別，一旦有變數誤用或資料型態上的 Bug，在編譯時期就能發現，降低執行時期的風險。</li></ul><h4 id="java-例"><a href="#java-例" class="headerlink" title="java 例"></a>java 例</h4><pre><code class="java">int x;x = &quot;Hello&quot;;</code></pre><p>這樣子就會出錯 因為型別宣告為整數 卻塞了個非整數的值 於是會報錯如下</p><pre><code>HelloWorld.java:5: error: incompatible types: String cannot be converted to int</code></pre><h3 id="動態語言-Dynamically-Typed-Languages-："><a href="#動態語言-Dynamically-Typed-Languages-：" class="headerlink" title="動態語言(Dynamically Typed Languages)："></a>動態語言(Dynamically Typed Languages)：</h3><ul><li>程式撰寫時不用明確的型別宣告</li><li>執行時，變數能任意更換型別</li><li>與靜態語言相反，是在執行時期(Runtime)確認與檢查型別</li></ul><h4 id="PHP-例"><a href="#PHP-例" class="headerlink" title="PHP 例"></a>PHP 例</h4><pre><code class="php">$a = 123;echo $a;  // print: 123$a = &quot;Hello&quot;;echo $a;  // print: Hello</code></pre><p>與 Java 不同 變數 a 的型別怎麼變都沒關係</p><h2 id="弱型別-vs-強型別："><a href="#弱型別-vs-強型別：" class="headerlink" title="弱型別 vs. 強型別："></a>弱型別 vs. 強型別：</h2><h3 id="定義"><a href="#定義" class="headerlink" title="定義:"></a>定義:</h3><p>語言型別系統(Type System)對型別檢查的嚴格程度，也就是型別安全的程度。 簡單來說，就是編譯器或直譯器對型別檢查的寬容程度 更淺白地形容：允許編譯器或直譯器自作主張的程度 強型別語言偏向說一是一、說二是二，你沒有在程式語法上明確指示就是沒這件事，發現不是正常寫法，直接停下來告訴你發生錯誤 弱型別語言就不同了，發現不是正常寫法，會試圖去做一些自動轉型，讓這段程式繼續運作下去</p><h3 id="強型別-strongly-typed-：偏向不容許隱性型別轉換，型別檢查上較為嚴格。"><a href="#強型別-strongly-typed-：偏向不容許隱性型別轉換，型別檢查上較為嚴格。" class="headerlink" title="強型別(strongly typed)：偏向不容許隱性型別轉換，型別檢查上較為嚴格。"></a>強型別(strongly typed)：偏向不容許隱性型別轉換，型別檢查上較為嚴格。</h3><p>以 Java 為例</p><pre><code class="java">var string = &quot;3&quot;;var number = 2 + string;</code></pre><p>這樣就會出錯 而在弱型別的JavaSctipt中就會顯示23，它幫我們把2轉為字串了</p><h3 id="弱型別-weakly-typed-：偏向容許隱性型別轉換，型別檢查上較為寬鬆。"><a href="#弱型別-weakly-typed-：偏向容許隱性型別轉換，型別檢查上較為寬鬆。" class="headerlink" title="弱型別(weakly typed)：偏向容許隱性型別轉換，型別檢查上較為寬鬆。"></a>弱型別(weakly typed)：偏向容許隱性型別轉換，型別檢查上較為寬鬆。</h3><p>以 Java 為例</p><pre><code class="java">var string = &quot;3&quot;;var number = 2 + string;</code></pre><p>這樣就會出錯 而在弱型別的JavaSctipt中就會顯示23，它幫我們把2轉為字串了</p><h2 id="靜態-vs-動態-強型別-vs-弱型別"><a href="#靜態-vs-動態-強型別-vs-弱型別" class="headerlink" title="[靜態 vs. 動態] + [強型別 vs. 弱型別]"></a>[靜態 vs. 動態] + [強型別 vs. 弱型別]</h2><p>討論到現在 我們終於可以把這兩個象限、四種類型給排列組合起來如下了: <img src="https://growingdna.com/wp-content/uploads/2021/04/image-1618480832299.png" alt="file"> (source: <a href="https://ithelp.ithome.com.tw/articles/10202260">https://ithelp.ithome.com.tw/articles/10202260</a>) <img src="https://growingdna.com/wp-content/uploads/2021/04/image-1618480553452.png" alt="file"> (source: <a href="https://millenniummeetonce.blogspot.com/2018/04/blog-post_5.html">https://millenniummeetonce.blogspot.com/2018/04/blog-post_5.html</a>)</p><p>是否看到了一堆沒看過的語言呢xd 沒關係 就只是一張圖 這篇文章可以讓各位知道 自己常用的語言是靜態的還是動態的、強型別還是弱型別、編譯語言還是直譯語言囉!</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://millenniummeetonce.blogspot.com/2018/04/blog-post_5.html">https://millenniummeetonce.blogspot.com/2018/04/blog-post_5.html</a> <a href="https://www.zhihu.com/question/19918532">https://www.zhihu.com/question/19918532</a> <a href="https://ithelp.ithome.com.tw/articles/10214510">https://ithelp.ithome.com.tw/articles/10214510</a> <a href="https://ithelp.ithome.com.tw/articles/10201839">https://ithelp.ithome.com.tw/articles/10201839</a> <a href="https://ithelp.ithome.com.tw/articles/10202260">https://ithelp.ithome.com.tw/articles/10202260</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;編譯-vs-直譯-靜態-vs-動態-強型別-vs-弱型別&quot;&gt;&lt;a href=&quot;#編譯-vs-直譯-靜態-vs-動態-強型別-vs-弱型別&quot; class=&quot;headerlink&quot; title=&quot;[編譯 vs. 直譯] &amp;#x2F; [靜態 vs. 動態] &amp;#x2F</summary>
      
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="PHP / Laravel" scheme="http://example.com/categories/tech-note/PHP-Laravel/"/>
    
    
  </entry>
  
  <entry>
    <title>[蠟筆小新：風起雲湧 猛烈！大人帝國的反擊] 心得</title>
    <link href="http://example.com/2021/04/01/crayon/"/>
    <id>http://example.com/2021/04/01/crayon/</id>
    <published>2021-04-01T02:30:13.000Z</published>
    <updated>2024-11-15T10:19:31.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蠟筆小新：風起雲湧-猛烈！大人帝國的反擊-心得"><a href="#蠟筆小新：風起雲湧-猛烈！大人帝國的反擊-心得" class="headerlink" title="[蠟筆小新：風起雲湧 猛烈！大人帝國的反擊] 心得"></a>[蠟筆小新：風起雲湧 猛烈！大人帝國的反擊] 心得</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這部真的超神! 完全呈現當下日本人對21世紀的各種不滿 以及對過往事物的留戀 雖然是20年前的電影了 放在現在看卻反而更加真實 簡單列幾點印象深刻的點下來</p><h2 id="重點節錄"><a href="#重點節錄" class="headerlink" title="重點節錄"></a>重點節錄</h2><p>以下分成 <code>配樂</code>、<code>情感描寫</code>、<code>運鏡</code>、<code>價值觀</code>來切入討論</p><h3 id="配樂：-一如往常地優秀，該熱血時該熱血，該溫情時該溫情"><a href="#配樂：-一如往常地優秀，該熱血時該熱血，該溫情時該溫情" class="headerlink" title="配樂： 一如往常地優秀，該熱血時該熱血，該溫情時該溫情"></a>配樂： 一如往常地優秀，該熱血時該熱血，該溫情時該溫情</h3><p>每個轉折都做的超級優秀 有一度會被音樂拉走的感覺xd 廣志回憶過往那個3分鐘經典真太加分 (<a href="https://www.youtube.com/watch?v=l-kIeMNBDfE">https://www.youtube.com/watch?v=l-kIeMNBDfE</a>) 最後一 cut 小新不斷往上跑也是透過樂器不斷堆疊 加上小新激情演出 才跑出最後大高潮啊</p><h3 id="情感描寫：片中沒有絕對的反派，就算是看起來像反派的阿建還是不斷給小新一家機會打壞他的計劃"><a href="#情感描寫：片中沒有絕對的反派，就算是看起來像反派的阿建還是不斷給小新一家機會打壞他的計劃" class="headerlink" title="情感描寫：片中沒有絕對的反派，就算是看起來像反派的阿建還是不斷給小新一家機會打壞他的計劃"></a>情感描寫：片中沒有絕對的反派，就算是看起來像反派的阿建還是不斷給小新一家機會打壞他的計劃</h3><p>似乎是刻意在跟他們說 “用行動來證明你的想法吧!” 默默期待他們能用自己的能力來打破自己又厭惡21世紀 又不確定是否可以一直活在20世紀的矛盾 將自己從這種複雜的情感中拯救出來</p><h3 id="運鏡："><a href="#運鏡：" class="headerlink" title="運鏡："></a>運鏡：</h3><p>特別喜歡電影最後，小新飛奔爬高塔的片段 有點像是雲黑齋的野心 使用對焦在主角正前方的鏡頭 透過不斷攀爬旋轉向上的高塔爬升感 來帶出來時間、尤其像是21世紀的巨輪是飛速前進的  而小新本人就是憑著想要和家人團聚的本心並付諸實踐、跌跌撞撞並不斷向上衝 才得以爬到頂樓 並透過攝影機來點醒眾人 沉浸於過往是無益的 直面未來才是正道</p><h3 id="另一種價值觀：對於沉浸過往氛圍的阿健等人，導演也沒有讓他們變-BOSS-被打倒就結束"><a href="#另一種價值觀：對於沉浸過往氛圍的阿健等人，導演也沒有讓他們變-BOSS-被打倒就結束" class="headerlink" title="另一種價值觀：對於沉浸過往氛圍的阿健等人，導演也沒有讓他們變 BOSS 被打倒就結束"></a>另一種價值觀：對於沉浸過往氛圍的阿健等人，導演也沒有讓他們變 BOSS 被打倒就結束</h3><p>反而是提供另一個出路讓他們去追尋 基本上就是不要否定另一種生存的價值 肯定並活在自己相信的事物也是很好的啊</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>就是真的太神了 五星吹捧 必看的小新動畫!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;蠟筆小新：風起雲湧-猛烈！大人帝國的反擊-心得&quot;&gt;&lt;a href=&quot;#蠟筆小新：風起雲湧-猛烈！大人帝國的反擊-心得&quot; class=&quot;headerlink&quot; title=&quot;[蠟筆小新：風起雲湧 猛烈！大人帝國的反擊] 心得&quot;&gt;&lt;/a&gt;[蠟筆小新：風起雲湧 猛烈！大</summary>
      
    
    
    
    <category term="興趣陳列" scheme="http://example.com/categories/%E8%88%88%E8%B6%A3%E9%99%B3%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>MYSQL：使用臨時表一次性大量UPDATE</title>
    <link href="http://example.com/2021/03/17/mysql-use-temp-table-to-update/"/>
    <id>http://example.com/2021/03/17/mysql-use-temp-table-to-update/</id>
    <published>2021-03-17T03:11:39.000Z</published>
    <updated>2024-11-15T10:19:31.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到須要更新一堆 DB 欄位的需求 實作後發現不同的寫法對效能的影響滿大的 這就來紀錄分享一下</p><h2 id="問題情境"><a href="#問題情境" class="headerlink" title="問題情境"></a>問題情境</h2><p>假設我們有2張表 分別是 <code>order</code>、<code>orderDetail</code> 其中 <code>order</code> 是訂單的總表 而 <code>orderDetail</code> 則是訂單的細節 兩者關係以下圖示之</p><p><code>order</code> <img src="https://growingdna.com/wp-content/uploads/2021/03/image-1615950078806.png" alt="file"></p><p><code>orderDetail</code> <img src="https://growingdna.com/wp-content/uploads/2021/03/image-1615950090367.png" alt="file"></p><h3 id="原始-table"><a href="#原始-table" class="headerlink" title="原始 table"></a>原始 table</h3><p>在 <code>order</code>裡的第一筆 (id&#x3D;1) 就叫他 apple 訂單吧! 對應到 <code>orderDetail</code> 可以發現 apple 訂單裡面有兩個 item 分別是 雞排 和腿排 (兩者的 fk 為 fk_orderID &#x3D; 1)</p><p>但為了閱讀方便 我們想要在 <code>order</code> 裡多新增一個 <code>items</code> 欄位 把這張訂單裡保括了了哪些品項給列出來 並用逗號隔開</p><p>成果如下</p><h3 id="修改後-table"><a href="#修改後-table" class="headerlink" title="修改後 table"></a>修改後 table</h3><p><img src="https://growingdna.com/wp-content/uploads/2021/03/image-1615950183239.png" alt="file"></p><p>可以發現每個訂單都有詳細的品項在裡面、並用逗號分開 如 apple 訂單 就有雞排、腿排在列 接下來我們就來看看 SQL 要怎麼寫吧!</p><h2 id="SQL-實作"><a href="#SQL-實作" class="headerlink" title="SQL 實作"></a>SQL 實作</h2><h3 id="原始-SQL"><a href="#原始-SQL" class="headerlink" title="原始 SQL"></a>原始 SQL</h3><p>最起初的想法是直接用 UPDATE 的語法一筆筆資科更新</p><pre><code class="sql">UPDATE `order` AS o SET o.`items` = (SELECT GROUP_CONCAT(od.`items`) AS &#39;items&#39; FROM `orderDetail` AS od WHERE od.fk_orderID = o.id GROUP BY o.`id`)</code></pre><p>但這樣子的缺點是 對 db 的存取需求量爆大 現在就只有幾筆資料 所以可能還好 但若訂單資料有幾千、幾萬筆的話 這樣子大量的存取就很可能會導致 db timeout 所以可以修改如下</p><h3 id="修改後-SQL-使用臨時表"><a href="#修改後-SQL-使用臨時表" class="headerlink" title="修改後 SQL &#x3D;&gt; 使用臨時表"></a>修改後 SQL &#x3D;&gt; 使用臨時表</h3><p>為了避免上面的問題 所以我們先 SELECT 一個已經把 by id 列好 items 的表出來 並把它存成一個暫存的表叫 name 然後再把 order 表去 join 這張暫存表 name 同時更新 items 欄位</p><pre><code class="sql">UPDATE `order` AS o INNER JOIN(SELECT o.`id`, GROUP_CONCAT(od.`items`) AS itemsFROM `order_test` AS oLEFT JOIN `orderDetail_test` od   ON od.`fk_orderID` = o.`id`GROUP BY o.`id`) AS nameON name.`id` = o.`id`SET o.`items` = name.`items`</code></pre><p>這樣就可以達到和前一個 SQL 一樣的成果 但只要存一次暫存表 name 就好 而非跑一堆查詢語法 進而有效改善效能問題</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.longwin.com.tw/2013/06/mysql-group-by-group_concat-2013/">https://blog.longwin.com.tw/2013/06/mysql-group-by-group_concat-2013&#x2F;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近遇到須要更新一堆 DB 欄位的需求 實作後發現不同的寫法對效能的影響滿大的 這就來紀錄分享一下&lt;/p&gt;
&lt;h2 id=&quot;問題情境&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="SQL" scheme="http://example.com/categories/tech-note/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>「原子習慣：細微改變帶來巨大成就的實證法則」讀書心得</title>
    <link href="http://example.com/2021/02/27/atomic-habits/"/>
    <id>http://example.com/2021/02/27/atomic-habits/</id>
    <published>2021-02-26T17:29:37.000Z</published>
    <updated>2024-11-15T10:19:31.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>紅透半邊天的書，身為跟風仔當然不得不拜讀一波 作者用了相當多的例子來證明養成習慣的重要及如何培養好習慣 就讓我們來看看這本全世界都在讀的書到底是在說啥吧!</p><h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><h3 id="習慣的重要"><a href="#習慣的重要" class="headerlink" title="習慣的重要"></a>習慣的重要</h3><ul><li>每天一點點的小改變，將因著複利效應，隨時間加長而帶來巨大變化 → 原子習慣的重要</li><li>值得注意的是，好的習慣會帶來可觀的成長，反正，壞的習慣則會帶來可怕的崩壞 → 壞原子習慣的重要</li></ul><h3 id="改變習慣的訣竅"><a href="#改變習慣的訣竅" class="headerlink" title="改變習慣的訣竅"></a>改變習慣的訣竅</h3><h4 id="改變習慣最有效的方法-→-改變身份認同"><a href="#改變習慣最有效的方法-→-改變身份認同" class="headerlink" title="改變習慣最有效的方法 → 改變身份認同"></a>改變習慣最有效的方法 → 改變身份認同</h4><ul><li>e.g., 我正在戒煙 versus 我不吸煙，就是兩個明顯相左的身份認同，且後者明顯更有效</li></ul><h4 id="建立好習慣的４法則"><a href="#建立好習慣的４法則" class="headerlink" title="建立好習慣的４法則"></a>建立好習慣的４法則</h4><ul><li><p><code>法則一</code>：讓提示顯而易見 行為的改變始於察覺，必須讓自己先明確且清楚意識到要改變的東西，改變才會開始</p></li><li><p><code>法則二</code>：讓習慣有吸引力 將要建立的習慣與既有的愛好或習慣綁定並堆疊在一起，公式是:</p><ol><li>做完 [目前的習慣] 之後，我會執行 [我需要的習慣] → 習慣的堆疊</li><li>做完 [我需要的習慣] 之後，我會執行 [我想要的習慣] → 將 “需要” 與 “想要” 給配對起來</li></ol></li><li><p><code>法則三</code>：讓習慣輕而易舉 最小努力原則→在兩個類似的選項中，人類的天性會選擇花費最少力氣的 (像是日常的滑手機) 因此要將執行習慣障礙盡可能減少，如環境設計 (e.g., 打造一個隨時可運動的環境)</p></li><li><p><code>法則四</code>：讓獎賞令人滿足 人類自然會趨向可以”立即”獲得獎賞的行為，並規避會”立即”遭受懲罰的行動 → 維持習慣的關鍵重點是「成功」的感受，不論其規模的大小</p></li><li><p>以上４個法則依序完成即形成一個「迴路」，這將加強下一次行為習慣被重複的可能性 →「習慣迴路」於是完成</p></li></ul><h2 id="小小心得"><a href="#小小心得" class="headerlink" title="小小心得"></a>小小心得</h2><p>這本書將習慣的重要與養成結構化了起來 把原來很常見的想法給更具體地論述出來 (比如說一個習慣的養成要21天) 並且給了一個個可行的方法供讀者實作</p><p>個人是覺得綁定「目前的習慣」和「需要的習慣」是滿有幫助的 這樣子可以讓新習慣的養成更加簡單 再加上最後的獎賞形成迴路的話 整個習慣養成的迴圈就會變的更加容易</p><p>而且這個迴圈一旦跑起來 因為人類對損失的趨避性 (假如說我好不容易養成了一個好習慣，卻因為某些原因而失去了，這樣子之前的努力不就白費勒?) 該習慣就更不容易打破 經年累月累積下來，相信會是一個很大的改變的力量</p><p>GOGOGO!!</p><p>書本連結請 <a href="https://growingdna.com/atomic-habbitatomic-habits">點我</a></p><p><a href="https://growingdna.com/atomic-habbit" title="atomic-habits"><img src="https://growingdna.com/wp-content/uploads/2021/02/0010822522-e1614331363704.jpg" alt="atomic-habits" title="atomic-habits"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;紅透半邊天的書，身為跟風仔當然不得不拜讀一波 作者用了相當多的例子來證明養成習慣的重要及如何培養好習慣 就讓我們來看看這本全世界都在讀的書到</summary>
      
    
    
    
    <category term="興趣陳列" scheme="http://example.com/categories/%E8%88%88%E8%B6%A3%E9%99%B3%E5%88%97/"/>
    
    <category term="雜學清談" scheme="http://example.com/categories/%E9%9B%9C%E5%AD%B8%E6%B8%85%E8%AB%87/"/>
    
    
  </entry>
  
  <entry>
    <title>聯盟行銷 API 串接 - 以聯盟網為例</title>
    <link href="http://example.com/2021/02/25/affiliate-marketing-api/"/>
    <id>http://example.com/2021/02/25/affiliate-marketing-api/</id>
    <published>2021-02-25T01:43:05.000Z</published>
    <updated>2024-11-15T10:19:31.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近年來聯盟行銷以相當快的速度火紅起來 雖然相較於歐美，台灣算是發展相當慢的了 但遲到總比沒到好 就讓我們來了解一下聯盟行銷是什麼 以及該如何串接聯盟行銷的 API 吧!</p><h2 id="什麼是聯盟行銷"><a href="#什麼是聯盟行銷" class="headerlink" title="什麼是聯盟行銷"></a>什麼是聯盟行銷</h2><p>簡單來說 就是當廠商想要推廣商品時 為了讓擴散效果擴大 於是廠商找了很多推廣者來，讓這些推廣者來幫忙賣商品 如果推廣者成功賣出商品了話，就會分到一定比例的分潤 進而達到雙贏的效果</p><p>因為對廠商來說，他成功賣出了產品 對推廣者來說，他成功取得了分潤 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1614217334697.png" alt="file"></p><p>在台灣 比較常見的機制是 廠商們和推廣者會透過中間平台 (比如說聯盟網&#x2F;通路王) 媒合 這種作法的好處有二</p><ol><li>廠商不用大肆宣傳即可接觸到很多推廣者</li><li>廠商不須一次接觸大量推廣者，而是與單一窗口對接即可 (對推廣者亦然)</li></ol><p>其關係可以以下圖表現之</p><h3 id="無第三方平台"><a href="#無第三方平台" class="headerlink" title="無第三方平台"></a>無第三方平台</h3><p><img src="https://growingdna.com/wp-content/uploads/2021/02/image-1614129275889.png" alt="file"></p><h3 id="有第三方平台"><a href="#有第三方平台" class="headerlink" title="有第三方平台"></a>有第三方平台</h3><p><img src="https://growingdna.com/wp-content/uploads/2021/02/image-1614129293242.png" alt="file"></p><p>從以上兩張圖可以看出來第三方平台扮演的角色相當重要 大大降低了要進入聯盟行銷的門檻</p><p>接下來我們就要來看看如何串接第三方平台 以下將以聯盟網為例 使用 S2S (Server to Server) 的方式做串接 並用 CPS(Cost per Sale) 商品導購或完成交易當作計費的基礎</p><h2 id="串接流程概述"><a href="#串接流程概述" class="headerlink" title="串接流程概述"></a>串接流程概述</h2><p>[step]1[&#x2F;step] 使用 JS 識別網址內是否保持聯盟行銷字串 若有，則 ajax 呼叫後端 API</p><p>[step]2[&#x2F;step] 將聯盟連結內容存入 cookie</p><p>[step]3[&#x2F;step] 結帳時確認 cookie 是否有聯盟連結內容</p><p>[step]4[&#x2F;step] 呼叫聯盟網 API 以分潤</p><h2 id="串接程式碼"><a href="#串接程式碼" class="headerlink" title="串接程式碼"></a>串接程式碼</h2><p>[step]1[&#x2F;step] 使用 JS 識別網址內是否保持聯盟行銷字串 假設今天有一個 end-user 透過 <code>https://mydomain.com?affiliate_src=testABC</code> 進入我們的網站 這個 <code>?affiliate_src=testABC</code> 就是我們要辨別出來的特定聯盟行銷字串</p><pre><code class="javascript">let req = app.parseUrl(&#39;/&#39;+ location.search);// 若有 affiliate_src 則呼叫後端 apiif (!(typeof(req.affiliate_src) == “undefined”))&#123;    $.ajax(&#123;        type: &#39;POST&#39;,        url: &#39;/api-end-point&#39;,        data: req,        dataType: &#39;json&#39;,        async: false,    &#125;).done(function(output) &#123;                callback(output);            &#125;)&#125;</code></pre><p>[step]2[&#x2F;step] 在 php 端將聯盟連結內容存入 cookie 供日後客戶結帳的時候參考</p><pre><code class="php">// 假設前端傳進來的變數是 $reqif (!empty($req[&#39;affiliate_src&#39;])) &#123;    setcookie(&quot;affiliate_src&quot;, $$req[&#39;affiliate_src&#39;], time()+3600); // cookie 過期的時間可自訂&#125;</code></pre><p>[step]3[&#x2F;step] 結帳時確認 cookie 是否有聯盟連結內容 如果有的話，就在成立訂單時同時加註該筆訂單有參與聯盟行銷</p><pre><code class="php">if (isset($_COOKIE[&#39;affiliate_src&#39;])) &#123;    $affiliate_src = $_COOKIE[&#39;affiliate_src&#39;];    // 存到訂單內    insertOrder($order, $affilate_src);&#125;</code></pre><p>[step]4[&#x2F;step] 呼叫聯盟網 API 以分潤 根據聯盟網文件 其 API end point 是 <code>https://vbtrax.com/track/postback/conversions/8/global?order=[訂單編號]&amp; order_total=[購買總金額]&amp;revenue=[佣金金額]&amp;server_subid=[id2]&amp;step=sale</code></p><p>上面中文的部份就是要我們自己算後傳給聯盟網的部份 所以</p><pre><code class="php">// assign api uri，注意 $subid 是聯盟網提供的，我們需要將這個值回傳$affiliate_api_uri = &#39;https://vbtrax.com/track/postback/conversions/8/global?order=&#39; . $yourOrder . &#39;&amp;revenue=&#39; . $yourrevenue . &#39;&amp;server_subid=&#39; . $subid . &#39;&amp;step=sale&#39;;// 建立連線$c = curl_init();curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);curl_setopt($c, CURLOPT_URL, $affiliate_api_uri);$affiliate_api_rtn = curl_exec($c);curl_close($c);</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>聯盟網: <a href="https://www.affiliates.one/zh-tw/">https://www.affiliates.one/zh-tw/</a></li><li>通路王: <a href="https://www.ichannels.com.tw/">https://www.ichannels.com.tw/</a></li><li>博客來 AP 策略聯盟: <a href="https://ap.books.com.tw/">https://ap.books.com.tw/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近年來聯盟行銷以相當快的速度火紅起來 雖然相較於歐美，台灣算是發展相當慢的了 但遲到總比沒到好 就讓我們來了解一下聯盟行銷是什麼 以及該如何</summary>
      
    
    
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="PHP / Laravel" scheme="http://example.com/categories/tech-note/PHP-Laravel/"/>
    
    
  </entry>
  
  <entry>
    <title>串接 Google OAuth 2.0 實現第三方登入</title>
    <link href="http://example.com/2021/02/08/google-oauth-2-0-for-3rd-party-login/"/>
    <id>http://example.com/2021/02/08/google-oauth-2-0-for-3rd-party-login/</id>
    <published>2021-02-08T07:41:04.000Z</published>
    <updated>2024-11-15T10:19:31.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了使用者方便 在目前的各大網站的註冊流程中 通常除了最基礎的註冊新帳號以外 也會提供第三方登入 比如說 google 登入、facebook 登入，甚至 github 登入等等</p><p>這樣的好處是可以讓使用者不須要額外註冊一個新帳號 而是可以直接使用現有的第三方帳號 即可達到註冊登入 達到快速轉換、降低門檻的效果</p><p>本文就是要來介紹如何使用 Google OAauth 來實現第三方登入</p><h2 id="流程簡介"><a href="#流程簡介" class="headerlink" title="流程簡介"></a>流程簡介</h2><p><img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612770164989.png" alt="file"> (來源: Google)</p><ol><li><p>自 Google API Console 取得 Google OAuth 2.0 憑證</p></li><li><p>自 Google Authorization Server 取得 access token (圖中 Request token + User login &amp; consent + Authorization code)</p></li><li><p>檢查使用者願意提供的資料範圍是否正確 (圖中 Exchange code for token + Token response)</p></li><li><p>送 access token 給 Google API，驗證正確後回傳使用者資料給我方 App 使用 (圖中 Use token to call Google API)</p></li></ol><h2 id="流程細節"><a href="#流程細節" class="headerlink" title="流程細節"></a>流程細節</h2><h3 id="設定-Google-Credentiails"><a href="#設定-Google-Credentiails" class="headerlink" title="設定 Google Credentiails"></a>設定 Google Credentiails</h3><p>[step]1[&#x2F;step] 進入 自 Google API Console <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760661254.png" alt="file"> [step]2[&#x2F;step] 點選 建立憑證 → OAuth 用戶端 ID <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760665142.png" alt="file"> [step]3[&#x2F;step] 設定同意畫面 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760677961.png" alt="file"> [step]4[&#x2F;step] 點選外部 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760692081.png" alt="file"> [step]5[&#x2F;step] 輸入相關資訊 標示星星都要填入 比較須要注意的是 <code>已授權的重新導向 URI</code> 這邊要填入在取得 OAuth access token 後的 callback 網址 以我的例子為例 在取得 token 後是要進入註冊的流程 所以在這邊會填入 <code>/google_next</code> <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760730982.png" alt="file"></p><p>[step]6[&#x2F;step] 確認 OAuth 用戶端已建立 這邊 show 出來的就是你的 ID 和密碼 待會我們會把這筆資料的 json 檔下載下來用 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760742973.png" alt="file"> [step]7[&#x2F;step] 下載憑證 json 回到 Google API Console 就可以看到剛剛建立的 OAuth 用戶端 ID 這邊點一下 “下載” 把它存起來 待會要用 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760750354.png" alt="file"></p><h3 id="Code-程式碼部份"><a href="#Code-程式碼部份" class="headerlink" title="Code 程式碼部份"></a>Code 程式碼部份</h3><p>[step]1[&#x2F;step] 依照官方文件使用 composer 安裝 library <code>composer require google/apiclient:&quot;^2.7&quot;</code></p><p>[step]2[&#x2F;step] 設定取得 credentials 路徑</p><pre><code class="php">public static function AuthUrl()&#123;    // New 一個 Google_Client 出來    $client = new Google_Client();    // 設定剛剛下載下來的 json 檔路徑    $client-&gt;setAuthConfig(&#39;/path/to/client_credentials.json&#39;);    // 設定 callback 轉址路徑，注意這個路徑必須和上面 `step5` 的 `已授權的重新導向 URI` 路徑一致    $client-&gt;setRedirectUri(f3()-&gt;get(&#39;uri&#39;) . &#39;/google_next&#39;);    // 設定可以 OAuth 授權的內容 以下就以最基本的 email 及 profile 資料為例    // 如果要更多資料可以參考: https://developers.google.com/identity/protocols/oauth2/scopes    $client-&gt;addScope(&#39;https://www.googleapis.com/auth/userinfo.email&#39;);    $client-&gt;addScope(&#39;https://www.googleapis.com/auth/userinfo.profile&#39;);    // 建立路徑    $url = $client-&gt;createAuthUrl();    // 接著就可以使用該路徑來 call Google Credentials    return $url;&#125;</code></pre><p>[step]3[&#x2F;step] 於 callback 路徑取得 userData 照上面的流程 我們理論上就會在 callback 取得 google 回傳的 access token 因此我們就可以用這個 token 來取得 userData</p><pre><code class="php">public static function userData()&#123;    // 前半段是一樣的    $client = new Google_Client();    $client-&gt;setAuthConfig(&#39;/path/to/client_credentials.json&#39;);    $client-&gt;setRedirectUri(f3()-&gt;get(&#39;uri&#39;) . &#39;/member/&#39; . $url);    // 取得 google 回傳的 access token    $client-&gt;authenticate($_GET[&#39;code&#39;]);    // 使用 service 物件來取得 profile 及 email    $service = new Google_Service_Oauth2($client);    $userData = $service-&gt;userinfo-&gt;get();    // 完成!    return $userData;&#125;</code></pre><p>根據上面的流程 就可以成功從 Google OAuth 取得使用者資料 因而達到串接 Google 登入的效果囉!</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://xenby.com/b/245-%E6%95%99%E5%AD%B8-google-oauth-2-0-%E7%94%B3%E8%AB%8B%E8%88%87%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">https://xenby.com/b/245-%E6%95%99%E5%AD%B8-google-oauth-2-0-%E7%94%B3%E8%AB%8B%E8%88%87%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97</a> <a href="https://blog.longwin.com.tw/2019/03/google-php-sdk-oauth-login-2019/">https://blog.longwin.com.tw/2019/03/google-php-sdk-oauth-login-2019/</a> <a href="https://petertc.medium.com/oauth-2-0-196a5550b668">https://petertc.medium.com/oauth-2-0-196a5550b668</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;為了使用者方便 在目前的各大網站的註冊流程中 通常除了最基礎的註冊新帳號以外 也會提供第三方登入 比如說 google 登入、faceboo</summary>
      
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="PHP / Laravel" scheme="http://example.com/categories/tech-note/PHP-Laravel/"/>
    
    
  </entry>
  
  <entry>
    <title>UML: 循序圖簡介</title>
    <link href="http://example.com/2021/01/09/uml-sequence-diagrams/"/>
    <id>http://example.com/2021/01/09/uml-sequence-diagrams/</id>
    <published>2021-01-09T09:17:56.000Z</published>
    <updated>2024-11-15T10:19:31.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言-什麼是-UML"><a href="#前言-什麼是-UML" class="headerlink" title="前言: 什麼是 UML"></a>前言: 什麼是 UML</h2><p>UML &#x3D;&#x3D; ‘Unified Modeling Language’ &#x3D;&#x3D; ‘統一塑模語言’ 它是一種標準化的標記語言 使開發者在對其他部門說明軟體系統時能更具體 並以視覺化的方式來建構流程 同時將這個流程給文件化</p><p>相較於常見的流程圖 UML 可能會會更有助於工程師與其他部門協助 (如 UI&#x2F;UX)</p><p>不過 還是得視情況決定什麼圖表最適合 以我的經驗來說 如果某一個功能牽涉的範圍或部門較廣 使用 UML 可能就是一個比較合適的方式</p><p>另外 UML 又有很多種不一樣的類型 以下將以循序圖 (Sequence Diagrams) 做說明</p><h2 id="流程圖-vs-循序圖"><a href="#流程圖-vs-循序圖" class="headerlink" title="流程圖 vs 循序圖"></a>流程圖 vs 循序圖</h2><h3 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h3><p><img src="/wp-content/uploads/2021/01/image-1610960193876.png" alt="file"> 這是個很常見流程圖 若沒有發生跨部門、跨類別處理的話還滿簡明的</p><p>但若遇到的狀況是比較複雜 須要串接到各個模組的話 <code>e.g., 某註冊流程要驗證帳密、要串第三方 API、要連動 EMAIL 系統</code> 那可能就比較不容易使用流程程圖來區分各個模組負責的東西 這時我們就可以出動循序圖了</p><h3 id="循序圖"><a href="#循序圖" class="headerlink" title="循序圖"></a>循序圖</h3><p>--</p><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>下圖分成 4個角色 分別是</p><ol><li>前端 front-end</li><li>server API</li><li>第三方登入 API</li><li>第三方發信 API</li></ol><h4 id="片段型態"><a href="#片段型態" class="headerlink" title="片段型態"></a>片段型態</h4><p>常見的有</p><ol><li>alt (Alternatives) : 任何情況只有一個序列發生，是互斥的條件</li><li>par (Parallel) : 平行處理，片段中的事件可以交錯執行</li><li>opt (Option) : 選擇項，不一定會發生的序列(要符合條件)</li><li>loop : 重複片段。可以設立重複的條件，若未設定最小級最大重複次數，預設表示無限制</li><li>ref (Reference) : 表示參考另一個互動循序圖</li></ol><p>下圖只有用到 opt 其他可以參考<a href="https://dotblogs.com.tw/wasichris/2016/03/17/232341">這篇文章</a> <img src="/wp-content/uploads/2021/01/image-1610960228839.png" alt="file"></p><p>如此以來 我們就可以很清楚知道4個角色之間的權責是什麼 以及其流程中發生了什麼事</p><p>同時 和 UIUX 溝通的時候 也可以較清楚知道 UIUX 設定的流程和軟體設定端這邊的是否一致 真的皆大歡喜啊 (應該吧)</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>wiki: <a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80</a> 文章: <a href="https://dotblogs.com.tw/wasichris/2016/03/17/232341">https://dotblogs.com.tw/wasichris/2016/03/17/232341</a> 畫圖的網站: <a href="https://online.visual-paradigm.com/">https://online.visual-paradigm.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言-什麼是-UML&quot;&gt;&lt;a href=&quot;#前言-什麼是-UML&quot; class=&quot;headerlink&quot; title=&quot;前言: 什麼是 UML&quot;&gt;&lt;/a&gt;前言: 什麼是 UML&lt;/h2&gt;&lt;p&gt;UML &amp;#x3D;&amp;#x3D; ‘Unified Modeling L</summary>
      
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 PHP 安插固定排序 &amp; 隨機排序卡片</title>
    <link href="http://example.com/2020/12/23/php-random-fixed-order/"/>
    <id>http://example.com/2020/12/23/php-random-fixed-order/</id>
    <published>2020-12-23T06:59:22.000Z</published>
    <updated>2024-11-15T10:19:31.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在特定情境下，我們想要把 array 裡的東西同時照特定的方式做排序 其中有幾個是固定的，有幾個是隨機的 比如說我們有 itemA ~ itemF 總共六個 item <img src="/wp-content/uploads/2020/12/image-1608706387454.png" alt="file"></p><p>我們想要把排序第一、第三的給固定下來 同時讓排序第二、第四個從 itemA ~ itemF 給取出但不重複 <img src="/wp-content/uploads/2020/12/image-1608706457093.png" alt="file"></p><p>所以結果可能是這樣 <img src="/wp-content/uploads/2020/12/image-1608706497157.png" alt="file"></p><p>也可能是這樣 <img src="/wp-content/uploads/2020/12/image-1608706505281.png" alt="file"></p><p>那要怎麼做呢? 以下就架構，分兩個部份討論</p><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><h3 id="一、存-db-格式"><a href="#一、存-db-格式" class="headerlink" title="一、存 db 格式"></a>一、存 db 格式</h3><p>為簡化討論 我們假設 itemTable 裡只有三個欄位 分別是 id、name、sort</p><p>在存資料時 我們把要固定欄位的紀錄之 sort 設為正數 (下圖例為 1、3) 而隨機排序的資料 sort 設為 -1 <img src="/wp-content/uploads/2020/12/image-1608776463130.png" alt="file"></p><p>這樣的好處是我們一眼就可以知道 哪些紀錄是要固定欄位、哪些又是要隨機排序的</p><h3 id="二、排序方式"><a href="#二、排序方式" class="headerlink" title="二、排序方式"></a>二、排序方式</h3><p>這邊先理理頭緒 用自然語言寫出接下來要怎麼處理排序 (大概就是 Pseudocode 的概念) 然後再來寫 code 會比較順</p><h4 id="自然語言版"><a href="#自然語言版" class="headerlink" title="自然語言版"></a>自然語言版</h4><ol><li>將隨機排序的 <code>$aryWithoutOrder</code> 資料過濾出來 (sort &#x3D; -1 的資料)</li><li>新增一個新的 <code>$newAry</code> 並把要固定排序的資料放進去</li><li>把 <code>$newAry</code> 裡面沒有資料的位置填滿， 填滿的方式為從 <code>$aryWithoutOrder</code> 隨機取出</li></ol><h4 id="正式寫-code-版"><a href="#正式寫-code-版" class="headerlink" title="正式寫 code 版"></a>正式寫 code 版</h4><pre><code class="php">public static function do_sortItems($items = [])&#123;    // 假設有 5 個 item    // 固定 itemA、itemC 為欄位 1 &amp; 3 (sort 為 1 &amp; 3)    // 其他的隨機排序 (設為 -1)    $items =        [            [                &#39;name&#39; =&gt; &#39;itemA&#39;,                &#39;sort&#39; =&gt; 1,            ],            [                &#39;name&#39; =&gt; &#39;itemB&#39;,                &#39;sort&#39; =&gt; -1,            ],            [                &#39;name&#39; =&gt; &#39;itemC&#39;,                &#39;sort&#39; =&gt; 3,            ],            [                &#39;name&#39; =&gt; &#39;itemD&#39;,                &#39;sort&#39; =&gt; -1,            ],            [                &#39;name&#39; =&gt; &#39;itemE&#39;,                &#39;sort&#39; =&gt; -1,            ]        ];    // 先將隨機排序的 item 取出放到 $aryWithouOrder 裡    $aryWithoutOrder = \__::filter($items, function($n) &#123;       return $n[&#39;sort&#39;] &lt; 0;    &#125;);    $newAry = [];    // 最多取 8 個 item 出來    $maxLength = safeCount($items) &lt; 8 ? safeCount($items) : 8;    // 使用 bottomline 裡的 filter function 來取出已固定 sort 的item    // 並存到 $newAry 裡    for ($i = 0; $i &lt; $maxLength; $i++) &#123;        $newAry[$i] = \__::filter($items, function ($n) use ($i) &#123;           return $n[&#39;sort&#39;] ==  $i + 1 ? $n[&#39;sort&#39;] ==  $i + 1 : [];        &#125;);    &#125;    // 逐一檢查 $newAry ，若 value 為空，則隨機從 $aryWithoutOrder 裡拿一個 item 出來    // 同時將該 item 從 $aryWithoutOrder 裡拿掉    foreach ($newAry as $i =&gt; $j) &#123;        if (empty($j)) &#123;            $randomKey = rand(0, safeCount($aryWithoutOrder) -1);            $newAry[$i] = $aryWithoutOrder[$randomKey];            $newAry[$i][&#39;sort&#39;] = $i+1;            $aryWithoutOrder = array_splice($aryWithoutOrder, $randomKey, 1);        &#125;    &#125;    return $newAry;&#125;</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><ul><li>使用到的 library bottomline: <a href="https://maciejczyzewski.github.io/bottomline/documentation/#filter">https://maciejczyzewski.github.io/bottomline/documentation/#filter</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在特定情境下，我們想要把 array 裡的東西同時照特定的方式做排序 其中有幾個是固定的，有幾個是隨機的 比如說我們有 itemA ~ it</summary>
      
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="PHP / Laravel" scheme="http://example.com/categories/tech-note/PHP-Laravel/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP 排序 usort 範例教學</title>
    <link href="http://example.com/2020/11/24/php-usort-example/"/>
    <id>http://example.com/2020/11/24/php-usort-example/</id>
    <published>2020-11-24T08:23:10.000Z</published>
    <updated>2024-11-15T10:19:31.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近工作上剛好碰到排序的麻煩問題 這邊就寫下來記錄一下 首先會簡介一下各種排序 最後會針對重點 usort 自訂排序做說明教學</p><h2 id="php-官方排序-function"><a href="#php-官方排序-function" class="headerlink" title="php 官方排序 function"></a>php 官方排序 function</h2><h3 id="第一類-用”值-value-”-排序"><a href="#第一類-用”值-value-”-排序" class="headerlink" title="第一類: 用”值 (value)” 排序"></a>第一類: 用”值 (value)” 排序</h3><ol><li>由小到大排序值、且刪除 key &#x3D;&gt; <code>sort</code></li><li>由小到大排序值、且保留 key &#x3D;&gt; <code>asort</code></li><li>由大到小排序值、且刪除 key &#x3D;&gt; <code>rsort</code></li><li>由大到小排序值、且保留 key &#x3D;&gt; <code>arsort</code></li></ol><h3 id="第二類-用”索引-key-”-排序"><a href="#第二類-用”索引-key-”-排序" class="headerlink" title="第二類: 用”索引 (key)” 排序"></a>第二類: 用”索引 (key)” 排序</h3><ol><li>由小到大排key &#x3D;&gt; <code>ksort</code></li><li>由大到小排key &#x3D;&gt; <code>krsort</code></li></ol><h3 id="第三類-自訂排序"><a href="#第三類-自訂排序" class="headerlink" title="第三類: 自訂排序"></a>第三類: 自訂排序</h3><p>加一個前綴 <code>u</code> 在相對應 <code>sort</code> 的前面就好了 以下以 <code>usort</code> 為例</p><h2 id="使用-php-官方的自訂排序"><a href="#使用-php-官方的自訂排序" class="headerlink" title="使用 php 官方的自訂排序"></a>使用 php 官方的自訂排序</h2><p>如上所說 加一個前綴 <code>u</code> 在相對應 <code>sort</code> 的前面就好了 以下就以 <code>usort</code> 為例</p><h3 id="情境一"><a href="#情境一" class="headerlink" title="情境一"></a>情境一</h3><p>假設我們有一個 array 長這樣</p><pre><code class="php">$unsorted = [    [&#39;name&#39;   =&gt; &#39;good&#39;,     &#39;sorter&#39; =&gt; &#39;1&#39;,],    [&#39;name&#39;   =&gt; &#39;bad&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,],    [&#39;name&#39;   =&gt; &#39;normal&#39;,     &#39;sorter&#39; =&gt; &#39;2&#39;,],];</code></pre><p>我們想要照 <code>sorter</code> 由小到大來排的話 就可以用下面的寫法 輸出就是按 sorter 由小到大排 (解釋如註解)</p><pre><code class="php">usort($unsorted, function ($a, $b) &#123;    return $a[&#39;sorter&#39;] &gt; $b[&#39;sorter&#39;];      // 如果 a &gt; b 的話 就會輸出 1，而因為 usort 的 根基是 sort     // 意即是照 value 由小到大排序，所以輸出 1 的就會往後排，進而達到目的&#125;);// output 如下// array(3) &#123;//   [0]=&gt;//   array(2) &#123;//     [&quot;name&quot;]=&gt;//     string(4) &quot;good&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;1&quot;//   &#125;//   [1]=&gt;//   array(2) &#123;//     [&quot;name&quot;]=&gt;//     string(6) &quot;normal&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;2&quot;//   &#125;//   [2]=&gt;//   array(2) &#123;//     [&quot;name&quot;]=&gt;//     string(3) &quot;bad&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;3&quot;//   &#125;// &#125;</code></pre><h3 id="情境二"><a href="#情境二" class="headerlink" title="情境二"></a>情境二</h3><p>一樣的 array 但如果 sorter 有兩個是重複的呢? 比如說這樣:</p><pre><code class="php">$unsorted = [    [&#39;name&#39;   =&gt; &#39;good&#39;,     &#39;sorter&#39; =&gt; &#39;1&#39;,],    [&#39;name&#39;   =&gt; &#39;bad&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,],    [&#39;name&#39;   =&gt; &#39;normal&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,],];</code></pre><p>此時可能就要多一個條件來排了 簡單一點 就多一個 <code>newSorter</code> 吧</p><pre><code class="php">$unsorted = [    [&#39;name&#39;   =&gt; &#39;good&#39;,     &#39;sorter&#39; =&gt; &#39;1&#39;,    &#39;newSorter&#39;=&gt; &#39;2&#39;],    [&#39;name&#39;   =&gt; &#39;bad&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,    &#39;newSorter&#39;=&gt; &#39;3&#39;],    [&#39;name&#39;   =&gt; &#39;normal&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,    &#39;newSorter&#39; =&gt; &#39;1&#39;],    [&#39;name&#39;   =&gt; &#39;hahaha&#39;,     &#39;sorter&#39; =&gt; &#39;2&#39;,     &#39;newSorter&#39; =&gt; &#39;1&#39;],];</code></pre><p>我們想要按 sorter 來排 但如果 sorter 一樣的話 就用 <code>newSorter</code> 由小到大排 因此寫法如下:</p><pre><code class="php">usort($unsorted, function ($a, $b) &#123;    return $a[&#39;sorter&#39;] &gt; $b[&#39;sorter&#39;]  ($a[&#39;sorter&#39;] == $b[&#39;sorter&#39;] &amp;&amp; $a[&#39;newSorter&#39;] &gt; $b[&#39;newSorter&#39;]);&#125;// output 如下// array(4) &#123;//   [0]=&gt;//   array(3) &#123;//     [&quot;name&quot;]=&gt;//     string(4) &quot;good&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;1&quot;//     [&quot;newSorter&quot;]=&gt;//     string(1) &quot;2&quot;//   &#125;//   [1]=&gt;//   array(3) &#123;//     [&quot;name&quot;]=&gt;//     string(6) &quot;hahaha&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;2&quot;//     [&quot;newSorter&quot;]=&gt;//     string(1) &quot;1&quot;//   &#125;//   [2]=&gt;//   array(3) &#123;//     [&quot;name&quot;]=&gt;//     string(6) &quot;normal&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;3&quot;//     [&quot;newSorter&quot;]=&gt;//     string(1) &quot;1&quot;//   &#125;//   [3]=&gt;//   array(3) &#123;//     [&quot;name&quot;]=&gt;//     string(3) &quot;bad&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;3&quot;//     [&quot;newSorter&quot;]=&gt;//     string(1) &quot;3&quot;//   &#125;// &#125;</code></pre><p>也可以寫成下面這樣 基本上可以理解成輸出 1 的話就往後排 (因為 <code>usort</code> 的基底是 <code>sort</code>)</p><pre><code class="php">if ($a[&#39;sorter&#39;] &gt; $b[&#39;sorter&#39;]  ($a[&#39;sorter&#39;] == $b[&#39;sorter&#39;] &amp;&amp; $a[&#39;newSorter&#39;] &gt; $b[&#39;newSorter&#39;])) &#123;    return 1;&#125; elseif ($a[&#39;sorter&#39;] &lt; $b[&#39;sorter&#39;]) &#123;    return -1;&#125; else &#123;    return 0;&#125;</code></pre><p>以上! 網路上找了很久還是找不到完整對 <code>usort</code> 的說明 希望這篇文章對大家有幫助 有問題的話可以再留言喔!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近工作上剛好碰到排序的麻煩問題 這邊就寫下來記錄一下 首先會簡介一下各種排序 最後會針對重點 usort 自訂排序做說明教學&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="技術筆記" scheme="http://example.com/categories/%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/"/>
    
    <category term="tech-note" scheme="http://example.com/categories/tech-note/"/>
    
    <category term="PHP / Laravel" scheme="http://example.com/categories/tech-note/PHP-Laravel/"/>
    
    
  </entry>
  
</feed>
