<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>By Hexo</title>
      <link href="/2024/11/15/By-Hexo/"/>
      <url>/2024/11/15/By-Hexo/</url>
      
        <content type="html"><![CDATA[<p>測試<br><img src="/marketplace_container.png" alt="測測測"><br><img src="/Cat03.jpg" alt="測測測"></p><pre><code class="php">$test = &#39;111&#39;;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/15/hello-world/"/>
      <url>/2024/11/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Firebase Import 備份檔並 Export 成 csv 檔</title>
      <link href="/2024/01/23/%E4%BD%BF%E7%94%A8-firebase-import-%E5%82%99%E4%BB%BD%E6%AA%94%E4%B8%A6-export-%E6%88%90-csv-%E6%AA%94/"/>
      <url>/2024/01/23/%E4%BD%BF%E7%94%A8-firebase-import-%E5%82%99%E4%BB%BD%E6%AA%94%E4%B8%A6-export-%E6%88%90-csv-%E6%AA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="前題"><a href="#前題" class="headerlink" title="前題"></a>前題</h1><p>有人給了一包 firebase export 出來的東西 而我們的目的是把它轉成 MySQO 可以吃的資料</p><h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><ol><li><p>上傳資料到 GCS bucket 內供 firebase import GCS: <a href="https://console.cloud.google.com/storage/browser?authuser=6&project=lucky-antler-412004&prefix=&forceOnBucketsSortingFiltering=true">https://console.cloud.google.com/storage/browser?authuser=6&project=lucky-antler-412004&prefix=&forceOnBucketsSortingFiltering=true</a> 這個要是付費帳戶才行，可以用 300usd 免費額度</p></li><li><p>import 到 firebase 的 firestore 指令: gcloud firestore import gs:&#x2F;&#x2F;my-bucket&#x2F;2017-05-25T23:54:39_76544&#x2F; –database&#x3D;’cymbal’</p><ul><li>注意路徑 (gcloud 指令可能會加東西)、gcs的區域要和 firestore 一樣 圖形化介面 Google Cloud Console 都會失敗 用could shell 就好 <a href="https://cloud.google.com/shell/?authuser=6">https://cloud.google.com/shell/?authuser=6</a></li></ul></li><li><p>export 成 csv 使用 firefoo: <a href="https://stackoverflow.com/questions/74713884/how-export-all-firestore-data-to-excel-of-csv">https://stackoverflow.com/questions/74713884/how-export-all-firestore-data-to-excel-of-csv</a> <a href="https://www.firefoo.app/docs/firestore-export-import/export-csv">https://www.firefoo.app/docs/firestore-export-import/export-csv</a> <img src="https://growingdna.com/wp-content/uploads/2024/01/image-1705972943050.png" alt="file"></p></li></ol><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>官方文件 (中文的翻譯有點怪) 英: <a href="https://cloud.google.com/firestore/docs/manage-data/export-import?authuser=6#gcloud_3">https://cloud.google.com/firestore/docs/manage-data/export-import?authuser=6#gcloud_3</a> 中: <a href="https://firebase.google.com/docs/firestore/manage-data/export-import?hl=zh-tw#google-cloud-console_2">https://firebase.google.com/docs/firestore/manage-data/export-import?hl=zh-tw#google-cloud-console_2</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>實作 二階段驗證/雙重驗證 2FA — 以 Laravel 為例</title>
      <link href="/2023/02/15/two-factor-authentication-laravel/"/>
      <url>/2023/02/15/two-factor-authentication-laravel/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>或許大家已經對 二階段驗證 (<a href="https://en.wikipedia.org/wiki/Multi-factor_authentication">Two-factor authentication</a>) 不陌生</p><p>主要就是為了防止有心人士在獲得你的帳號密碼後，就得以登入並進行犯罪</p><p>二階段驗利用手機、或任何只有你才知道的資訊來進行第二層驗證</p><p>因此提高了安全性</p><p>主要的流程如下</p><h2 id="實例操作流程"><a href="#實例操作流程" class="headerlink" title="實例操作流程"></a><strong><strong>實例操作流程</strong></strong></h2><ol><li>使用者在登入後進入設定頁來設置二階段驗證 (可用工具如 Google Authenticator 、 Authy 等)</li><li>系統將藉工具產生的二階段驗碼當作 key 存入 server</li><li>當使用者要再次登入或進行具機敏性的操作時，須額外輸入二階段驗證工具產生的 code</li><li>系統驗證二階段驗證工具產生 code，在經過編碼後，是否與 server 內的 key 一致</li></ol><h2 id="以-Laravel-實作"><a href="#以-Laravel-實作" class="headerlink" title="以 Laravel 實作"></a>以 Laravel 實作</h2><p>以下將以 Laravel 實作</p><p>並只處理後端的部份，略過前端畫面 render</p><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ul><li>PHP 7.4</li><li>Laravel 8.x LTS</li><li>安裝套件 : <a href="https://github.com/antonioribeiro/google2fa">https://github.com/antonioribeiro/google2fa</a></li></ul><p><code>composer require pragmarx/google2fa</code></p><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><pre><code class="php">&lt;?phpuse Illuminate\Support\Facades\Route;use App\Http\Controllers\TestController;Route::post(&#39;twoFa-create&#39;, [TestController::class, &#39;twoFaCreate&#39;]);Route::post(&#39;twoFa-verify&#39;, [TestController::class, &#39;twoFaVerify&#39;]);</code></pre><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ol><li>使用 <code>Google2FA</code> 物件來產生 key 存入 db，並回傳 url 至前端供 user 以二階段驗證工具綁定</li></ol><pre><code class="php">&lt;?phpnamespace App\Http\Controllers;use Illuminate\Http\Request;use Illuminate\Routing\Controller as BaseController;use PragmaRX\Google2FA\Google2FA;class TestController extendsBaseController    public function twoFaCreate(Request $request)    &#123;        $id = $request-&gt;id;        $google2fa = new Google2FA();        $secret = $google2fa-&gt;generateSecretKey();        // 找到目前登入的 user 並將套件產生的二階段驗證碼存入        $updateDate = [            &#39;google2fa_token&#39; =&gt; $secret        ];        User::query()            -&gt;where(&#39;id&#39;, $id)            -&gt;update($updateDate);              // 使用工具產生 unique 的 url，讓使用者可以用二階段驗證工具掃碼存入        $qrCodeUrl = $google2fa-&gt;getQRCodeUrl(            &#39;testUser&#39;,            &#39;testUser@gmail.com&#39;,            $secret        );        // qrCodeUrl 可以直接用 google 的工具轉成 qrcode ，或給前端自己產。 見註1              return $qrCodeUrl;        // 根據 userId 取出        $secret = &#39;4YI2RPLREM64FKDM&#39;;        $otp = &#39;633672&#39;;        $valid = $google2fa-&gt;verifyKey($secret, $otp);        dd($valid);        return $google2fa-&gt;generateSecretKey();    &#125;&#125;</code></pre><ul><li>註1: 這邊可以使用 google 的<a href="https://developers.google.com/chart/infographics/docs/qr_codes?hl=zh-tw">工具</a>將 url 轉變成圖片 範例如下，掃了之後就可以得到 <code>otpauth://totp/test:test%40gmail.com?secret=4YI2RPLREM64FKDM</code> ，給二階段驗證工具使用</li></ul><p><img src="https://growingdna.com/wp-content/uploads/2023/02/%E6%88%AA%E5%9C%96-2023-02-15-%E4%B8%8B%E5%8D%884.50.16.png"> cht&#x3D;qr chl&#x3D;otpauth:&#x2F;&#x2F;totp&#x2F;test:test%40gmail.com?secret&#x3D;4YI2RPLREM64FKDM choe&#x3D;UTF-8</p><ol start="2"><li>驗證使用者輸入的 code 是否合法</li></ol><pre><code class="php">    public function twoFaVerify(Request $request)        &#123;            $user = User::findById($request-&gt;id);            $otpCode = $request-&gt;otpCode;      $google2fa = new Google2FA();            // 使用 verifyKey 來驗證是否是合法 code            $valid = $google2fa-&gt;verifyKey($secret, $otp);            // 繼續處理你要的東西...    &#125;</code></pre><ol start="3"><li>完成!</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://blog.twjoin.com/%E7%AD%86%E8%A8%98-google2fa-for-laravel-88b1febc2711">https://blog.twjoin.com/筆記-google2fa-for-laravel-88b1febc2711</a></li><li><a href="https://github.com/antonioribeiro/google2fa">https://github.com/antonioribeiro/google2fa</a> -<a href="https://developers.google.com/chart/infographics/docs/qr_codes?hl=zh-tw">https://developers.google.com/chart/infographics/docs/qr_codes?hl&#x3D;zh-tw</a></li></ul><pre><code class="php">public function twoFaVerify(Request $request) &#123;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FTX 帝國崩潰紀錄與檢討</title>
      <link href="/2022/11/19/ftx-collapse/"/>
      <url>/2022/11/19/ftx-collapse/</url>
      
        <content type="html"><![CDATA[<h2 id="寫在前頭"><a href="#寫在前頭" class="headerlink" title="寫在前頭"></a>寫在前頭</h2><p>從結論來說，真的沒有想到全球第二大的交易所 FTX 就在一週左右就這樣倒了 錢拿不出來全卡在裡面、申請破產重組的進度不知道怎樣、各種對 FTX 亂搞公司的爆料、內控各種炸裂 訊息還是不斷在更新，手機一直跳 twitter、各式新聞頻道的推播</p><p>但還是得整理一下心情 重新理理這一切 整理這肯定是投資(投機?)以來最大的挫折</p><h2 id="入幣圈經歷"><a href="#入幣圈經歷" class="headerlink" title="入幣圈經歷"></a>入幣圈經歷</h2><h3 id="2021-5月-不完美的開始"><a href="#2021-5月-不完美的開始" class="headerlink" title="2021. 5月: 不完美的開始"></a>2021. 5月: 不完美的開始</h3><p>仔細想了一下 真正接觸應該是看到 Benson 大那篇 <a href="https://bensonsun.medium.com/%E7%94%A8-300-%E8%90%AC%E6%9C%AC%E9%87%91%E5%89%B5%E9%80%A0%E6%AF%8F%E6%9C%88-6-%E8%90%AC%E7%9A%84%E8%A2%AB%E5%8B%95%E6%94%B6%E5%85%A5-bitfinex-%E5%87%BA%E5%80%9F%E7%BE%8E%E5%85%83%E5%85%A8%E6%94%BB%E7%95%A5%E6%95%99%E5%AD%B8-47634cc54fbf">用 300 萬本金創造每月 6 萬的被動收入</a> (更早有註冊交易所但就放著 暫不列入) 看了一下好像風險滿低，對於小白也滿方便的 於是在 5月時註冊 ACE，並在 6 號時完成 KYC、20號完成出金到 Bitfinex <img src="https://growingdna.com/wp-content/uploads/2022/11/image-1668832780667.26.11.png" alt="file"> 然後…..就沒有然後了 XD 一方面是 Bitfinex 有夠難用 二方面是又懶了起來 結果在註冊 Fuly + ACE + Bitfinex 後就止步於此了</p><h3 id="2021-10-月-FOMO-Dog、Demi-Human-真正啟程"><a href="#2021-10-月-FOMO-Dog、Demi-Human-真正啟程" class="headerlink" title="2021. 10 月: FOMO Dog、Demi-Human 真正啟程"></a>2021. 10 月: FOMO Dog、Demi-Human 真正啟程</h3><p>後來陸續接觸到 Ryan、Raymond 雙 R 的 Podcast 和 YT 發現這個好像滿酷的而且有夠 FOMO 於是 PO 文參加抽獎 (但沒中) <img src="https://growingdna.com/wp-content/uploads/2022/11/image-1668832807020.45.18.png" alt="file"> 10&#x2F;24 開 Mint (手速太慢在調 gas fee 也沒搶到) 發現自己啥都不會的時候發現有個新手社群 Demi-Human 有做推廣給小白的新手系列</p><p>看了看價格不貴，而且那時台灣 NFT 正起飛 就 mint 了幾張 <img src="https://i.imgur.com/uQtXshU.jpg"> 這就這樣開始一知半解開始玩了 NFT、Olympus DAO、Defi、CeFi、放貸…的旅程 一路下來是有賺有賠 但整體下來應該就是差不多在打平的狀態</p><h3 id="2022-5-月-躲過-UST-脫鉤、Luna-歸零、Celcisus-停止出金"><a href="#2022-5-月-躲過-UST-脫鉤、Luna-歸零、Celcisus-停止出金" class="headerlink" title="2022. 5 月: 躲過 UST 脫鉤、Luna 歸零、Celcisus 停止出金"></a>2022. 5 月: 躲過 UST 脫鉤、Luna 歸零、Celcisus 停止出金</h3><p>因著 Anchor protocal 的 20% 高利率、Celcisus 10% 高息 基本上都有放資金在裡面 但因為加入的 <a href="https://www.pressplay.cc/project/8E868E86B993EA8BB077B51AB8B9BD99/about">呢喃貓</a>社群都有提醒要跑 於是都很幸運先出金跑掉了 <img src="https://i.imgur.com/RM1C0Wx.jpg"></p><h2 id="FTX-炸裂-SBF-跌落神壇經過"><a href="#FTX-炸裂-SBF-跌落神壇經過" class="headerlink" title="FTX 炸裂 SBF 跌落神壇經過"></a>FTX 炸裂 SBF 跌落神壇經過</h2><h3 id="2022-11月-FTX-爆雷"><a href="#2022-11月-FTX-爆雷" class="headerlink" title="2022. 11月 FTX 爆雷"></a>2022. 11月 FTX 爆雷</h3><p>沒想到同年 11月初開始 twitter 上開始有各種對 FTX 的質疑 11&#x2F;7(一) 晚上社群內的直播也有說該跑 但看了各界 KOL 的說法，想說應該也沒啥事 只是神仙吵架，我們小人物就也就等著就好 再加上那一陣子正好超忙，晚上只想早點睡 結果沒想到就錯過了脫逃的最佳時機….</p><p>11&#x2F;8(二) 中午後出金就有各種問題 晚上 12點 CZ 發布 “可能” 要全資收購 FTX 想說安心了可以洗洗睡</p><p>11&#x2F;9(三) 一覺醒來 CZ放棄收購、 FTX 資不抵債、FTT 跌到 2塊多 各種梗圖出現 <img src="https://i.imgur.com/jCR6twb.jpg"> Credit: <a href="https://www.instagram.com/cryptotw_meme/">https://www.instagram.com/cryptotw_meme&#x2F;</a></p><p>接著一連串爆炸 FTX 破產清算、巴拿馬帳戶出金、駭客把錢都轉走、SBF 被爆料各種資金挪用&amp;逃亡 這時也正式把手機 FTX PRO、FTX Blockfolio 都刪了 感覺人生一陣涼風吹過 幣圈資產配置最重的部位就這樣沒了</p><p>真的，要重頭開始了</p><h2 id="檢討與學習"><a href="#檢討與學習" class="headerlink" title="檢討與學習"></a>檢討與學習</h2><p>回顧一下事情發生的經過 真的不要不理性，尤其是在幣圈這種高風險的環境 有高度風險意識和行動的話，其實是可以避掉這次的</p><p>所以還是得總結下教訓</p><h3 id="1-沒有什麼是大到不能倒"><a href="#1-沒有什麼是大到不能倒" class="headerlink" title="1. 沒有什麼是大到不能倒"></a>1. 沒有什麼是大到不能倒</h3><p>想當初雷曼兄弟炸裂也是很多人覺得不可能 幣圈的呢? 嗯…更不用說了</p><h3 id="2-不要有信仰，無論是對-KOL、機構甚至所有人"><a href="#2-不要有信仰，無論是對-KOL、機構甚至所有人" class="headerlink" title="2. 不要有信仰，無論是對 KOL、機構甚至所有人"></a>2. 不要有信仰，無論是對 KOL、機構甚至所有人</h3><p>承接上一條教訓 該逃就要逃 KOL、發言人一定都有他們的立場 完全相信可能不一定會有什麼好下場 聽了後還是要回歸到自己身上 一旦自己沒躲掉 其風險可能是完全無法承擔的</p><h3 id="3-不要輕忽小概率事件"><a href="#3-不要輕忽小概率事件" class="headerlink" title="3. 不要輕忽小概率事件"></a>3. 不要輕忽小概率事件</h3><p>就算發生的機率再小 但就像保保險一樣 只要一但發生了就無法承擔的話 那還是規避吧 不要事後了才來後悔</p><h3 id="4-墨菲定律"><a href="#4-墨菲定律" class="headerlink" title="4. 墨菲定律"></a>4. 墨菲定律</h3><p>最近一次其實是 USDT 被 FUD 說擠兌會爆 那時就做了滿多避險，但實際沒用到 這次就抱了點僥倖心態，沒想到……</p><p>真的，不要僥倖 有可能會爆掉，就真的有可能會爆掉 <img src="https://i.imgur.com/iwRBpGo.png"> Credit: <a href="https://www.instagram.com/cryptotw_meme/">https://www.instagram.com/cryptotw_meme&#x2F;</a></p><h2 id="未來"><a href="#未來" class="headerlink" title="未來"></a>未來</h2><p>這次爆雷影響之大，還不知道有多少地方會被波及 冷靜下來後也真的是重新再盤點一下</p><h3 id="1-平衡幣圈資產"><a href="#1-平衡幣圈資產" class="headerlink" title="1. 平衡幣圈資產"></a>1. 平衡幣圈資產</h3><p>之前真的放太多 因為這次也持續出金放多一點到台美股上 可能等幣圈平靜些再入金了</p><h3 id="3-Not-your-keys-not-you-coin"><a href="#3-Not-your-keys-not-you-coin" class="headerlink" title="3. Not your keys, not you coin"></a>3. Not your keys, not you coin</h3><p>該來好好搞搞冷錢包了 手上有兩個都放著要發霉了</p><h3 id="3-努力工作-Work-Fi"><a href="#3-努力工作-Work-Fi" class="headerlink" title="3. 努力工作 Work-Fi"></a>3. 努力工作 Work-Fi</h3><p>重拾許久沒研究的技術領域、部落格(包括這篇) 積極尋找其他機會、加強自己的硬實力 讓虧損在明年補回來! <img src="https://i.imgur.com/DFFTfbo.jpg"></p><p>最後 這大概也是人生有始以來第一次這麼多人主動私訊關心我 看來我韭菜的名聲也是小有名氣 XD</p><p>老實說也是因為這個爆炸才有這麼強的動力去整理投資、工作和生活規劃 感謝有這個機會，讓我有動機重新再出發</p><p>有要取暖的朋友也歡迎留言 之後有什麼好的資訊也會不定期更新</p>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>創世區塊是什麼？</title>
      <link href="/2022/02/21/what-is-genesis-block/"/>
      <url>/2022/02/21/what-is-genesis-block/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>區塊 #0 又被稱為是創世區塊 但要了解創世區塊前，勢必得先了解什麼是區塊鏈 那什麼是區塊鏈呢? 區塊鏈技術可以把它想像成是一個去中心化的帳本 那什麼又是去中心化的帳本呢? 要回答這個問題，首先就得理解</p><ol><li>中心化 vs. 去中心化</li><li>帳本是什麼</li><li>和區塊鏈之間的關係是什麼</li></ol><h2 id="中心化-vs-去中心化"><a href="#中心化-vs-去中心化" class="headerlink" title="中心化 vs. 去中心化"></a>中心化 vs. 去中心化</h2><p>中心化就是我們目前大部份的社會運作方式 舉例來說 A 若要透過銀行轉帳 $NT100 給 B A 就要跟銀行說 “欸我要轉 NT$100 給 B 喔” 此時銀行就會在它的 “中心化帳本” 記下這筆 “A 轉帳 NT$100 給 B”的紀錄 在銀行紀錄下來之後 B 就會在他的銀行紀錄內看到自己的戶多多了 NT$100 塊了 <img src="https://growingdna.com/wp-content/uploads/2022/02/circle-design-electronic-funds-transfer-bank-payment-online-banking-money-bank-account-wire-transfer-png-clipart-400x400.jpeg"></p><p>在這個情境下 因為交易紀錄是記在銀行內 其他人都沒有 任何人想要知道這個交易紀錄的話 都必須要透過銀行來取得 因此，銀行是中心化的 意即所有的資料都記在它那邊 其他人都沒有</p><p>相較之下 去中心化就是將 “A 轉帳 NT$100 給 B” 的這個交易紀錄記在每個人手中的帳本裡 因此所有人都知道所有人的交易紀錄 沒有一個中心化的組織來紀錄交易資料 因此我們說這是 “去中心化”</p><h2 id="帳本"><a href="#帳本" class="headerlink" title="帳本"></a>帳本</h2><p>如同上面所說 帳本其實就是一堆的交易紀錄 就像是上面說的 “A 轉帳 NT$100 給 B” 就是眾多交易紀錄的其中一筆 而這些帳本沒有存在一個中心化的地方 (比如說傳統上的銀行) 而是在每個人手上 (我們會稱之為 “節點”) 所以才說這是去中心化的帳本 <img src="https://growingdna.com/wp-content/uploads/2022/02/examining-bank-statement-604x400.jpeg"></p><h2 id="和區塊鏈之間的關係"><a href="#和區塊鏈之間的關係" class="headerlink" title="和區塊鏈之間的關係"></a>和區塊鏈之間的關係</h2><p>但現在我們知道了區塊鏈是一個去中心化的帳本 具體而言它是長什麼樣子呢 可以看下面這張圖 <img src="https://growingdna.com/wp-content/uploads/2022/02/image-1645432372584.png" alt="file"> 其中的 BLOCK2、BLOCK3、BLOCK4 就是一個個的區塊 每個區塊可以約略區分成 Transactions (交易紀錄)、Time stamp (時間戳)、Hash of previous block (前一區塊的的 hash) 這麼多的區塊是怎麼連起來的呢? 就是用前一個區塊的 hash (hash 可以先把它理解成前一個區塊的部份加密過後的內容即可)連起來 進來變成一條長長的 “鏈” 也因此被稱為是 “區塊鏈”</p><p><img src="https://growingdna.com/wp-content/uploads/2022/02/image-1645432382027.png" alt="file"></p><h1 id="創世區塊是什麼"><a href="#創世區塊是什麼" class="headerlink" title="創世區塊是什麼"></a>創世區塊是什麼</h1><p>講了一堆 終於要回來說什麼是創世區塊了 如前文所述 每個區塊都是用前一個區塊的 hash 連在一起的 那麼第一個區塊呢? 因為它沒有前一個區塊的 hash，同時又是第一個 所以就被我們稱為 “創世區塊” (Genesis Block)</p><p>而如前所說 區塊鏈其實就是紀錄了一堆交易資料的分散式帳本 所以勢必要有至少一筆交易被紀錄才行 因此在實務上 我們只要完成了至少一筆交易交易紀錄 創世區塊就會被建立出來了 接下來所有的區塊都可以回溯到這個創世區塊 由此可見它的重要性啊!</p>]]></content>
      
      
      <categories>
          
          <category> 技術筆記 </category>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用 PHP 實作 Web Service－一次搞懂 XML、SOAP、WSDL (下)</title>
      <link href="/2021/09/02/user-php-soapclient-2/"/>
      <url>/2021/09/02/user-php-soapclient-2/</url>
      
        <content type="html"><![CDATA[<h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><p>有了<a href="https://growingdna.com/user-php-soapclient-1/">上文的名詞解釋</a> 我們總算可以開始來實作了 以下將以 PHP 的 SoapClient 為例 說明怎麼用這個 class 來對 server 端發送 request 做 XML 格式的資料交換</p><h2 id="Contruct"><a href="#Contruct" class="headerlink" title="Contruct"></a>Contruct</h2><p>根據官方說明 (<a href="https://www.php.net/manual/en/soapclient.construct.php">https://www.php.net/manual/en/soapclient.construct.php</a>) <code>SoapClient::__construct</code> 可以是 WSDL 或 non-WSDL mode 的 以下將以 WSDL 為例</p><p>官方裡有提到</p><pre><code>public SoapClient::__construct(?string $wsdl, array $options = [])</code></pre><p>可以到有兩個要素: WSDL 和 options</p><h3 id="WSDL"><a href="#WSDL" class="headerlink" title="WSDL"></a>WSDL</h3><p>就是 WSDL 的位置 可能放在遠端也可能掛在 local 內</p><ul><li><p>若放在遠端</p><ul><li>放遠端的 URL</li><li>例: <a href="https://domain.net/example?WSDL">https://domain.net/example?WSDL</a> (注意這個最後的 <code>?WSDL</code> 很重要 server 端的 url 結尾不是 <code>.wsdl</code> 的話 就得改成這樣 原因不明 我之前就是沒放所以 GG 了)</li></ul></li><li><p>若放在 local</p><ul><li>放你 local 的絕對路徑</li><li>例: &#x2F;your&#x2F;path&#x2F;to&#x2F;file.xml</li></ul></li></ul><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>這個選項就多了 比較重要的應該是 <code>stream_context</code> 和 <code>trace</code> 這邊就可以設定一下 SSL 協定 例:</p><pre><code class="php">$streamContext = [            &quot;ssl&quot; =&gt; [                &quot;verify_peer&quot; =&gt; false,                &quot;verify_peer_name&quot; =&gt; false            ]        ];// 使用 `stream_context_create` 這個 func 來建 streamContext 物件，trace 開起來後有利之後看 log        $client = new SoapClient($url, [&#39;stream_context&#39; =&gt; stream_context_create($streamContext),                                 &#39;trace&#39; =&gt; 1]);        </code></pre><p>註: 如果在發送 SOAP 時也要在 http header 塞一些東西 (比如說 token 之類的) 也要特別寫在 stream_context 裡面</p><p>所以上面的例子可改寫成</p><pre><code class="php">$httpHeader = &#39;token: 123456&#39;;$streamContext = [            &quot;ssl&quot; =&gt; [                &quot;verify_peer&quot; =&gt; false,                &quot;verify_peer_name&quot; =&gt; false            ],            // 把這個塞進來，其他的不變            &#39;http&#39; =&gt; [                &#39;header&#39; =&gt; $httpHeader,             ]        ];$client = new SoapClient($url, [&#39;stream_context&#39; =&gt; stream_context_create($streamContext),                                 &#39;trace&#39; =&gt; 1]);        </code></pre><h2 id="setSoapHeaders"><a href="#setSoapHeaders" class="headerlink" title="setSoapHeaders"></a>setSoapHeaders</h2><p>SOAP 當然也有自己的 header 要處理 所以會使用到這個 func</p><p>例:</p><pre><code class="php">$auth = array(        &#39;UserName&#39;=&gt;&#39;USERNAME&#39;,        &#39;Password&#39;=&gt;&#39;PASSWORD&#39;,        &#39;SystemId&#39;=&gt; array(&#39;_&#39;=&gt;&#39;DATA&#39;,&#39;Param&#39;=&gt;&#39;PARAM&#39;),        );</code></pre><h2 id="呼叫-function"><a href="#呼叫-function" class="headerlink" title="呼叫 function"></a>呼叫 function</h2><p>最後當然就是呼叫 WSDL 裡定義的 func 來 call SOAP 啦 這邊就是根據文件或 WSDL 裡寫的 func 來做呼叫</p><p>所以整段code 的樣貌會變成:</p><pre><code class="php">// 宣告目的 url$url = &#39;https://domain.net/example?WSDL&#39;;// 宣告 httpHeader，並塞到 streamContext 裡$httpHeader = &#39;token: 123456&#39;;$streamContext = [            &quot;ssl&quot; =&gt; [                &quot;verify_peer&quot; =&gt; false,                &quot;verify_peer_name&quot; =&gt; false            ],            // 把這個塞進來，其他的不變            &#39;http&#39; =&gt; [                &#39;header&#39; =&gt; $httpHeader,             ]        ];// 使用上述的資料 new 一個 SoapClient 出來        $client = new SoapClient($url, [&#39;stream_context&#39; =&gt; stream_context_create($streamContext),                                 &#39;trace&#39; =&gt; 1]);   // 在 soapHeader 裡加入需要的資料$auth = array(        &#39;UserName&#39;=&gt;&#39;USERNAME&#39;,        &#39;Password&#39;=&gt;&#39;PASSWORD&#39;,        &#39;SystemId&#39;=&gt; array(&#39;_&#39;=&gt;&#39;DATA&#39;,&#39;Param&#39;=&gt;&#39;PARAM&#39;),        );$header = new SoapHeader(&#39;NAMESPACE&#39;,&#39;Auth&#39;, $auth, false);$client-&gt;__setSoapHeaders($header);// 假設在 body 裡面是被說明這次呼叫的目的$soapBody = [    &#39;action&#39; =&gt; &#39;login&#39;];// 根據文件以及當下的情境，我們要去執行 SOAP 裡面的 login 這個 func$function = &#39;login&#39;;// 執行這個 func 同時使用剛宣告的 soapBody$response = $client-&gt;function($soapBody);</code></pre><p>以上這樣 就完成了一個簡單的 SOAP 呼叫了</p><p>如果有任何問題 歡迎留言詢問 希望這篇文章有幫助到你~!</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="http://yes.nctu.edu.tw/Lecture/NewTech/C05/WebServices/Web%20Services%E4%BB%8B%E7%B4%B9.htm">http://yes.nctu.edu.tw/Lecture/NewTech/C05/WebServices/Web%20Services%E4%BB%8B%E7%B4%B9.htm</a> <a href="https://dotblogs.com.tw/marcus116/2011/08/28/34524">https://dotblogs.com.tw/marcus116/2011/08/28/34524</a> <a href="https://morosedog.gitlab.io/technology-20200226-tech-3/">https://morosedog.gitlab.io/technology-20200226-tech-3/</a> <a href="https://www.w3schools.com/xml/xml_soap.asp">https://www.w3schools.com/xml/xml_soap.asp</a> <a href="https://www.rusnake.com/2016/08/12/php-soapclient-%E9%80%A3%E6%8E%A5-https-%E7%9A%84-webservice/">https://www.rusnake.com/2016/08/12/php-soapclient-%E9%80%A3%E6%8E%A5-https-%E7%9A%84-webservice/</a> <a href="https://www.php.net/manual/en/class.soapclient.php">https://www.php.net/manual/en/class.soapclient.php</a> <a href="https://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1">https://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用 PHP 實作 Web Service－一次搞懂 XML、SOAP、WSDL (上)</title>
      <link href="/2021/08/11/user-php-soapclient-1/"/>
      <url>/2021/08/11/user-php-soapclient-1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近真的串太多 XML 的 api 了 覺得太多眉眉角角要注意 又有滿多詭異的部份 所以這邊記下來 供有需要的朋友參考參考!</p><h1 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h1><h2 id="Web-Services-Web-服務"><a href="#Web-Services-Web-服務" class="headerlink" title="Web Services (Web 服務)"></a>Web Services (Web 服務)</h2><h3 id="是一種跨程式語言和跨作業系統平臺的遠端呼叫技術"><a href="#是一種跨程式語言和跨作業系統平臺的遠端呼叫技術" class="headerlink" title="是一種跨程式語言和跨作業系統平臺的遠端呼叫技術"></a>是一種跨程式語言和跨作業系統平臺的遠端呼叫技術</h3><pre><code>- 跨程式語言    - 也就是 server 端無論用什麼程式語言寫的， client 端都可以用其他語言寫- 跨操作平臺：    - server 端程式和 client 端程式可以在不同的作業系統上執行- 遠端呼叫技術:     - 機器 A 上的一個程式可以呼叫到另外機器 B 上的一個物件的方法    - 例: Youtube 把斗內的金額狀態以 Web Service 的方式暴露在外，讓 client 端可以呼叫並應用         比如說做一個斗內的進度條出來 (https://www.youtube.com/watch?v=xdySMoDZq-E)</code></pre><h3 id="三大平台技術"><a href="#三大平台技術" class="headerlink" title="三大平台技術"></a>三大平台技術</h3><pre><code>- XML XSD- SOAP- WSDL</code></pre><p>分成以下三個部份詳述</p><h2 id="XML-XSD"><a href="#XML-XSD" class="headerlink" title="XML XSD"></a>XML XSD</h2><p>Web Service採用HTTP協議傳輸資料 並採用XML格式封裝資料 (即XML中說明呼叫遠端服務物件的哪個方法，傳遞的引數是什麼，以及服務物件的返回結果是什麼)</p><h3 id="XML-Extensible-Markup-Language，可延伸標記式語言"><a href="#XML-Extensible-Markup-Language，可延伸標記式語言" class="headerlink" title="XML (Extensible Markup Language，可延伸標記式語言)"></a>XML (Extensible Markup Language，可延伸標記式語言)</h3><pre><code>- Web Service平臺中表示資料的格式。易於建立和易於分析- 例:</code></pre><p>example.xml</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;note&gt;&lt;to&gt;George&lt;/to&gt;&lt;from&gt;MoroseDog&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don&#39;t forget the meeting!&lt;/body&gt;&lt;/note&gt;</code></pre><h3 id="XSD-XML-Schema-Definition"><a href="#XSD-XML-Schema-Definition" class="headerlink" title="XSD (XML Schema Definition)"></a>XSD (XML Schema Definition)</h3><pre><code>- 指出如何形式描述XML文件的元素，定義了一套標準的資料型別，並給出了一種語言來擴充套件這套資料型別- 例:</code></pre><p>example.xsd (XML Schema文件，它定義了上面那個XML文件的元素。)</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;xs:schema xmlns:xs=&quot;http://morosedog.gitlab.io/2020/XMLSchema&quot;targetNamespace=&quot;http://morosedog.gitlab.io&quot;xmlns=&quot;http://morosedog.gitlab.io&quot;elementFormDefault=&quot;qualified&quot;&gt;&lt;xs:element name=&quot;note&quot;&gt;    &lt;xs:complexType&gt;      &lt;xs:sequence&gt;    &lt;xs:element name=&quot;to&quot; type=&quot;xs:string&quot;/&gt;    &lt;xs:element name=&quot;from&quot; type=&quot;xs:string&quot;/&gt;    &lt;xs:element name=&quot;heading&quot; type=&quot;xs:string&quot;/&gt;    &lt;xs:element name=&quot;body&quot; type=&quot;xs:string&quot;/&gt;      &lt;/xs:sequence&gt;    &lt;/xs:complexType&gt;&lt;/xs:element&gt;&lt;/xs:schema&gt;</code></pre><p>註: 工具可能已經自動完成了這個轉換，但我們或會根據需求修改一下轉換過程</p><h2 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h2><p>Web Service通過 HTTP 協議傳送請求和接收結果時 傳送的請求內容和結果內容都採用XML格式封裝 並增加了一些特定的HTTP header 以說明 HTTP 訊息的內容格式 這些特定的 HTTP header 和 XML 內容格式就是 SOAP 協議</p><blockquote><p>SOAP協議 &#x3D; HTTP協議 + XML資料格式</p></blockquote><p>例:</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;soap:Envelopexmlns:soap=&quot;http://morosedog.gitlab.io/2001/12/soap-envelope&quot;soap:encodingStyle=&quot;http://morosedog.gitlab.io/2001/12/soap-encoding&quot;&gt;&lt;soap:Header&gt;  ...  ...&lt;/soap:Header&gt;&lt;soap:Body&gt;  ...  ...  &lt;soap:Fault&gt;    ...    ...  &lt;/soap:Fault&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</code></pre><h2 id="WSDL-Web-Services-Description-Language"><a href="#WSDL-Web-Services-Description-Language" class="headerlink" title="WSDL (Web Services Description Language)"></a>WSDL (Web Services Description Language)</h2><p>Web Service 的 client 端要向 server 端呼叫一個Web Service服務時 首先要有知道這個服務的地址在哪 以及這個服務裡有什麼方法可以呼叫 所以Web Service servier端首先要通過一個 WSDL 檔案來說明上述資訊</p><p>WSDL 就是這樣一個基於XML的語言 它是Web Service客戶端和伺服器端都能理解的標準格式 用於描述Web Service及其函式、引數和返回值</p><p>例:</p><pre><code class="xml">&lt;message name=&quot;getTermRequest&quot;&gt;  &lt;part name=&quot;term&quot; type=&quot;xs:string&quot;/&gt;&lt;/message&gt;&lt;message name=&quot;getTermResponse&quot;&gt;  &lt;part name=&quot;value&quot; type=&quot;xs:string&quot;/&gt;&lt;/message&gt;&lt;portType name=&quot;glossaryTerms&quot;&gt;  &lt;operation name=&quot;getTerm&quot;&gt;    &lt;input message=&quot;getTermRequest&quot;/&gt;    &lt;output message=&quot;getTermResponse&quot;/&gt;  &lt;/operation&gt;&lt;/portType&gt;</code></pre><p>寫到這邊 架構大概會長成這樣 (可先忽略 UDDI 的部份) <img src="https://growingdna.com/wp-content/uploads/2021/09/image-1630575966283.51.09.png"></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[反脆弱]讀後心得</title>
      <link href="/2021/07/11/antifragile-note/"/>
      <url>/2021/07/11/antifragile-note/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是反脆弱"><a href="#什麼是反脆弱" class="headerlink" title="什麼是反脆弱?"></a>什麼是反脆弱?</h2><ul><li>脆弱: 遇到危機就GG</li><li>強固: 遇到危機就休止成長</li><li>反脆弱: 脆弱的相反，遇到危難時反而變更強，取得更大利益</li><li>脆弱喜歡安穩，反脆弱從混亂中成長，強固則不那麼在意外在的環境</li><li>e.g., 同樣是失言: 企業高管: 馬上GG 廣場粗工: 沒差 網紅館長: 講了反而會有討論度 (類比: 一些過氣的藝人會搞些緋聞)</li></ul><h2 id="凸性與凹性"><a href="#凸性與凹性" class="headerlink" title="凸性與凹性"></a>凸性與凹性</h2><p><img src="https://growingdna.com/wp-content/uploads/2021/08/image-1628670252608.23.32.png" alt="file"></p><ul><li>凸性: 風險規模越大，得到的利益越大</li><li>凹性: 風險規模越大，受到的損失越大</li></ul><h2 id="成就反脆弱的策略"><a href="#成就反脆弱的策略" class="headerlink" title="成就反脆弱的策略"></a>成就反脆弱的策略</h2><ul><li>槓鈴策略：採取兩邊的極端，避免中間的普通區 → 一邊採取極端高風險，一邊採取極端底風險<ul><li>e.g.,<br>投資: 90%現金，10%高風險證券; 工作: 一份無聊穩定的公務員+高風險的作家 塔雷伯: 專業文章+通俗文章</li></ul></li><li>在系統內注入脆弱性，得到反脆弱<ul><li>e.g., 一個公司如果持續淘汰不好的業務，就能讓整個公司更具反脆弱性 一個有讀書習慣的人，在固定讀的書外要加入一些平常不會讀的東西</li></ul></li><li>取得選擇權<ul><li>選擇權是反脆弱性的代理人 → 選擇權具備不對稱性</li><li>e.g., 投資: 期貨選擇權 工作: 取得其他工作的選擇權 or 做副業</li></ul></li><li>創造對於風險的凸性<ul><li>面對疫病的風險? → 買醫療保險</li><li>面對 AI 的取代性? → 買 AI 股票</li></ul></li><li>增加強固性<ul><li>本書並沒有否認強固性，因為很多東西其實是沒辦法反脆弱的，比如說建築物就沒辦法在地震越大時反而越強</li><li>作法:<ul><li>減法知識反則: 確認什麼是錯的比確認什麼是對的更簡單 e.g.,確認生活中哪些人是不能信任的</li><li>尊重經驗法則: 經歷百年或千年的傳統，比新觀念更有強固性</li></ul></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>增加強固性與增加反脆弱性並行</li><li>決策思考<ul><li>上檔利益很小，下檔損失很大 → 不做</li><li>上檔利益很大，下檔損失很小 → 做</li></ul></li><li>反脆弱不是所有事情的解答</li></ul><h2 id="來源"><a href="#來源" class="headerlink" title="來源"></a>來源</h2><p><a href="https://www.youtube.com/watch?v=uFOWTcWY0bY">https://www.youtube.com/watch?v=uFOWTcWY0bY</a></p>]]></content>
      
      
      <categories>
          
          <category> 興趣陳列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python 批次新增/修改 SQL</title>
      <link href="/2021/06/24/use-python-batch-update-sql/"/>
      <url>/2021/06/24/use-python-batch-update-sql/</url>
      
        <content type="html"><![CDATA[<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>假設現在我們有一個情境要生成 500 個 SQL</p><pre><code class="sql">UPDATE `tableA` INNER JOIN `tableB` ON `tableA`.`foreign_id` = `tableB`.`id` SET `setting_value`  = &quot;number:111&quot; WHERE `tableB`.`test_name` = &quot;testABC&quot;;</code></pre><p>其中 裡面的變數 <code>111</code> 和 <code>testABC</code> 然後我們有一個 excel 的 mapping table 長的像這樣 <img src="https://growingdna.com/wp-content/uploads/2021/06/%E6%88%AA%E5%9C%96-2021-06-24-%E4%B8%8B%E5%8D%886.48.10.png"> 裡面就記載了這 500 句 sql 組成的邏輯 現在是還簡單 基本上是一對一的關係 也就是: <code>111</code> 會對應到 <code>testABC</code> <code>222</code> 會對應到 <code>testwjfaw</code> 原則上還是可以用 excel 內建的公式來建</p><p>但如果複雜一點 比如說根據條件 A ，來決定 <code>111</code> 要對應到的是 <code>testABC</code> 還是 <code>testwjfaw</code> 這樣就會有點複雜 雖然應該還是可以用 excel 的公司來寫 但就會有點麻煩</p><p>以下我們就來看看要怎麼用 python 完成吧!</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><p>[step]1[&#x2F;step] 首先將 excel 輸出成 <code>csv</code> 檔 當作是 python 要引入的資料源</p><p>[step]2[&#x2F;step] 新增 createSQL.py 檔 並在裡面把我們要批次更新的 sql 寫成類變數的型式</p><pre><code class="python">temp_sql = &#39;UPDATE `tableA`  INNER JOIN `tableB` ON `tableA`.`foreign_id` = `tableB`.`id` SET `setting_value`  = &quot;&#123;setting_value&#125;&quot; WHERE `tableB`.`test_name` = &quot;&#123;test_name&#125;&quot;;&#39;</code></pre><p>[step]3[&#x2F;step] 引入剛剛下載下來的 <code>csv</code> 檔並使用 <code>replace</code> function 來替換掉要改的變數</p><pre><code class="python">with open(&#39;/your-path-to-file/testFile.csv&#39;) as csvfile:  # 打開 csv    rows = csv.reader(csvfile, ) # 將 csv 內容一行一行存到 rows    next(rows);    for row in rows: # 一列一列更新        print (temp_sql.replace(&#39;&#123;setting_value&#125;&#39;,&#39;&#123;number&#39; + row[2] + &#39;&#125;&#39;).replace(&#39;&#123;prod_level2_oid&#125;&#39;,row[3])) # row[2]代表第二欄 、row[3]代表第三欄</code></pre><p>[step]4[&#x2F;step] 執行 python 直接在 command line 裡 <code>python ./createSQL</code> 就可以把 sql 都 print 出來了!</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>最後附上 github 連結: <a href="https://github.com/BenmrChen/createSQL.py/blob/main/createSQL.py">https://github.com/BenmrChen/createSQL.py/blob/main/createSQL.py</a> 有問題的歡迎大大們留言討論 謝謝!</p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[為什麼要睡覺？：睡出健康與學習力、夢出創意的新科學] 閱讀心得</title>
      <link href="/2021/05/10/why-we-sleep/"/>
      <url>/2021/05/10/why-we-sleep/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>衝著比爾蓋茲和癌大推薦 終於把這本書啃完 裡面內容真的太豐富，從實驗設計、數據統計到理論推導都相當嚴謹 以下節錄重點</p><h2 id="重點節錄"><a href="#重點節錄" class="headerlink" title="重點節錄"></a>重點節錄</h2><h3 id="掌握人睡眠的兩大趨力"><a href="#掌握人睡眠的兩大趨力" class="headerlink" title="掌握人睡眠的兩大趨力:"></a>掌握人睡眠的兩大趨力:</h3><ol><li><p>近日節奏: 人的一天”大約”為24小時的規律</p><ul><li>實際上比24小時多一點，所以叫近日</li><li>有個體差異，所以有晨型人、夜型人、介於兩者間的人</li><li>基因決定，為適應採集生活中須要防備外敵需求，但在工業社會後對夜型人相當不公平</li><li>實作方式: 分泌褪黑激素</li></ul></li><li><p>睡眠壓力</p><ul><li>腺苷: 濃度越高，人越想睡</li><li>咖啡因會和腺苷的受體結合，使人不想睡。這兩種趨力互相獨立 所以人可以熬夜卻不想睡 (腺苷高，但近日節奏走過低谷)</li></ul></li></ol><h3 id="判斷是否睡的足夠"><a href="#判斷是否睡的足夠" class="headerlink" title="判斷是否睡的足夠:"></a>判斷是否睡的足夠:</h3><ol><li>起床後，10、11點是否會回頭睡</li><li>中午前是否可以在沒有咖啡因的狀況下理想運作，若不行 則可能是腺苷一直累積 變長期慢性病</li><li>不設鬧會，是否會睡過頭</li><li>發現自己坐在電腦前，會重讀甚至再三讀</li></ol><h3 id="睡眠分類及其用途"><a href="#睡眠分類及其用途" class="headerlink" title="睡眠分類及其用途:"></a>睡眠分類及其用途:</h3><ol><li>簡單分睡眠成”非快速動眼期”、”快速動眼期”</li><li>前者用來鞏固記憶，讓短期記憶變長期(就算是中午的小睡也有用)</li><li>後者用來將記憶連結在一起，進而產生智慧、創意。e.g.,白天想不到的 idea，在睡眠時大腦幫你工作，進而連結出解法</li></ol><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ol><li>睡覺很重要，無論是非快速動眼期還是快速動眼期，前者鞏固記憶，後者連結記憶</li><li>我要睡去了 掰掰!</li></ol><h2 id="書本連結"><a href="#書本連結" class="headerlink" title="書本連結"></a>書本連結</h2><p><a href="https://growingdna.com/book-why-we-sleep" title="why-we-sleep"><img src="https://growingdna.com/wp-content/uploads/2021/05/getImage.jpeg" alt="why-we-sleep" title="why-we-sleep"></a> <a href="https://growingdna.com/why-we-sleep">https://growingdna.com/why-we-sleep</a></p>]]></content>
      
      
      <categories>
          
          <category> 興趣陳列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[編譯 vs. 直譯] / [靜態 vs. 動態] / [強型別 vs. 弱型別]</title>
      <link href="/2021/04/15/language-type-compiler/"/>
      <url>/2021/04/15/language-type-compiler/</url>
      
        <content type="html"><![CDATA[<h1 id="編譯-vs-直譯-靜態-vs-動態-強型別-vs-弱型別"><a href="#編譯-vs-直譯-靜態-vs-動態-強型別-vs-弱型別" class="headerlink" title="[編譯 vs. 直譯] &#x2F; [靜態 vs. 動態] &#x2F; [強型別 vs. 弱型別]"></a>[編譯 vs. 直譯] &#x2F; [靜態 vs. 動態] &#x2F; [強型別 vs. 弱型別]</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近因為 <code>[編譯 vs. 直譯] / [靜態 vs. 動態] / [強型別 vs. 弱型別]</code> 有各種理解上的困難 索性寫一篇文章下來當作筆記 提醒自己的同時也希望對讀者有幫助!</p><h2 id="編譯-vs-直譯"><a href="#編譯-vs-直譯" class="headerlink" title="編譯 vs. 直譯"></a>編譯 vs. 直譯</h2><p>首先我們要理解到 為了讓我們人類寫的程式碼能讓機器讀懂 中間就一定會有一個轉譯的過程 透過這個過程 將我們人看的懂的語言轉換成機器看的懂的語言 也就是 0 和 1 圖解如下: <img src="https://growingdna.com/wp-content/uploads/2021/04/image-1618480532828.png" alt="file"> 而這個轉換的的方式則分成兩種 → <code>編譯</code> 與 <code>直譯</code> 對應到的工具就是 <code>編譯器</code> 與 <code>直譯器</code> 差別如下:</p><h3 id="編譯器"><a href="#編譯器" class="headerlink" title="編譯器:"></a>編譯器:</h3><p>一次性把所有的程式碼轉成機器看的懂的 0 和 1 他的文件就是在Windows裏叫的.exe檔 或者Unix中的可執行檔</p><h4 id="優點"><a href="#優點" class="headerlink" title="優點:"></a>優點:</h4><ul><li>執行速度快 (因為已經編譯好了)</li><li>程式有問題時在編譯時就能即時發現報錯 (而非執行時) 減少執行時的風險</li></ul><h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點:"></a>缺點:</h4><ul><li>開發較慢 → 開發時也不能開發一段就執行一次，而是須要等到編譯完後才能執行</li></ul><h4 id="特色"><a href="#特色" class="headerlink" title="特色:"></a>特色:</h4><ul><li>使用編譯器的編譯語言多數是靜態語言。他們會事先定義變數類別和做類別檢查等等。</li><li>常見語言: C++、C、Rust、Go、Visual Basic、Swift、Obj-C</li><li>編譯語言的可執行檔是可以獨立運行的 比如說 C++ 雖然只能在新電腦中編譯，但他的可執行檔甚至連不支援C++的電腦，都可以運行</li></ul><h3 id="直譯器"><a href="#直譯器" class="headerlink" title="直譯器:"></a>直譯器:</h3><p>一列一列轉換並執行</p><h4 id="優點-1"><a href="#優點-1" class="headerlink" title="優點:"></a>優點:</h4><ul><li>可以用交談式的方法寫程式</li><li>可以開發一小段程式碼就執行一次，加快開發時程</li></ul><h4 id="缺點-1"><a href="#缺點-1" class="headerlink" title="缺點:"></a>缺點:</h4><ul><li>執行速度較慢 而且沒辦法一次編譯完然後重複執行</li></ul><h4 id="特色-1"><a href="#特色-1" class="headerlink" title="特色"></a>特色</h4><ul><li>常見語言: Javascript 、Python、Shellscript、PHP</li><li>直譯語言需要有一個適合的執行環境&#x2F;或者說是一個VM，才可以執行 例如 Python3 程式碼便需要有在有安裝 Python3 的電腦中才可以運行</li></ul><h2 id="靜態-vs-動態"><a href="#靜態-vs-動態" class="headerlink" title="靜態 vs. 動態"></a>靜態 vs. 動態</h2><h3 id="定義："><a href="#定義：" class="headerlink" title="定義："></a>定義：</h3><p>變數和型別的綁定方法 白話來說，可以理解成變數在宣告的時候是否綁定型別</p><h3 id="靜態語言-Statically-Typed-Languages-："><a href="#靜態語言-Statically-Typed-Languages-：" class="headerlink" title="靜態語言(Statically Typed Languages)："></a>靜態語言(Statically Typed Languages)：</h3><ul><li>程式撰寫時必須使用明確的型別宣告。</li><li>型別一旦宣告後，在執行時期時無法任意更換型別，否則會發生錯誤。</li><li>編譯時期 (Compile Time)確認與檢查型別，一旦有變數誤用或資料型態上的 Bug，在編譯時期就能發現，降低執行時期的風險。</li></ul><h4 id="java-例"><a href="#java-例" class="headerlink" title="java 例"></a>java 例</h4><pre><code class="java">int x;x = &quot;Hello&quot;;</code></pre><p>這樣子就會出錯 因為型別宣告為整數 卻塞了個非整數的值 於是會報錯如下</p><pre><code>HelloWorld.java:5: error: incompatible types: String cannot be converted to int</code></pre><h3 id="動態語言-Dynamically-Typed-Languages-："><a href="#動態語言-Dynamically-Typed-Languages-：" class="headerlink" title="動態語言(Dynamically Typed Languages)："></a>動態語言(Dynamically Typed Languages)：</h3><ul><li>程式撰寫時不用明確的型別宣告</li><li>執行時，變數能任意更換型別</li><li>與靜態語言相反，是在執行時期(Runtime)確認與檢查型別</li></ul><h4 id="PHP-例"><a href="#PHP-例" class="headerlink" title="PHP 例"></a>PHP 例</h4><pre><code class="php">$a = 123;echo $a;  // print: 123$a = &quot;Hello&quot;;echo $a;  // print: Hello</code></pre><p>與 Java 不同 變數 a 的型別怎麼變都沒關係</p><h2 id="弱型別-vs-強型別："><a href="#弱型別-vs-強型別：" class="headerlink" title="弱型別 vs. 強型別："></a>弱型別 vs. 強型別：</h2><h3 id="定義"><a href="#定義" class="headerlink" title="定義:"></a>定義:</h3><p>語言型別系統(Type System)對型別檢查的嚴格程度，也就是型別安全的程度。 簡單來說，就是編譯器或直譯器對型別檢查的寬容程度 更淺白地形容：允許編譯器或直譯器自作主張的程度 強型別語言偏向說一是一、說二是二，你沒有在程式語法上明確指示就是沒這件事，發現不是正常寫法，直接停下來告訴你發生錯誤 弱型別語言就不同了，發現不是正常寫法，會試圖去做一些自動轉型，讓這段程式繼續運作下去</p><h3 id="強型別-strongly-typed-：偏向不容許隱性型別轉換，型別檢查上較為嚴格。"><a href="#強型別-strongly-typed-：偏向不容許隱性型別轉換，型別檢查上較為嚴格。" class="headerlink" title="強型別(strongly typed)：偏向不容許隱性型別轉換，型別檢查上較為嚴格。"></a>強型別(strongly typed)：偏向不容許隱性型別轉換，型別檢查上較為嚴格。</h3><p>以 Java 為例</p><pre><code class="java">var string = &quot;3&quot;;var number = 2 + string;</code></pre><p>這樣就會出錯 而在弱型別的JavaSctipt中就會顯示23，它幫我們把2轉為字串了</p><h3 id="弱型別-weakly-typed-：偏向容許隱性型別轉換，型別檢查上較為寬鬆。"><a href="#弱型別-weakly-typed-：偏向容許隱性型別轉換，型別檢查上較為寬鬆。" class="headerlink" title="弱型別(weakly typed)：偏向容許隱性型別轉換，型別檢查上較為寬鬆。"></a>弱型別(weakly typed)：偏向容許隱性型別轉換，型別檢查上較為寬鬆。</h3><p>以 Java 為例</p><pre><code class="java">var string = &quot;3&quot;;var number = 2 + string;</code></pre><p>這樣就會出錯 而在弱型別的JavaSctipt中就會顯示23，它幫我們把2轉為字串了</p><h2 id="靜態-vs-動態-強型別-vs-弱型別"><a href="#靜態-vs-動態-強型別-vs-弱型別" class="headerlink" title="[靜態 vs. 動態] + [強型別 vs. 弱型別]"></a>[靜態 vs. 動態] + [強型別 vs. 弱型別]</h2><p>討論到現在 我們終於可以把這兩個象限、四種類型給排列組合起來如下了: <img src="https://growingdna.com/wp-content/uploads/2021/04/image-1618480832299.png" alt="file"> (source: <a href="https://ithelp.ithome.com.tw/articles/10202260">https://ithelp.ithome.com.tw/articles/10202260</a>) <img src="https://growingdna.com/wp-content/uploads/2021/04/image-1618480553452.png" alt="file"> (source: <a href="https://millenniummeetonce.blogspot.com/2018/04/blog-post_5.html">https://millenniummeetonce.blogspot.com/2018/04/blog-post_5.html</a>)</p><p>是否看到了一堆沒看過的語言呢xd 沒關係 就只是一張圖 這篇文章可以讓各位知道 自己常用的語言是靜態的還是動態的、強型別還是弱型別、編譯語言還是直譯語言囉!</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://millenniummeetonce.blogspot.com/2018/04/blog-post_5.html">https://millenniummeetonce.blogspot.com/2018/04/blog-post_5.html</a> <a href="https://www.zhihu.com/question/19918532">https://www.zhihu.com/question/19918532</a> <a href="https://ithelp.ithome.com.tw/articles/10214510">https://ithelp.ithome.com.tw/articles/10214510</a> <a href="https://ithelp.ithome.com.tw/articles/10201839">https://ithelp.ithome.com.tw/articles/10201839</a> <a href="https://ithelp.ithome.com.tw/articles/10202260">https://ithelp.ithome.com.tw/articles/10202260</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[蠟筆小新：風起雲湧 猛烈！大人帝國的反擊] 心得</title>
      <link href="/2021/04/01/crayon/"/>
      <url>/2021/04/01/crayon/</url>
      
        <content type="html"><![CDATA[<h1 id="蠟筆小新：風起雲湧-猛烈！大人帝國的反擊-心得"><a href="#蠟筆小新：風起雲湧-猛烈！大人帝國的反擊-心得" class="headerlink" title="[蠟筆小新：風起雲湧 猛烈！大人帝國的反擊] 心得"></a>[蠟筆小新：風起雲湧 猛烈！大人帝國的反擊] 心得</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這部真的超神! 完全呈現當下日本人對21世紀的各種不滿 以及對過往事物的留戀 雖然是20年前的電影了 放在現在看卻反而更加真實 簡單列幾點印象深刻的點下來</p><h2 id="重點節錄"><a href="#重點節錄" class="headerlink" title="重點節錄"></a>重點節錄</h2><p>以下分成 <code>配樂</code>、<code>情感描寫</code>、<code>運鏡</code>、<code>價值觀</code>來切入討論</p><h3 id="配樂：-一如往常地優秀，該熱血時該熱血，該溫情時該溫情"><a href="#配樂：-一如往常地優秀，該熱血時該熱血，該溫情時該溫情" class="headerlink" title="配樂： 一如往常地優秀，該熱血時該熱血，該溫情時該溫情"></a>配樂： 一如往常地優秀，該熱血時該熱血，該溫情時該溫情</h3><p>每個轉折都做的超級優秀 有一度會被音樂拉走的感覺xd 廣志回憶過往那個3分鐘經典真太加分 (<a href="https://www.youtube.com/watch?v=l-kIeMNBDfE">https://www.youtube.com/watch?v=l-kIeMNBDfE</a>) 最後一 cut 小新不斷往上跑也是透過樂器不斷堆疊 加上小新激情演出 才跑出最後大高潮啊</p><h3 id="情感描寫：片中沒有絕對的反派，就算是看起來像反派的阿建還是不斷給小新一家機會打壞他的計劃"><a href="#情感描寫：片中沒有絕對的反派，就算是看起來像反派的阿建還是不斷給小新一家機會打壞他的計劃" class="headerlink" title="情感描寫：片中沒有絕對的反派，就算是看起來像反派的阿建還是不斷給小新一家機會打壞他的計劃"></a>情感描寫：片中沒有絕對的反派，就算是看起來像反派的阿建還是不斷給小新一家機會打壞他的計劃</h3><p>似乎是刻意在跟他們說 “用行動來證明你的想法吧!” 默默期待他們能用自己的能力來打破自己又厭惡21世紀 又不確定是否可以一直活在20世紀的矛盾 將自己從這種複雜的情感中拯救出來</p><h3 id="運鏡："><a href="#運鏡：" class="headerlink" title="運鏡："></a>運鏡：</h3><p>特別喜歡電影最後，小新飛奔爬高塔的片段 有點像是雲黑齋的野心 使用對焦在主角正前方的鏡頭 透過不斷攀爬旋轉向上的高塔爬升感 來帶出來時間、尤其像是21世紀的巨輪是飛速前進的  而小新本人就是憑著想要和家人團聚的本心並付諸實踐、跌跌撞撞並不斷向上衝 才得以爬到頂樓 並透過攝影機來點醒眾人 沉浸於過往是無益的 直面未來才是正道</p><h3 id="另一種價值觀：對於沉浸過往氛圍的阿健等人，導演也沒有讓他們變-BOSS-被打倒就結束"><a href="#另一種價值觀：對於沉浸過往氛圍的阿健等人，導演也沒有讓他們變-BOSS-被打倒就結束" class="headerlink" title="另一種價值觀：對於沉浸過往氛圍的阿健等人，導演也沒有讓他們變 BOSS 被打倒就結束"></a>另一種價值觀：對於沉浸過往氛圍的阿健等人，導演也沒有讓他們變 BOSS 被打倒就結束</h3><p>反而是提供另一個出路讓他們去追尋 基本上就是不要否定另一種生存的價值 肯定並活在自己相信的事物也是很好的啊</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>就是真的太神了 五星吹捧 必看的小新動畫!</p>]]></content>
      
      
      <categories>
          
          <category> 興趣陳列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL：使用臨時表一次性大量UPDATE</title>
      <link href="/2021/03/17/mysql-use-temp-table-to-update/"/>
      <url>/2021/03/17/mysql-use-temp-table-to-update/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到須要更新一堆 DB 欄位的需求 實作後發現不同的寫法對效能的影響滿大的 這就來紀錄分享一下</p><h2 id="問題情境"><a href="#問題情境" class="headerlink" title="問題情境"></a>問題情境</h2><p>假設我們有2張表 分別是 <code>order</code>、<code>orderDetail</code> 其中 <code>order</code> 是訂單的總表 而 <code>orderDetail</code> 則是訂單的細節 兩者關係以下圖示之</p><p><code>order</code> <img src="https://growingdna.com/wp-content/uploads/2021/03/image-1615950078806.png" alt="file"></p><p><code>orderDetail</code> <img src="https://growingdna.com/wp-content/uploads/2021/03/image-1615950090367.png" alt="file"></p><h3 id="原始-table"><a href="#原始-table" class="headerlink" title="原始 table"></a>原始 table</h3><p>在 <code>order</code>裡的第一筆 (id&#x3D;1) 就叫他 apple 訂單吧! 對應到 <code>orderDetail</code> 可以發現 apple 訂單裡面有兩個 item 分別是 雞排 和腿排 (兩者的 fk 為 fk_orderID &#x3D; 1)</p><p>但為了閱讀方便 我們想要在 <code>order</code> 裡多新增一個 <code>items</code> 欄位 把這張訂單裡保括了了哪些品項給列出來 並用逗號隔開</p><p>成果如下</p><h3 id="修改後-table"><a href="#修改後-table" class="headerlink" title="修改後 table"></a>修改後 table</h3><p><img src="https://growingdna.com/wp-content/uploads/2021/03/image-1615950183239.png" alt="file"></p><p>可以發現每個訂單都有詳細的品項在裡面、並用逗號分開 如 apple 訂單 就有雞排、腿排在列 接下來我們就來看看 SQL 要怎麼寫吧!</p><h2 id="SQL-實作"><a href="#SQL-實作" class="headerlink" title="SQL 實作"></a>SQL 實作</h2><h3 id="原始-SQL"><a href="#原始-SQL" class="headerlink" title="原始 SQL"></a>原始 SQL</h3><p>最起初的想法是直接用 UPDATE 的語法一筆筆資科更新</p><pre><code class="sql">UPDATE `order` AS o SET o.`items` = (SELECT GROUP_CONCAT(od.`items`) AS &#39;items&#39; FROM `orderDetail` AS od WHERE od.fk_orderID = o.id GROUP BY o.`id`)</code></pre><p>但這樣子的缺點是 對 db 的存取需求量爆大 現在就只有幾筆資料 所以可能還好 但若訂單資料有幾千、幾萬筆的話 這樣子大量的存取就很可能會導致 db timeout 所以可以修改如下</p><h3 id="修改後-SQL-使用臨時表"><a href="#修改後-SQL-使用臨時表" class="headerlink" title="修改後 SQL &#x3D;&gt; 使用臨時表"></a>修改後 SQL &#x3D;&gt; 使用臨時表</h3><p>為了避免上面的問題 所以我們先 SELECT 一個已經把 by id 列好 items 的表出來 並把它存成一個暫存的表叫 name 然後再把 order 表去 join 這張暫存表 name 同時更新 items 欄位</p><pre><code class="sql">UPDATE `order` AS o INNER JOIN(SELECT o.`id`, GROUP_CONCAT(od.`items`) AS itemsFROM `order_test` AS oLEFT JOIN `orderDetail_test` od   ON od.`fk_orderID` = o.`id`GROUP BY o.`id`) AS nameON name.`id` = o.`id`SET o.`items` = name.`items`</code></pre><p>這樣就可以達到和前一個 SQL 一樣的成果 但只要存一次暫存表 name 就好 而非跑一堆查詢語法 進而有效改善效能問題</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.longwin.com.tw/2013/06/mysql-group-by-group_concat-2013/">https://blog.longwin.com.tw/2013/06/mysql-group-by-group_concat-2013&#x2F;</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> 技術筆記 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>「原子習慣：細微改變帶來巨大成就的實證法則」讀書心得</title>
      <link href="/2021/02/27/atomic-habits/"/>
      <url>/2021/02/27/atomic-habits/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>紅透半邊天的書，身為跟風仔當然不得不拜讀一波 作者用了相當多的例子來證明養成習慣的重要及如何培養好習慣 就讓我們來看看這本全世界都在讀的書到底是在說啥吧!</p><h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><h3 id="習慣的重要"><a href="#習慣的重要" class="headerlink" title="習慣的重要"></a>習慣的重要</h3><ul><li>每天一點點的小改變，將因著複利效應，隨時間加長而帶來巨大變化 → 原子習慣的重要</li><li>值得注意的是，好的習慣會帶來可觀的成長，反正，壞的習慣則會帶來可怕的崩壞 → 壞原子習慣的重要</li></ul><h3 id="改變習慣的訣竅"><a href="#改變習慣的訣竅" class="headerlink" title="改變習慣的訣竅"></a>改變習慣的訣竅</h3><h4 id="改變習慣最有效的方法-→-改變身份認同"><a href="#改變習慣最有效的方法-→-改變身份認同" class="headerlink" title="改變習慣最有效的方法 → 改變身份認同"></a>改變習慣最有效的方法 → 改變身份認同</h4><ul><li>e.g., 我正在戒煙 versus 我不吸煙，就是兩個明顯相左的身份認同，且後者明顯更有效</li></ul><h4 id="建立好習慣的４法則"><a href="#建立好習慣的４法則" class="headerlink" title="建立好習慣的４法則"></a>建立好習慣的４法則</h4><ul><li><p><code>法則一</code>：讓提示顯而易見 行為的改變始於察覺，必須讓自己先明確且清楚意識到要改變的東西，改變才會開始</p></li><li><p><code>法則二</code>：讓習慣有吸引力 將要建立的習慣與既有的愛好或習慣綁定並堆疊在一起，公式是:</p><ol><li>做完 [目前的習慣] 之後，我會執行 [我需要的習慣] → 習慣的堆疊</li><li>做完 [我需要的習慣] 之後，我會執行 [我想要的習慣] → 將 “需要” 與 “想要” 給配對起來</li></ol></li><li><p><code>法則三</code>：讓習慣輕而易舉 最小努力原則→在兩個類似的選項中，人類的天性會選擇花費最少力氣的 (像是日常的滑手機) 因此要將執行習慣障礙盡可能減少，如環境設計 (e.g., 打造一個隨時可運動的環境)</p></li><li><p><code>法則四</code>：讓獎賞令人滿足 人類自然會趨向可以”立即”獲得獎賞的行為，並規避會”立即”遭受懲罰的行動 → 維持習慣的關鍵重點是「成功」的感受，不論其規模的大小</p></li><li><p>以上４個法則依序完成即形成一個「迴路」，這將加強下一次行為習慣被重複的可能性 →「習慣迴路」於是完成</p></li></ul><h2 id="小小心得"><a href="#小小心得" class="headerlink" title="小小心得"></a>小小心得</h2><p>這本書將習慣的重要與養成結構化了起來 把原來很常見的想法給更具體地論述出來 (比如說一個習慣的養成要21天) 並且給了一個個可行的方法供讀者實作</p><p>個人是覺得綁定「目前的習慣」和「需要的習慣」是滿有幫助的 這樣子可以讓新習慣的養成更加簡單 再加上最後的獎賞形成迴路的話 整個習慣養成的迴圈就會變的更加容易</p><p>而且這個迴圈一旦跑起來 因為人類對損失的趨避性 (假如說我好不容易養成了一個好習慣，卻因為某些原因而失去了，這樣子之前的努力不就白費勒?) 該習慣就更不容易打破 經年累月累積下來，相信會是一個很大的改變的力量</p><p>GOGOGO!!</p><p>書本連結請 <a href="https://growingdna.com/atomic-habbitatomic-habits">點我</a></p><p><a href="https://growingdna.com/atomic-habbit" title="atomic-habits"><img src="https://growingdna.com/wp-content/uploads/2021/02/0010822522-e1614331363704.jpg" alt="atomic-habits" title="atomic-habits"></a></p>]]></content>
      
      
      <categories>
          
          <category> 興趣陳列 </category>
          
          <category> 雜學清談 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聯盟行銷 API 串接 - 以聯盟網為例</title>
      <link href="/2021/02/25/affiliate-marketing-api/"/>
      <url>/2021/02/25/affiliate-marketing-api/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近年來聯盟行銷以相當快的速度火紅起來 雖然相較於歐美，台灣算是發展相當慢的了 但遲到總比沒到好 就讓我們來了解一下聯盟行銷是什麼 以及該如何串接聯盟行銷的 API 吧!</p><h2 id="什麼是聯盟行銷"><a href="#什麼是聯盟行銷" class="headerlink" title="什麼是聯盟行銷"></a>什麼是聯盟行銷</h2><p>簡單來說 就是當廠商想要推廣商品時 為了讓擴散效果擴大 於是廠商找了很多推廣者來，讓這些推廣者來幫忙賣商品 如果推廣者成功賣出商品了話，就會分到一定比例的分潤 進而達到雙贏的效果</p><p>因為對廠商來說，他成功賣出了產品 對推廣者來說，他成功取得了分潤 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1614217334697.png" alt="file"></p><p>在台灣 比較常見的機制是 廠商們和推廣者會透過中間平台 (比如說聯盟網&#x2F;通路王) 媒合 這種作法的好處有二</p><ol><li>廠商不用大肆宣傳即可接觸到很多推廣者</li><li>廠商不須一次接觸大量推廣者，而是與單一窗口對接即可 (對推廣者亦然)</li></ol><p>其關係可以以下圖表現之</p><h3 id="無第三方平台"><a href="#無第三方平台" class="headerlink" title="無第三方平台"></a>無第三方平台</h3><p><img src="https://growingdna.com/wp-content/uploads/2021/02/image-1614129275889.png" alt="file"></p><h3 id="有第三方平台"><a href="#有第三方平台" class="headerlink" title="有第三方平台"></a>有第三方平台</h3><p><img src="https://growingdna.com/wp-content/uploads/2021/02/image-1614129293242.png" alt="file"></p><p>從以上兩張圖可以看出來第三方平台扮演的角色相當重要 大大降低了要進入聯盟行銷的門檻</p><p>接下來我們就要來看看如何串接第三方平台 以下將以聯盟網為例 使用 S2S (Server to Server) 的方式做串接 並用 CPS(Cost per Sale) 商品導購或完成交易當作計費的基礎</p><h2 id="串接流程概述"><a href="#串接流程概述" class="headerlink" title="串接流程概述"></a>串接流程概述</h2><p>[step]1[&#x2F;step] 使用 JS 識別網址內是否保持聯盟行銷字串 若有，則 ajax 呼叫後端 API</p><p>[step]2[&#x2F;step] 將聯盟連結內容存入 cookie</p><p>[step]3[&#x2F;step] 結帳時確認 cookie 是否有聯盟連結內容</p><p>[step]4[&#x2F;step] 呼叫聯盟網 API 以分潤</p><h2 id="串接程式碼"><a href="#串接程式碼" class="headerlink" title="串接程式碼"></a>串接程式碼</h2><p>[step]1[&#x2F;step] 使用 JS 識別網址內是否保持聯盟行銷字串 假設今天有一個 end-user 透過 <code>https://mydomain.com?affiliate_src=testABC</code> 進入我們的網站 這個 <code>?affiliate_src=testABC</code> 就是我們要辨別出來的特定聯盟行銷字串</p><pre><code class="javascript">let req = app.parseUrl(&#39;/&#39;+ location.search);// 若有 affiliate_src 則呼叫後端 apiif (!(typeof(req.affiliate_src) == “undefined”))&#123;    $.ajax(&#123;        type: &#39;POST&#39;,        url: &#39;/api-end-point&#39;,        data: req,        dataType: &#39;json&#39;,        async: false,    &#125;).done(function(output) &#123;                callback(output);            &#125;)&#125;</code></pre><p>[step]2[&#x2F;step] 在 php 端將聯盟連結內容存入 cookie 供日後客戶結帳的時候參考</p><pre><code class="php">// 假設前端傳進來的變數是 $reqif (!empty($req[&#39;affiliate_src&#39;])) &#123;    setcookie(&quot;affiliate_src&quot;, $$req[&#39;affiliate_src&#39;], time()+3600); // cookie 過期的時間可自訂&#125;</code></pre><p>[step]3[&#x2F;step] 結帳時確認 cookie 是否有聯盟連結內容 如果有的話，就在成立訂單時同時加註該筆訂單有參與聯盟行銷</p><pre><code class="php">if (isset($_COOKIE[&#39;affiliate_src&#39;])) &#123;    $affiliate_src = $_COOKIE[&#39;affiliate_src&#39;];    // 存到訂單內    insertOrder($order, $affilate_src);&#125;</code></pre><p>[step]4[&#x2F;step] 呼叫聯盟網 API 以分潤 根據聯盟網文件 其 API end point 是 <code>https://vbtrax.com/track/postback/conversions/8/global?order=[訂單編號]&amp; order_total=[購買總金額]&amp;revenue=[佣金金額]&amp;server_subid=[id2]&amp;step=sale</code></p><p>上面中文的部份就是要我們自己算後傳給聯盟網的部份 所以</p><pre><code class="php">// assign api uri，注意 $subid 是聯盟網提供的，我們需要將這個值回傳$affiliate_api_uri = &#39;https://vbtrax.com/track/postback/conversions/8/global?order=&#39; . $yourOrder . &#39;&amp;revenue=&#39; . $yourrevenue . &#39;&amp;server_subid=&#39; . $subid . &#39;&amp;step=sale&#39;;// 建立連線$c = curl_init();curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);curl_setopt($c, CURLOPT_URL, $affiliate_api_uri);$affiliate_api_rtn = curl_exec($c);curl_close($c);</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>聯盟網: <a href="https://www.affiliates.one/zh-tw/">https://www.affiliates.one/zh-tw/</a></li><li>通路王: <a href="https://www.ichannels.com.tw/">https://www.ichannels.com.tw/</a></li><li>博客來 AP 策略聯盟: <a href="https://ap.books.com.tw/">https://ap.books.com.tw/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>串接 Google OAuth 2.0 實現第三方登入</title>
      <link href="/2021/02/08/google-oauth-2-0-for-3rd-party-login/"/>
      <url>/2021/02/08/google-oauth-2-0-for-3rd-party-login/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了使用者方便 在目前的各大網站的註冊流程中 通常除了最基礎的註冊新帳號以外 也會提供第三方登入 比如說 google 登入、facebook 登入，甚至 github 登入等等</p><p>這樣的好處是可以讓使用者不須要額外註冊一個新帳號 而是可以直接使用現有的第三方帳號 即可達到註冊登入 達到快速轉換、降低門檻的效果</p><p>本文就是要來介紹如何使用 Google OAauth 來實現第三方登入</p><h2 id="流程簡介"><a href="#流程簡介" class="headerlink" title="流程簡介"></a>流程簡介</h2><p><img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612770164989.png" alt="file"> (來源: Google)</p><ol><li><p>自 Google API Console 取得 Google OAuth 2.0 憑證</p></li><li><p>自 Google Authorization Server 取得 access token (圖中 Request token + User login &amp; consent + Authorization code)</p></li><li><p>檢查使用者願意提供的資料範圍是否正確 (圖中 Exchange code for token + Token response)</p></li><li><p>送 access token 給 Google API，驗證正確後回傳使用者資料給我方 App 使用 (圖中 Use token to call Google API)</p></li></ol><h2 id="流程細節"><a href="#流程細節" class="headerlink" title="流程細節"></a>流程細節</h2><h3 id="設定-Google-Credentiails"><a href="#設定-Google-Credentiails" class="headerlink" title="設定 Google Credentiails"></a>設定 Google Credentiails</h3><p>[step]1[&#x2F;step] 進入 自 Google API Console <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760661254.png" alt="file"> [step]2[&#x2F;step] 點選 建立憑證 → OAuth 用戶端 ID <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760665142.png" alt="file"> [step]3[&#x2F;step] 設定同意畫面 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760677961.png" alt="file"> [step]4[&#x2F;step] 點選外部 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760692081.png" alt="file"> [step]5[&#x2F;step] 輸入相關資訊 標示星星都要填入 比較須要注意的是 <code>已授權的重新導向 URI</code> 這邊要填入在取得 OAuth access token 後的 callback 網址 以我的例子為例 在取得 token 後是要進入註冊的流程 所以在這邊會填入 <code>/google_next</code> <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760730982.png" alt="file"></p><p>[step]6[&#x2F;step] 確認 OAuth 用戶端已建立 這邊 show 出來的就是你的 ID 和密碼 待會我們會把這筆資料的 json 檔下載下來用 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760742973.png" alt="file"> [step]7[&#x2F;step] 下載憑證 json 回到 Google API Console 就可以看到剛剛建立的 OAuth 用戶端 ID 這邊點一下 “下載” 把它存起來 待會要用 <img src="https://growingdna.com/wp-content/uploads/2021/02/image-1612760750354.png" alt="file"></p><h3 id="Code-程式碼部份"><a href="#Code-程式碼部份" class="headerlink" title="Code 程式碼部份"></a>Code 程式碼部份</h3><p>[step]1[&#x2F;step] 依照官方文件使用 composer 安裝 library <code>composer require google/apiclient:&quot;^2.7&quot;</code></p><p>[step]2[&#x2F;step] 設定取得 credentials 路徑</p><pre><code class="php">public static function AuthUrl()&#123;    // New 一個 Google_Client 出來    $client = new Google_Client();    // 設定剛剛下載下來的 json 檔路徑    $client-&gt;setAuthConfig(&#39;/path/to/client_credentials.json&#39;);    // 設定 callback 轉址路徑，注意這個路徑必須和上面 `step5` 的 `已授權的重新導向 URI` 路徑一致    $client-&gt;setRedirectUri(f3()-&gt;get(&#39;uri&#39;) . &#39;/google_next&#39;);    // 設定可以 OAuth 授權的內容 以下就以最基本的 email 及 profile 資料為例    // 如果要更多資料可以參考: https://developers.google.com/identity/protocols/oauth2/scopes    $client-&gt;addScope(&#39;https://www.googleapis.com/auth/userinfo.email&#39;);    $client-&gt;addScope(&#39;https://www.googleapis.com/auth/userinfo.profile&#39;);    // 建立路徑    $url = $client-&gt;createAuthUrl();    // 接著就可以使用該路徑來 call Google Credentials    return $url;&#125;</code></pre><p>[step]3[&#x2F;step] 於 callback 路徑取得 userData 照上面的流程 我們理論上就會在 callback 取得 google 回傳的 access token 因此我們就可以用這個 token 來取得 userData</p><pre><code class="php">public static function userData()&#123;    // 前半段是一樣的    $client = new Google_Client();    $client-&gt;setAuthConfig(&#39;/path/to/client_credentials.json&#39;);    $client-&gt;setRedirectUri(f3()-&gt;get(&#39;uri&#39;) . &#39;/member/&#39; . $url);    // 取得 google 回傳的 access token    $client-&gt;authenticate($_GET[&#39;code&#39;]);    // 使用 service 物件來取得 profile 及 email    $service = new Google_Service_Oauth2($client);    $userData = $service-&gt;userinfo-&gt;get();    // 完成!    return $userData;&#125;</code></pre><p>根據上面的流程 就可以成功從 Google OAuth 取得使用者資料 因而達到串接 Google 登入的效果囉!</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://xenby.com/b/245-%E6%95%99%E5%AD%B8-google-oauth-2-0-%E7%94%B3%E8%AB%8B%E8%88%87%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">https://xenby.com/b/245-%E6%95%99%E5%AD%B8-google-oauth-2-0-%E7%94%B3%E8%AB%8B%E8%88%87%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97</a> <a href="https://blog.longwin.com.tw/2019/03/google-php-sdk-oauth-login-2019/">https://blog.longwin.com.tw/2019/03/google-php-sdk-oauth-login-2019/</a> <a href="https://petertc.medium.com/oauth-2-0-196a5550b668">https://petertc.medium.com/oauth-2-0-196a5550b668</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UML: 循序圖簡介</title>
      <link href="/2021/01/09/uml-sequence-diagrams/"/>
      <url>/2021/01/09/uml-sequence-diagrams/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-什麼是-UML"><a href="#前言-什麼是-UML" class="headerlink" title="前言: 什麼是 UML"></a>前言: 什麼是 UML</h2><p>UML &#x3D;&#x3D; ‘Unified Modeling Language’ &#x3D;&#x3D; ‘統一塑模語言’ 它是一種標準化的標記語言 使開發者在對其他部門說明軟體系統時能更具體 並以視覺化的方式來建構流程 同時將這個流程給文件化</p><p>相較於常見的流程圖 UML 可能會會更有助於工程師與其他部門協助 (如 UI&#x2F;UX)</p><p>不過 還是得視情況決定什麼圖表最適合 以我的經驗來說 如果某一個功能牽涉的範圍或部門較廣 使用 UML 可能就是一個比較合適的方式</p><p>另外 UML 又有很多種不一樣的類型 以下將以循序圖 (Sequence Diagrams) 做說明</p><h2 id="流程圖-vs-循序圖"><a href="#流程圖-vs-循序圖" class="headerlink" title="流程圖 vs 循序圖"></a>流程圖 vs 循序圖</h2><h3 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h3><p><img src="/wp-content/uploads/2021/01/image-1610960193876.png" alt="file"> 這是個很常見流程圖 若沒有發生跨部門、跨類別處理的話還滿簡明的</p><p>但若遇到的狀況是比較複雜 須要串接到各個模組的話 <code>e.g., 某註冊流程要驗證帳密、要串第三方 API、要連動 EMAIL 系統</code> 那可能就比較不容易使用流程程圖來區分各個模組負責的東西 這時我們就可以出動循序圖了</p><h3 id="循序圖"><a href="#循序圖" class="headerlink" title="循序圖"></a>循序圖</h3><p>--</p><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>下圖分成 4個角色 分別是</p><ol><li>前端 front-end</li><li>server API</li><li>第三方登入 API</li><li>第三方發信 API</li></ol><h4 id="片段型態"><a href="#片段型態" class="headerlink" title="片段型態"></a>片段型態</h4><p>常見的有</p><ol><li>alt (Alternatives) : 任何情況只有一個序列發生，是互斥的條件</li><li>par (Parallel) : 平行處理，片段中的事件可以交錯執行</li><li>opt (Option) : 選擇項，不一定會發生的序列(要符合條件)</li><li>loop : 重複片段。可以設立重複的條件，若未設定最小級最大重複次數，預設表示無限制</li><li>ref (Reference) : 表示參考另一個互動循序圖</li></ol><p>下圖只有用到 opt 其他可以參考<a href="https://dotblogs.com.tw/wasichris/2016/03/17/232341">這篇文章</a> <img src="/wp-content/uploads/2021/01/image-1610960228839.png" alt="file"></p><p>如此以來 我們就可以很清楚知道4個角色之間的權責是什麼 以及其流程中發生了什麼事</p><p>同時 和 UIUX 溝通的時候 也可以較清楚知道 UIUX 設定的流程和軟體設定端這邊的是否一致 真的皆大歡喜啊 (應該吧)</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>wiki: <a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80</a> 文章: <a href="https://dotblogs.com.tw/wasichris/2016/03/17/232341">https://dotblogs.com.tw/wasichris/2016/03/17/232341</a> 畫圖的網站: <a href="https://online.visual-paradigm.com/">https://online.visual-paradigm.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 PHP 安插固定排序 &amp; 隨機排序卡片</title>
      <link href="/2020/12/23/php-random-fixed-order/"/>
      <url>/2020/12/23/php-random-fixed-order/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在特定情境下，我們想要把 array 裡的東西同時照特定的方式做排序 其中有幾個是固定的，有幾個是隨機的 比如說我們有 itemA ~ itemF 總共六個 item <img src="/wp-content/uploads/2020/12/image-1608706387454.png" alt="file"></p><p>我們想要把排序第一、第三的給固定下來 同時讓排序第二、第四個從 itemA ~ itemF 給取出但不重複 <img src="/wp-content/uploads/2020/12/image-1608706457093.png" alt="file"></p><p>所以結果可能是這樣 <img src="/wp-content/uploads/2020/12/image-1608706497157.png" alt="file"></p><p>也可能是這樣 <img src="/wp-content/uploads/2020/12/image-1608706505281.png" alt="file"></p><p>那要怎麼做呢? 以下就架構，分兩個部份討論</p><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><h3 id="一、存-db-格式"><a href="#一、存-db-格式" class="headerlink" title="一、存 db 格式"></a>一、存 db 格式</h3><p>為簡化討論 我們假設 itemTable 裡只有三個欄位 分別是 id、name、sort</p><p>在存資料時 我們把要固定欄位的紀錄之 sort 設為正數 (下圖例為 1、3) 而隨機排序的資料 sort 設為 -1 <img src="/wp-content/uploads/2020/12/image-1608776463130.png" alt="file"></p><p>這樣的好處是我們一眼就可以知道 哪些紀錄是要固定欄位、哪些又是要隨機排序的</p><h3 id="二、排序方式"><a href="#二、排序方式" class="headerlink" title="二、排序方式"></a>二、排序方式</h3><p>這邊先理理頭緒 用自然語言寫出接下來要怎麼處理排序 (大概就是 Pseudocode 的概念) 然後再來寫 code 會比較順</p><h4 id="自然語言版"><a href="#自然語言版" class="headerlink" title="自然語言版"></a>自然語言版</h4><ol><li>將隨機排序的 <code>$aryWithoutOrder</code> 資料過濾出來 (sort &#x3D; -1 的資料)</li><li>新增一個新的 <code>$newAry</code> 並把要固定排序的資料放進去</li><li>把 <code>$newAry</code> 裡面沒有資料的位置填滿， 填滿的方式為從 <code>$aryWithoutOrder</code> 隨機取出</li></ol><h4 id="正式寫-code-版"><a href="#正式寫-code-版" class="headerlink" title="正式寫 code 版"></a>正式寫 code 版</h4><pre><code class="php">public static function do_sortItems($items = [])&#123;    // 假設有 5 個 item    // 固定 itemA、itemC 為欄位 1 &amp; 3 (sort 為 1 &amp; 3)    // 其他的隨機排序 (設為 -1)    $items =        [            [                &#39;name&#39; =&gt; &#39;itemA&#39;,                &#39;sort&#39; =&gt; 1,            ],            [                &#39;name&#39; =&gt; &#39;itemB&#39;,                &#39;sort&#39; =&gt; -1,            ],            [                &#39;name&#39; =&gt; &#39;itemC&#39;,                &#39;sort&#39; =&gt; 3,            ],            [                &#39;name&#39; =&gt; &#39;itemD&#39;,                &#39;sort&#39; =&gt; -1,            ],            [                &#39;name&#39; =&gt; &#39;itemE&#39;,                &#39;sort&#39; =&gt; -1,            ]        ];    // 先將隨機排序的 item 取出放到 $aryWithouOrder 裡    $aryWithoutOrder = \__::filter($items, function($n) &#123;       return $n[&#39;sort&#39;] &lt; 0;    &#125;);    $newAry = [];    // 最多取 8 個 item 出來    $maxLength = safeCount($items) &lt; 8 ? safeCount($items) : 8;    // 使用 bottomline 裡的 filter function 來取出已固定 sort 的item    // 並存到 $newAry 裡    for ($i = 0; $i &lt; $maxLength; $i++) &#123;        $newAry[$i] = \__::filter($items, function ($n) use ($i) &#123;           return $n[&#39;sort&#39;] ==  $i + 1 ? $n[&#39;sort&#39;] ==  $i + 1 : [];        &#125;);    &#125;    // 逐一檢查 $newAry ，若 value 為空，則隨機從 $aryWithoutOrder 裡拿一個 item 出來    // 同時將該 item 從 $aryWithoutOrder 裡拿掉    foreach ($newAry as $i =&gt; $j) &#123;        if (empty($j)) &#123;            $randomKey = rand(0, safeCount($aryWithoutOrder) -1);            $newAry[$i] = $aryWithoutOrder[$randomKey];            $newAry[$i][&#39;sort&#39;] = $i+1;            $aryWithoutOrder = array_splice($aryWithoutOrder, $randomKey, 1);        &#125;    &#125;    return $newAry;&#125;</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><ul><li>使用到的 library bottomline: <a href="https://maciejczyzewski.github.io/bottomline/documentation/#filter">https://maciejczyzewski.github.io/bottomline/documentation/#filter</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP 排序 usort 範例教學</title>
      <link href="/2020/11/24/php-usort-example/"/>
      <url>/2020/11/24/php-usort-example/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近工作上剛好碰到排序的麻煩問題 這邊就寫下來記錄一下 首先會簡介一下各種排序 最後會針對重點 usort 自訂排序做說明教學</p><h2 id="php-官方排序-function"><a href="#php-官方排序-function" class="headerlink" title="php 官方排序 function"></a>php 官方排序 function</h2><h3 id="第一類-用”值-value-”-排序"><a href="#第一類-用”值-value-”-排序" class="headerlink" title="第一類: 用”值 (value)” 排序"></a>第一類: 用”值 (value)” 排序</h3><ol><li>由小到大排序值、且刪除 key &#x3D;&gt; <code>sort</code></li><li>由小到大排序值、且保留 key &#x3D;&gt; <code>asort</code></li><li>由大到小排序值、且刪除 key &#x3D;&gt; <code>rsort</code></li><li>由大到小排序值、且保留 key &#x3D;&gt; <code>arsort</code></li></ol><h3 id="第二類-用”索引-key-”-排序"><a href="#第二類-用”索引-key-”-排序" class="headerlink" title="第二類: 用”索引 (key)” 排序"></a>第二類: 用”索引 (key)” 排序</h3><ol><li>由小到大排key &#x3D;&gt; <code>ksort</code></li><li>由大到小排key &#x3D;&gt; <code>krsort</code></li></ol><h3 id="第三類-自訂排序"><a href="#第三類-自訂排序" class="headerlink" title="第三類: 自訂排序"></a>第三類: 自訂排序</h3><p>加一個前綴 <code>u</code> 在相對應 <code>sort</code> 的前面就好了 以下以 <code>usort</code> 為例</p><h2 id="使用-php-官方的自訂排序"><a href="#使用-php-官方的自訂排序" class="headerlink" title="使用 php 官方的自訂排序"></a>使用 php 官方的自訂排序</h2><p>如上所說 加一個前綴 <code>u</code> 在相對應 <code>sort</code> 的前面就好了 以下就以 <code>usort</code> 為例</p><h3 id="情境一"><a href="#情境一" class="headerlink" title="情境一"></a>情境一</h3><p>假設我們有一個 array 長這樣</p><pre><code class="php">$unsorted = [    [&#39;name&#39;   =&gt; &#39;good&#39;,     &#39;sorter&#39; =&gt; &#39;1&#39;,],    [&#39;name&#39;   =&gt; &#39;bad&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,],    [&#39;name&#39;   =&gt; &#39;normal&#39;,     &#39;sorter&#39; =&gt; &#39;2&#39;,],];</code></pre><p>我們想要照 <code>sorter</code> 由小到大來排的話 就可以用下面的寫法 輸出就是按 sorter 由小到大排 (解釋如註解)</p><pre><code class="php">usort($unsorted, function ($a, $b) &#123;    return $a[&#39;sorter&#39;] &gt; $b[&#39;sorter&#39;];      // 如果 a &gt; b 的話 就會輸出 1，而因為 usort 的 根基是 sort     // 意即是照 value 由小到大排序，所以輸出 1 的就會往後排，進而達到目的&#125;);// output 如下// array(3) &#123;//   [0]=&gt;//   array(2) &#123;//     [&quot;name&quot;]=&gt;//     string(4) &quot;good&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;1&quot;//   &#125;//   [1]=&gt;//   array(2) &#123;//     [&quot;name&quot;]=&gt;//     string(6) &quot;normal&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;2&quot;//   &#125;//   [2]=&gt;//   array(2) &#123;//     [&quot;name&quot;]=&gt;//     string(3) &quot;bad&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;3&quot;//   &#125;// &#125;</code></pre><h3 id="情境二"><a href="#情境二" class="headerlink" title="情境二"></a>情境二</h3><p>一樣的 array 但如果 sorter 有兩個是重複的呢? 比如說這樣:</p><pre><code class="php">$unsorted = [    [&#39;name&#39;   =&gt; &#39;good&#39;,     &#39;sorter&#39; =&gt; &#39;1&#39;,],    [&#39;name&#39;   =&gt; &#39;bad&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,],    [&#39;name&#39;   =&gt; &#39;normal&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,],];</code></pre><p>此時可能就要多一個條件來排了 簡單一點 就多一個 <code>newSorter</code> 吧</p><pre><code class="php">$unsorted = [    [&#39;name&#39;   =&gt; &#39;good&#39;,     &#39;sorter&#39; =&gt; &#39;1&#39;,    &#39;newSorter&#39;=&gt; &#39;2&#39;],    [&#39;name&#39;   =&gt; &#39;bad&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,    &#39;newSorter&#39;=&gt; &#39;3&#39;],    [&#39;name&#39;   =&gt; &#39;normal&#39;,     &#39;sorter&#39; =&gt; &#39;3&#39;,    &#39;newSorter&#39; =&gt; &#39;1&#39;],    [&#39;name&#39;   =&gt; &#39;hahaha&#39;,     &#39;sorter&#39; =&gt; &#39;2&#39;,     &#39;newSorter&#39; =&gt; &#39;1&#39;],];</code></pre><p>我們想要按 sorter 來排 但如果 sorter 一樣的話 就用 <code>newSorter</code> 由小到大排 因此寫法如下:</p><pre><code class="php">usort($unsorted, function ($a, $b) &#123;    return $a[&#39;sorter&#39;] &gt; $b[&#39;sorter&#39;]  ($a[&#39;sorter&#39;] == $b[&#39;sorter&#39;] &amp;&amp; $a[&#39;newSorter&#39;] &gt; $b[&#39;newSorter&#39;]);&#125;// output 如下// array(4) &#123;//   [0]=&gt;//   array(3) &#123;//     [&quot;name&quot;]=&gt;//     string(4) &quot;good&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;1&quot;//     [&quot;newSorter&quot;]=&gt;//     string(1) &quot;2&quot;//   &#125;//   [1]=&gt;//   array(3) &#123;//     [&quot;name&quot;]=&gt;//     string(6) &quot;hahaha&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;2&quot;//     [&quot;newSorter&quot;]=&gt;//     string(1) &quot;1&quot;//   &#125;//   [2]=&gt;//   array(3) &#123;//     [&quot;name&quot;]=&gt;//     string(6) &quot;normal&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;3&quot;//     [&quot;newSorter&quot;]=&gt;//     string(1) &quot;1&quot;//   &#125;//   [3]=&gt;//   array(3) &#123;//     [&quot;name&quot;]=&gt;//     string(3) &quot;bad&quot;//     [&quot;sorter&quot;]=&gt;//     string(1) &quot;3&quot;//     [&quot;newSorter&quot;]=&gt;//     string(1) &quot;3&quot;//   &#125;// &#125;</code></pre><p>也可以寫成下面這樣 基本上可以理解成輸出 1 的話就往後排 (因為 <code>usort</code> 的基底是 <code>sort</code>)</p><pre><code class="php">if ($a[&#39;sorter&#39;] &gt; $b[&#39;sorter&#39;]  ($a[&#39;sorter&#39;] == $b[&#39;sorter&#39;] &amp;&amp; $a[&#39;newSorter&#39;] &gt; $b[&#39;newSorter&#39;])) &#123;    return 1;&#125; elseif ($a[&#39;sorter&#39;] &lt; $b[&#39;sorter&#39;]) &#123;    return -1;&#125; else &#123;    return 0;&#125;</code></pre><p>以上! 網路上找了很久還是找不到完整對 <code>usort</code> 的說明 希望這篇文章對大家有幫助 有問題的話可以再留言喔!</p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[成功竟然有公式」讀後感</title>
      <link href="/2020/11/02/formula-to-success/"/>
      <url>/2020/11/02/formula-to-success/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看書名就覺得是雞湯的書 原本是沒啥覺打算要看 但由於推坑的人真的太多 還是下手來看看</p><p>大概就是在說作者非常召集了一個專門研究怎麼樣才會成功的團隊 做了大大小小的實驗和研究 最後整理出了5個成功的公式</p><h2 id="成功第一定律-你的表現能為你帶來成功，但如果表現的優劣難以判斷，則是人際網路能為你帶來成功"><a href="#成功第一定律-你的表現能為你帶來成功，但如果表現的優劣難以判斷，則是人際網路能為你帶來成功" class="headerlink" title="成功第一定律: 你的表現能為你帶來成功，但如果表現的優劣難以判斷，則是人際網路能為你帶來成功"></a>成功第一定律: 你的表現能為你帶來成功，但如果表現的優劣難以判斷，則是人際網路能為你帶來成功</h2><p>譯: 盡量讓自己變強，同時拓展人脈能讓你更容易被看見</p><h2 id="成功第二定律-表現有上限，但成功無上限"><a href="#成功第二定律-表現有上限，但成功無上限" class="headerlink" title="成功第二定律: 表現有上限，但成功無上限"></a>成功第二定律: 表現有上限，但成功無上限</h2><p>譯: 實力本身是有極限的，像是和愛因斯坦同期、研究成果相當的科學家不在少數 但只有他才名留青史 擁有遠遠超過其他人的成功</p><h2 id="成功第三定律-未來的成功-過去的成功-優先連結-x-適存度-競爭優勢"><a href="#成功第三定律-未來的成功-過去的成功-優先連結-x-適存度-競爭優勢" class="headerlink" title="成功第三定律: 未來的成功 &#x3D; 過去的成功 (優先連結) x 適存度 (競爭優勢)"></a>成功第三定律: 未來的成功 &#x3D; 過去的成功 (優先連結) x 適存度 (競爭優勢)</h2><p>譯: 和第一定復差不多，反正就是要夠猛夠知名 但如果沒有優先連結的話，不斷持續 時間會給你應有的回報</p><h2 id="成功第四定律-成功的團隊需要多元性和平衡"><a href="#成功第四定律-成功的團隊需要多元性和平衡" class="headerlink" title="成功第四定律: 成功的團隊需要多元性和平衡"></a>成功第四定律: 成功的團隊需要多元性和平衡</h2><p>老生常談了啊</p><h2 id="成功第五定律-只要堅持下去，成功隨時都可能來到"><a href="#成功第五定律-只要堅持下去，成功隨時都可能來到" class="headerlink" title="成功第五定律: 只要堅持下去，成功隨時都可能來到"></a>成功第五定律: 只要堅持下去，成功隨時都可能來到</h2><p>S (Success) &#x3D; Qr Q: Q 係數: 執行力 r: random idea: 可以想成點子的價值 Q和r 缺一不可 兩者兼具再加上堅持 年齡不是問題，終究可以成功</p><p>[成功竟然有公式] 博客來連結 <a href="https://growingdna.com/formula-to-success">https://growingdna.com/formula-to-success</a> <img src="https://growingdna.com/wp-content/uploads/2020/11/image-1604249449031.png" alt="file"></p>]]></content>
      
      
      <categories>
          
          <category> 興趣陳列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP 指定日期格式、加減運算(天/月/年)</title>
      <link href="/2020/10/13/php-datetime-calculation/"/>
      <url>/2020/10/13/php-datetime-calculation/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近常常遇到須要指定日期格式 並對該日期做加減運算 像是加一天、減一天、加一個月、減一個月之類的</p><p>下面就來紀錄一下 PHP 原生的寫法 好用又不需要載入額外的東西</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="給目前時間加一天、一小时"><a href="#給目前時間加一天、一小时" class="headerlink" title="給目前時間加一天、一小时"></a>給目前時間加一天、一小时</h3><pre><code class="php">&lt;?phpecho &quot;今天:&quot;,date(&#39;Y-m-d H:i:s&#39;),&quot;&lt;br&gt;&quot;;echo &quot;明天:&quot;,date(&#39;Y-m-d H:i:s&#39;,strtotime(&#39;+1 day&#39;));?&gt;</code></pre><h3 id="同理，加一年、一個月、一小時、一分鐘…"><a href="#同理，加一年、一個月、一小時、一分鐘…" class="headerlink" title="同理，加一年、一個月、一小時、一分鐘…"></a>同理，加一年、一個月、一小時、一分鐘…</h3><pre><code class="php">&lt;?phpecho &quot;明天:&quot;,date(&#39;Y-m-d H:i:s&#39;,strtotime(&#39;+1 day&#39;));echo &quot;明天:&quot;,date(&#39;Y-m-d H:i:s&#39;,strtotime(&#39;+1 hour&#39;));echo &quot;明天:&quot;,date(&#39;Y-m-d H:i:s&#39;,strtotime(&#39;+1 minute&#39;));echo &quot;明天:&quot;,date(&#39;Y-m-d H:i:s&#39;,strtotime(&#39;+1 mouth&#39;));?&gt;</code></pre><p>這裡+1 day可以修改參數1為任何想需要的數 day也可以改成year（年），month（月），hour（小時）minute（分），second（秒）如： date(‘Y-m-d H:i:s’,strtotime(“+1 day +1 hour +1 minute”); 可以随便自由组合，以達到任意输出時間的目的</p><h3 id="给指定時間加一天、一小時"><a href="#给指定時間加一天、一小時" class="headerlink" title="给指定時間加一天、一小時"></a>给指定時間加一天、一小時</h3><pre><code class="php">&lt;?phpecho date(&quot;Y-m-d&quot;,strtotime(&quot;+1 month&quot;,strtotime(&quot;2020-10-13&quot;)));?&gt;</code></pre><p>结果為：2020-11-13</p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三方 Cookie SameSite = Lax 對應 PHP 調整方式</title>
      <link href="/2020/09/22/cookie-samesite-lax-php-adjustment/"/>
      <url>/2020/09/22/cookie-samesite-lax-php-adjustment/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因應最近第三方 Cookie 的規則 PHP 在 setcookie func 也要有相對應的修正 <a href="https://medium.com/@azure820529/chrome-80-%E5%BE%8C%E9%87%9D%E5%B0%8D%E7%AC%AC%E4%B8%89%E6%96%B9-cookie-%E7%9A%84%E8%A6%8F%E5%89%87%E8%AA%BF%E6%95%B4-default-samesite-lax-aaba0bc785a3">這篇文章</a>寫的相當詳細 值得好好拜讀一波 以下就介紹自己遇到的問題和對應調整</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><h3 id="原始解法"><a href="#原始解法" class="headerlink" title="原始解法"></a>原始解法</h3><p>解法在上面這篇文章裡其實都有寫到 而<a href="https://blog.longwin.com.tw/2020/02/php-cookie-samesite-set-none-lax-2020/">這篇文章</a>也有提到 PHP 7.3 前後差別的寫法 同時<a href="https://www.php.net/manual/en/function.setcookie.php">官方文件</a> 也有提用 options 的寫法 所以我們就使用了官方文件底下好心人的解法</p><pre><code class="php">&lt;?php$arr_cookie_options = array (                &#39;expires&#39; =&gt; time() + 60*60*24*30,                &#39;path&#39; =&gt; &#39;/&#39;,                &#39;domain&#39; =&gt; &#39;.example.com&#39;, // leading dot for compatibility or use subdomain                &#39;secure&#39; =&gt; true,     // or false                &#39;httponly&#39; =&gt; true,    // or false                &#39;samesite&#39; =&gt; &#39;None&#39; // None  Lax   Strict                );setcookie(&#39;TestCookie&#39;, &#39;The Cookie Value&#39;, $arr_cookie_options);   ?&gt;</code></pre><p>以為這樣就可以解決 殊不知 不知道為何在呼叫某支 api 時 cookie 總是被變更成 Lax 導致在到第三方支付導回時就會被自動登出</p><p><img src="https://growingdna.com/wp-content/uploads/2020/09/image-1600749183405.png" alt="file"></p><p>甚至在 index.php 裡加上一段</p><pre><code class="php">session_set_cookie_params([&#39;SameSite&#39; =&gt; &#39;None&#39;, &#39;Secure&#39; =&gt; true]);</code></pre><p>也沒用</p><h3 id="強制解法"><a href="#強制解法" class="headerlink" title="強制解法"></a>強制解法</h3><p>後來沒辦法 只好在該 api 內強制加一段 func 去呼叫上面的 <code>setcookie</code> (原本是一旦載入 index.php 就呼叫) 這樣的結果就是導致在會 <code>setcookie</code> 兩次 但至少最後一次會是 <code>samesite = none</code> 也算是解決了問題…</p><p>算是個經驗教訓吧 cookie 真是個奇妙的玩意…</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[讀後筆記] 黑心建商的告白 - 買屋前不看會哭的17堂課</title>
      <link href="/2020/08/15/study-before-buying-houses/"/>
      <url>/2020/08/15/study-before-buying-houses/</url>
      
        <content type="html"><![CDATA[<h2 id="中古屋-vs-新成屋-vs-預售屋"><a href="#中古屋-vs-新成屋-vs-預售屋" class="headerlink" title="中古屋 vs. 新成屋 vs. 預售屋"></a>中古屋 vs. 新成屋 vs. 預售屋</h2><h3 id="中古屋-要預估管線費用"><a href="#中古屋-要預估管線費用" class="headerlink" title="中古屋: 要預估管線費用"></a>中古屋: 要預估管線費用</h3><ul><li>事前確認是否沒漏水、沒壁癌、管線配燈的當</li></ul><h3 id="新成屋-首重格局"><a href="#新成屋-首重格局" class="headerlink" title="新成屋: 首重格局"></a>新成屋: 首重格局</h3><ul><li>牽涉到日後裝潢須要花多少錢</li></ul><h3 id="預售屋-要認真監工、挑一個不差的建商"><a href="#預售屋-要認真監工、挑一個不差的建商" class="headerlink" title="預售屋: 要認真監工、挑一個不差的建商"></a>預售屋: 要認真監工、挑一個不差的建商</h3><ul><li>無法知道日後房子會長怎樣</li></ul><h2 id="挑屋四部曲"><a href="#挑屋四部曲" class="headerlink" title="挑屋四部曲"></a>挑屋四部曲</h2><h3 id="一-基本功-社區門口學問多"><a href="#一-基本功-社區門口學問多" class="headerlink" title="(一) 基本功: 社區門口學問多"></a>(一) 基本功: 社區門口學問多</h3><h4 id="大環境掃描-電線、廟、馬路"><a href="#大環境掃描-電線、廟、馬路" class="headerlink" title="大環境掃描: 電線、廟、馬路"></a>大環境掃描: 電線、廟、馬路</h4><ul><li>馬路: 不能有路沖</li></ul><h4 id="建物本身的座向、外觀"><a href="#建物本身的座向、外觀" class="headerlink" title="建物本身的座向、外觀"></a>建物本身的座向、外觀</h4><ul><li>高度、風切聲</li><li>外牆磁磚是否平整</li></ul><h3 id="二-估保值-大廳公設別放過"><a href="#二-估保值-大廳公設別放過" class="headerlink" title="(二) 估保值: 大廳公設別放過"></a>(二) 估保值: 大廳公設別放過</h3><ul><li>警衛代表管委會的品質</li><li>觀察信箱: 水電管理費有無繳、出租訊息</li><li>公設洗手間: 新成屋要注意，中古屋就還好</li></ul><h3 id="三-客廳的秘密-優劣差很大"><a href="#三-客廳的秘密-優劣差很大" class="headerlink" title="(三) 客廳的秘密: 優劣差很大"></a>(三) 客廳的秘密: 優劣差很大</h3><h4 id="大門不對鄰居大門"><a href="#大門不對鄰居大門" class="headerlink" title="大門不對鄰居大門"></a>大門不對鄰居大門</h4><h4 id="梯廳-樓梯拐角、暗處要注意-有歹徒"><a href="#梯廳-樓梯拐角、暗處要注意-有歹徒" class="headerlink" title="梯廳: 樓梯拐角、暗處要注意(有歹徒)"></a>梯廳: 樓梯拐角、暗處要注意(有歹徒)</h4><h4 id="外置鞋櫃-影響房價"><a href="#外置鞋櫃-影響房價" class="headerlink" title="外置鞋櫃: 影響房價"></a>外置鞋櫃: 影響房價</h4><h4 id="觀察大門的四個角落-若不平整，可能是因為地震而傷到結構"><a href="#觀察大門的四個角落-若不平整，可能是因為地震而傷到結構" class="headerlink" title="觀察大門的四個角落: 若不平整，可能是因為地震而傷到結構"></a>觀察大門的四個角落: 若不平整，可能是因為地震而傷到結構</h4><h4 id="進門先看大樑-不要太低到手可以摸到→壓迫感"><a href="#進門先看大樑-不要太低到手可以摸到→壓迫感" class="headerlink" title="進門先看大樑: 不要太低到手可以摸到→壓迫感"></a>進門先看大樑: 不要太低到手可以摸到→壓迫感</h4><h4 id="一分鐘聽聲辨味"><a href="#一分鐘聽聲辨味" class="headerlink" title="一分鐘聽聲辨味:"></a>一分鐘聽聲辨味:</h4><ul><li>站在沙發，面向放電視的主牆，停一分鐘聽風、隔壁&#x2F;樓下人電視聲 必要時可能朋友到上下左右層制造聲音、味道看看</li></ul><h4 id="粗估面積的深寬比"><a href="#粗估面積的深寬比" class="headerlink" title="粗估面積的深寬比"></a>粗估面積的深寬比</h4><ul><li>客廳寬、深至少三米: 沙發85cm，走道、寬50公分茶几、走道、寬40公分以上的電視櫃，再到電視的距離所需</li><li>窗要全開，請廁所噴香水試試會不會在客廳聞到→廁所臭味測試</li></ul><h4 id="電器總開關不列加"><a href="#電器總開關不列加" class="headerlink" title="電器總開關不列加"></a>電器總開關不列加</h4><ul><li>配電盤內是否有安培數足夠的安全開關</li><li>家中的各區要分開→廚房、冷氣、各罣室、冰箱</li></ul><h3 id="四-查廁所，知風水"><a href="#四-查廁所，知風水" class="headerlink" title="(四) 查廁所，知風水"></a>(四) 查廁所，知風水</h3><p>-</p><h4 id="打開維修孔看素顏"><a href="#打開維修孔看素顏" class="headerlink" title="打開維修孔看素顏"></a>打開維修孔看素顏</h4><ul><li>看梁柱跟結構面的施工品質</li><li>有無水漬(漏水)、平整度(菸盒、布手套)、通氣度(抽風機有無接到屋)</li></ul><h4 id="檢查瓷磚線"><a href="#檢查瓷磚線" class="headerlink" title="檢查瓷磚線"></a>檢查瓷磚線</h4><ul><li>牆壁跟地板的瓷磚有無線對線</li><li>敲一敲瓷磚的任何角落是否為實心</li></ul><h4 id="假裝要上廁所"><a href="#假裝要上廁所" class="headerlink" title="假裝要上廁所"></a>假裝要上廁所</h4><ul><li>抽幾張衛生紙揉一團丟到馬桶</li><li>馬桶方向不要對門</li></ul><h4 id="想想在廁所內做什麼"><a href="#想想在廁所內做什麼" class="headerlink" title="想想在廁所內做什麼"></a>想想在廁所內做什麼</h4><h2 id="管委會，幫你管荷包"><a href="#管委會，幫你管荷包" class="headerlink" title="管委會，幫你管荷包"></a>管委會，幫你管荷包</h2><h3 id="公設由管委會與建商點交"><a href="#公設由管委會與建商點交" class="headerlink" title="公設由管委會與建商點交"></a>公設由管委會與建商點交</h3><ul><li>圖審: 水電、消防、建築施工圖</li><li>一定要申請竣工圖比對</li><li>請建商出具報價單</li><li>廣告上寫啥實際上就要有什麼: 有巴士就要有，而不是九人座充數</li><li>發電機是大廠牌還是混血牌</li><li>污水處理設施要查:<ul><li>打開地下室的孔蓋</li></ul></li></ul><h2 id="科學風水"><a href="#科學風水" class="headerlink" title="科學風水"></a>科學風水</h2><h3 id="高於路面-常淹水"><a href="#高於路面-常淹水" class="headerlink" title="高於路面: 常淹水"></a>高於路面: 常淹水</h3><p>-</p><h3 id="低於路面-常淹水、風沙堆續"><a href="#低於路面-常淹水、風沙堆續" class="headerlink" title="低於路面: 常淹水、風沙堆續"></a>低於路面: 常淹水、風沙堆續</h3><p>-</p><h3 id="離水太近-防洪問題、較溼"><a href="#離水太近-防洪問題、較溼" class="headerlink" title="離水太近: 防洪問題、較溼"></a>離水太近: 防洪問題、較溼</h3><p>-</p><h3 id="有飛機飛過-噪音"><a href="#有飛機飛過-噪音" class="headerlink" title="有飛機飛過: 噪音"></a>有飛機飛過: 噪音</h3><p>-</p><h3 id="水箱下方-三不五十吵"><a href="#水箱下方-三不五十吵" class="headerlink" title="水箱下方: 三不五十吵"></a>水箱下方: 三不五十吵</h3><p>-</p><h3 id="面對電梯-吵-嚇到"><a href="#面對電梯-吵-嚇到" class="headerlink" title="面對電梯: 吵&amp;嚇到"></a>面對電梯: 吵&amp;嚇到</h3><p>-</p><h3 id="長長走道-太長危險"><a href="#長長走道-太長危險" class="headerlink" title="長長走道: 太長危險"></a>長長走道: 太長危險</h3><p>-</p><h3 id="廳明暗房-客廳要明亮，房間要暗-不熱"><a href="#廳明暗房-客廳要明亮，房間要暗-不熱" class="headerlink" title="廳明暗房: 客廳要明亮，房間要暗(不熱)"></a>廳明暗房: 客廳要明亮，房間要暗(不熱)</h3><h3 id="一箭穿心-廚房往陽台的門、廚房的門、與客廳的窗或門為一直線"><a href="#一箭穿心-廚房往陽台的門、廚房的門、與客廳的窗或門為一直線" class="headerlink" title="一箭穿心: 廚房往陽台的門、廚房的門、與客廳的窗或門為一直線"></a>一箭穿心: 廚房往陽台的門、廚房的門、與客廳的窗或門為一直線</h3><ul><li>對流問題: 煮飯、瓦斯</li></ul><h3 id="家中門對門"><a href="#家中門對門" class="headerlink" title="家中門對門"></a>家中門對門</h3><p>-</p><h3 id="廚房對門為廁所"><a href="#廚房對門為廁所" class="headerlink" title="廚房對門為廁所"></a>廚房對門為廁所</h3><p>-</p><h3 id="主臥位置-斜對角最裡面那間"><a href="#主臥位置-斜對角最裡面那間" class="headerlink" title="主臥位置: 斜對角最裡面那間"></a>主臥位置: 斜對角最裡面那間</h3><p>-</p><h2 id="樣品屋陷井"><a href="#樣品屋陷井" class="headerlink" title="樣品屋陷井"></a>樣品屋陷井</h2><p>-</p><h3 id="衣櫃做假"><a href="#衣櫃做假" class="headerlink" title="衣櫃做假"></a>衣櫃做假</h3><ul><li>一般至少有60cm 但建商只做薄薄的讓你覺得比較寬</li></ul><h3 id="屋內梁柱"><a href="#屋內梁柱" class="headerlink" title="屋內梁柱"></a>屋內梁柱</h3><ul><li>建商可能不會做</li></ul><h2 id="防水工程"><a href="#防水工程" class="headerlink" title="防水工程"></a>防水工程</h2><h3 id="公共外牆的外牆磁磚有無洩水貼法"><a href="#公共外牆的外牆磁磚有無洩水貼法" class="headerlink" title="公共外牆的外牆磁磚有無洩水貼法"></a>公共外牆的外牆磁磚有無洩水貼法</h3><p>-</p><h3 id="浴室要施泉防水工程，起碼要一底兩度的上防水漆"><a href="#浴室要施泉防水工程，起碼要一底兩度的上防水漆" class="headerlink" title="浴室要施泉防水工程，起碼要一底兩度的上防水漆"></a>浴室要施泉防水工程，起碼要一底兩度的上防水漆</h3><ul><li>轉角須加強</li></ul><h2 id="監公要看什麼"><a href="#監公要看什麼" class="headerlink" title="監公要看什麼"></a>監公要看什麼</h2><h3 id="鋼筋要依結構設計圖，看有無少綁"><a href="#鋼筋要依結構設計圖，看有無少綁" class="headerlink" title="鋼筋要依結構設計圖，看有無少綁"></a>鋼筋要依結構設計圖，看有無少綁</h3><ul><li>灌水泥前也要看是否有雜物</li><li>每一車水泥在灌漿前都要測試氯離子含量、坍度測試，太稀的水泥缺乏堅固的強度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>實作網站阻止多重登入</title>
      <link href="/2020/08/04/block-multi-login/"/>
      <url>/2020/08/04/block-multi-login/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>網紅啾啾鞋日前在他的 youtube 上放了個影片 [embed]<a href="https://www.youtube.com/watch?v=bXCZSx60NXk%5C%5B/embed%5C%5D">https://www.youtube.com/watch?v=bXCZSx60NXk\[/embed\]</a> 說明他在 hahow 的線上課程在蝦皮上被盜賣的事情</p><p>其中影片的最後甚至實際測試了一波 發現 hahow 在網站上並無做多重登入的阻擋 也就是說 某A 和 某B 是可以同時登入同一個帳號來觀看線上課程 進而影響到內容創作者的權益</p><p>其實我覺得這種事是見人見智啦 就像是我買了一本書後 我也可以把這本書借給其他人讀 或是開個讀書會 大家一起讀</p><p>不過不管怎樣樣 多重登入就是不對 現在像是 Netflix、KKbox、PPT 等都有做多重登入的阻擋 就讓我們來看看怎麼阻擋多重登入吧</p><h2 id="粗流"><a href="#粗流" class="headerlink" title="粗流"></a>粗流</h2><p>以下說明一下大致的流程</p><p>[step]1[&#x2F;step] <code>某 A</code> 登入帳號時，建立 session 紀錄下 <code>Session ID</code> 及 <code>User ID</code></p><p>[step]2[&#x2F;step] <code>某 B</code> 登入時，檢查 session，查看其 <code>User ID</code> 是否已經登入 若有，則清除該 session，並新增 <code>User ID</code> 至 session 內 若無，則直接新增 <code>User ID</code> 至 session 內</p><p>[step]3[&#x2F;step] 加入即時檢查 user 是否仍在登入狀態的確認機制</p><h2 id="程式碼-ORM以-meedo-為例"><a href="#程式碼-ORM以-meedo-為例" class="headerlink" title="程式碼 (ORM以 meedo 為例)"></a>程式碼 (ORM以 meedo 為例)</h2><h3 id="第一洞，建立-session-table"><a href="#第一洞，建立-session-table" class="headerlink" title="第一洞，建立 session table"></a>第一洞，建立 session table</h3><p>欄位有: id、session_id、user_id</p><h3 id="第二洞，每次登入時呼叫-checkPreviousLogin-確認是否有用同一帳號登入過，並回傳前一個登入者的-user-id"><a href="#第二洞，每次登入時呼叫-checkPreviousLogin-確認是否有用同一帳號登入過，並回傳前一個登入者的-user-id" class="headerlink" title="第二洞，每次登入時呼叫 checkPreviousLogin 確認是否有用同一帳號登入過，並回傳前一個登入者的 user_id"></a>第二洞，每次登入時呼叫 <code>checkPreviousLogin</code> 確認是否有用同一帳號登入過，並回傳前一個登入者的 user_id</h3><pre><code class="php">public static function checkPreviousLogin($sid, $currentUserID)&#123;    $previousLoginUserID = mh()-&gt;get(&#39;session&#39;, [        &quot;userID&quot;    ], [        &quot;session_id[!]&quot; =&gt;$sid,        &quot;userID&quot; =&gt; $currentUserID    ]);    return $previousLoginUserID;&#125;</code></pre><h3 id="第三洞，若有重複登入，清除該筆-session，並在本筆-session-內加入-errorMessage"><a href="#第三洞，若有重複登入，清除該筆-session，並在本筆-session-內加入-errorMessage" class="headerlink" title="第三洞，若有重複登入，清除該筆 session，並在本筆 session 內加入 errorMessage"></a>第三洞，若有重複登入，清除該筆 session，並在本筆 session 內加入 errorMessage</h3><pre><code class="php">public static function kickOut($previousUserID)&#123;    mh()-&gt;delete(&#39;session&#39;, [        &#39;userID&#39; =&gt; $previousUserID    ]);    return true;&#125;f3()-&gt;set(&#39;SESSION.statusMsg&#39;, [&quot;xxxxx重複登入xxxxxx，xxxxxxxxxxx&quot;]);</code></pre><h3 id="第四洞，將-session-id-與對應的-user-id-寫入-session-表內"><a href="#第四洞，將-session-id-與對應的-user-id-寫入-session-表內" class="headerlink" title="第四洞，將 session_id 與對應的 user_id 寫入 session 表內"></a>第四洞，將 session_id 與對應的 user_id 寫入 session 表內</h3><pre><code class="php">public static function updateUserID($sid, $currentUserID)&#123;    mh()-&gt;update(&#39;session&#39;, [        &#39;userID&#39; =&gt; $currentUserID,        &#39;stamp&#39; =&gt; time()    ], [        &#39;session_id&#39; =&gt; $sid    ]);    return true;&#125;</code></pre><h3 id="第五洞，檢查在-session-內是否有-errorMessage"><a href="#第五洞，檢查在-session-內是否有-errorMessage" class="headerlink" title="第五洞，檢查在 session 內是否有 errorMessage"></a>第五洞，檢查在 session 內是否有 errorMessage</h3><p>若有，則代表已重複登入，系統會顯示把前一個登入者踢掉的訊息，並把該 errorMessage 清掉</p><pre><code class="php">$msg = f3()-&gt;get(&#39;SESSION.statusMsg&#39;);if (!empty($msg)) &#123;    $output[&#39;msg&#39;] = $msg;    f3()-&gt;clear(&#39;SESSION.statusMsg&#39;);&#125;</code></pre><h3 id="第六洞，每三分鐘檢查是否仍登入，若否，則-redirect-至首頁"><a href="#第六洞，每三分鐘檢查是否仍登入，若否，則-redirect-至首頁" class="headerlink" title="第六洞，每三分鐘檢查是否仍登入，若否，則 redirect 至首頁"></a>第六洞，每三分鐘檢查是否仍登入，若否，則 redirect 至首頁</h3><pre><code class="javascript">checkDoubleLogin() &#123;    if (app.member.loginCheckTimer !== undefined) &#123;        return;    &#125;    app.member.loginCheckTimer = window.setInterval(function() &#123;        let callback = function() &#123;            if (this.code === 0) &#123;                return;            &#125; else &#123;                app.modal.show(&#123;                    src: &#39;message-modal&#39;,                    message: &#123;                        content: &#39;系統偵測帳戶已重複登入，將在三秒後強制登出&#39;,                    &#125;                &#125;);                setTimeout(function() &#123;                    window.location.href = `$&#123;window.location.origin&#125;/home`;                &#125;, 3000);            &#125;        &#125;;        gee.yell(&quot;member/check&quot;, &#123;&#125;, callback, callback)    &#125;, 180000);&#125;,</code></pre><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://medoo.in/doc">https://medoo.in/doc</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> Javascript </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 SSH 遠端連線 GCP Bitnami Wordpress 操作 PhpMyAdmin</title>
      <link href="/2020/07/09/use-ssh-to-connect-gcp-bitnami-wordpress-phpmyadmin/"/>
      <url>/2020/07/09/use-ssh-to-connect-gcp-bitnami-wordpress-phpmyadmin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>繼<a href="https://growingdna.com/wordpressgcpssl-free-website-tutorial/">上篇文章</a>後 想必大家已經知道如果免費在 GCP 上架一個 Wordpress 網站 但為了進階活用 Wordpress 各位可能會須要進資料庫操作、使用 FTP 管理檔案 因此我們必須要使用 SSH 來遠端連線在 GCP 上打造的 Bitnami Wordpress 範本 進而更流暢地管理我們的 Wordpress</p><h2 id="執行步驟"><a href="#執行步驟" class="headerlink" title="執行步驟"></a>執行步驟</h2><h3 id="一、於本機-local-端產生-SSH-public-private-key"><a href="#一、於本機-local-端產生-SSH-public-private-key" class="headerlink" title="一、於本機 local 端產生 SSH (public&#x2F;private) key"></a>一、於本機 local 端產生 SSH (public&#x2F;private) key</h3><p>以下以 MacOs 為例 [step]1[&#x2F;step] 打開 terminal 並鍵入以下指令 <code>ssh-keygen -t rsa -C &quot;bitnami@SERVER-IP&quot;</code></p><ul><li><p>上面的 <code>SERVER-IP</code> 要換成自己的喔 可以在 GCP 裡的 <code>VM 執行個體</code> 裡找到 <img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594286898882.png" alt="file"></p></li><li><p>若出現 <code>Enter file in which to save the key (/Users/xxx/.ssh/id_rsa)</code> 這邊可以自行修改生成的 SSH Key 要放在哪</p></li><li><p>若出現 <code>“Enter passphrase (empty for no passphrase)</code> 是可以自行設定 <code>passphrase</code> 經實測 沒有輸入亦可以連線</p></li></ul><p>[step]2[&#x2F;step] 若成功的話應該會出現類似以下畫面<br><img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594286919146.png" alt="file"> 並產生兩個檔案 <code>id_rsa</code> (private key)、<code>id_rsa.pub</code> (public key)</p><h3 id="二、上傳-public-key-到-GCP-VM"><a href="#二、上傳-public-key-到-GCP-VM" class="headerlink" title="二、上傳 public key 到 GCP VM"></a>二、上傳 public key 到 GCP VM</h3><p>[step]1[&#x2F;step] 進入 GCP 的 VM 執行個體 點選 <code>編輯</code> <img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594286950842.png" alt="file"></p><p>找到 <code>SSH 金鑰</code> 後，點選 新增項目 並在格子內貼上 <code>id_rsa</code> 的內容 此時左邊就會自動出現 <code>bitnami</code> 字樣 <img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594286972015.png" alt="file"></p><p>[step]2[&#x2F;step] 最後拉到最下面點選 <code>儲存</code> 就完成上傳 public key 囉</p><h3 id="三、使用-private-key-連線"><a href="#三、使用-private-key-連線" class="headerlink" title="三、使用 private key 連線"></a>三、使用 private key 連線</h3><p>[step]1[&#x2F;step] 這邊要先把原來的 <code>id_rsa</code> 轉成 <code>.pem</code> 格式 請在 terminal 輸入 <code>ssh-keygen -f my-rsa-key -m pem -p</code> 這樣就會生成一個 <code>.pem</code> 的檔案 應該會長成像是 <code>id_rsa.pem</code> <img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594287007866.png" alt="file"></p><p>[step]2[&#x2F;step] 在 terminal 輸入 <code>ssh -N -L 8888:127.0.0.1:80 -i KEYFILE bitnami@SERVER-IP</code> 上面的 <code>KEYFILE</code> 要放入你放 <code>id_rsa.pem</code> 的路徑 而 <code>SERVER-IP</code> 就是放你的 Bitnami Wordpress 在 GCP VM 裡的 external IP (ps. 官方是說如果是https的話 80 port 就要改成 443 port)</p><p>[step]3[&#x2F;step] 成功的話什麼都不會發生</p><p>此時在 browser 輸入 <code>http://127.0.0.1:8888/phpmyadmin/</code> 就可以看到熟悉的 PhpMyAdmin 囉 <img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594287145017.png" alt="file"></p><p>這邊的帳密就是</p><pre><code class="markdown">ID: rootPW: 建 Bitnami Wordpress 時 GCP 顯示的密碼</code></pre><p>其中的 PW 可以在 GCP 裡的 Deployment Manager 裡找到 <img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594287048590.png" alt="file"></p><p>然後就可以看到我們 Wordpress 裡的所有 資料庫內容啦! 恭喜! <img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594287238950.png" alt="file"> <img src="https://growingdna.com/wp-content/uploads/2020/07/image-1594287242714.png" alt="file"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>bitnami 官方文件 <a href="https://docs.bitnami.com/google/apps/wordpress-pro/get-started/connect-mysql/">https://docs.bitnami.com/google/apps/wordpress-pro/get-started/connect-mysql/</a> <a href="https://docs.bitnami.com/google/faq/get-started/connect-ssh/#obtain-ssh-credentials">https://docs.bitnami.com/google/faq/get-started/connect-ssh/#obtain-ssh-credentials</a> <a href="https://docs.bitnami.com/google/apps/wordpress-pro/get-started/access-phpmyadmin/">https://docs.bitnami.com/google/apps/wordpress-pro/get-started/access-phpmyadmin/</a></li><li>bitnami 官方推薦生成 public&#x2F;private key 方法 <a href="https://www.macworld.co.uk/how-to/mac-software/how-generate-ssh-keys-3521606/">https://www.macworld.co.uk/how-to/mac-software/how-generate-ssh-keys-3521606/</a></li><li>rsa 轉 pem <a href="https://gist.github.com/mingfang/4aba327add0807fa5e7f">https://gist.github.com/mingfang/4aba327add0807fa5e7f</a></li></ul><h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><p>註1: Google 有一年的免費額度，請不要來戰。 註2: 使用 FTP 應該也是差不多的概念，有機會再來試試後分享給大家</p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> 技術筆記 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Laradock 跑多個 Laravel 專案</title>
      <link href="/2020/06/19/laradock-setup-for-multiple-projects/"/>
      <url>/2020/06/19/laradock-setup-for-multiple-projects/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Laradock 是一個用 Docker 打造完成的 PHP 開發環境 就像是在<a href="https://laradock.io/">官網</a>所說的</p><blockquote><p>先會用 Docker，至於 Docker 是什麼就晚點再說吧!</p></blockquote><p>所以就讓我們照以下步驟 迅速使用 Docker 開發 Laravel 吧!</p><h2 id="實作步驟"><a href="#實作步驟" class="headerlink" title="實作步驟"></a>實作步驟</h2><h3 id="環境設置"><a href="#環境設置" class="headerlink" title="環境設置"></a>環境設置</h3><ol><li>裝好 <a href="https://git-scm.com/downloads">Git</a></li><li>裝好 <a href="https://docs.docker.com/docker-for-mac/install/">Docker</a></li></ol><h3 id="實際安裝"><a href="#實際安裝" class="headerlink" title="實際安裝"></a>實際安裝</h3><p>Follow <a href="https://laradock.io/getting-started/">官網</a> 說明直接操作下去就完成啦! 因為官網說明已經滿完整了 所以以下就是針對我自己遇到的坑做一些小提醒</p><h3 id="小提醒"><a href="#小提醒" class="headerlink" title="小提醒"></a>小提醒</h3><p>由於我們想使用同一個 Docker 來跑多個 Laravel 專案 以下就以 <code>B) Setup for Multiple Projects:</code> 為例</p><ol><li><p>資料夾結構 為了同一個 Docker 跑多個專案 所以資料夾結構會是</p><pre><code>* laradock* project-1* project-2</code></pre><p>我的實際結構是</p><pre><code>~/Sites/laradock~/Sites/Projects/laravel~/Sites/Projects/paymechien</code></pre></li><li><p>host 設置</p><pre><code>127.0.0.1  project-1.test  // 注意這邊有 `.test` 喔127.0.0.1  project-2.test  // 注意這邊有 `.test` 喔</code></pre></li><li><p>Laradock 下的 <code>.env</code> 設置 搭配我的實際結構 所以這邊要寫成 <code>APP_CODE_PATH_HOST=~/Sites/Projects</code></p></li><li><p>PhpMyAdmin 相關 我的 <code>PhpMyAdmin</code> 不知為何一開始登不進去 後來發現是版本問題 所以要在 <code>.env</code> 把原來的 <code>MYSQL_VERSION=latest</code> 改成 <code>MYSQL_VERSION=5.7</code></p><blockquote><p>順帶一提，DB的帳密就是上述設定的下面幾行 不要 key 錯囉 (預設帳號、密碼都是 root)</p></blockquote></li></ol><ul><li><p>在專案底下的 .env 檔 DB_HOST 要改成 <code>DB_HOST=mysql</code> 然後 DB_USERNAME 及 DB_PASSWORD 都要</p><pre><code>DB_CONNECTION=mysqlDB_HOST=mysqlDB_PORT=3306DB_DATABASE=paymentDB_USERNAME=rootDB_PASSWORD=root</code></pre></li><li><p>進入 PhpMyAdmin 的方法 在 laradock 底下的 .env 裡有定義 PhpMyAdmin 的 port 預設是 8082 所以若要進入 PhpMyAdmin 的話 就是在 domain 後面加上 port 號即可 eg. <a href="http://abc.test:8082/">http://abc.test:8082</a></p></li></ul><ol start="5"><li><p>專案一直出現 500 error 問題 注意在官網文件裡有說 要把 root 設對 <img src="https://growingdna.com/wp-content/uploads/2020/06/image-1592534541271.png" alt="file"> 以我的 case 為例，就要設成下面這樣: [專案1] <img src="https://growingdna.com/wp-content/uploads/2020/06/image-1592534554965.png" alt="file"> [專案2] <img src="https://growingdna.com/wp-content/uploads/2020/06/image-1592534563776.png" alt="file"></p></li><li><p>還是出現 500 error 如果上述還是不行的話 那可能就是因為你是用原來就寫好的專案 (我就是這樣 QQ) 所以沒有把專案的 <code>.env</code> 給commit 上去 以致 laradock 吃不到 然後就 GG了 所以解法就是 在專案資料夾內下 <code>cp .env.example .env</code> 然後生成新的 key <code>php artisan key:generate</code> 這樣就完成啦!</p></li></ol><blockquote><p>ps. 如果出現以下error</p><pre><code>PHP Warning: require(/home/matynjr/events/vendor/autoload.php): failed to open stream: No such file or directory in /home/matynjr/events/artisan on line 18PHP Fatal error: require(): Failed opening required &#39;/home/matynjr/events/vendor/autoload.php&#39; (include_path=&#39;.:/usr/share/php&#39;) in /home/matynjr/events/artisan on line 18</code></pre><p>那就是composer太舊，跑一下 <code>composer update</code> 就好了</p></blockquote><p>最後再 run 一下 <code>docker-compose up -d nginx mysql</code> 看到畫面就ok囉! <img src="https://growingdna.com/wp-content/uploads/2020/06/image-1592534640172.png" alt="file"> <img src="https://growingdna.com/wp-content/uploads/2020/06/image-1592534644249.png" alt="file"></p><ol start="7"><li>無法跑 php artisan migrate 目前發現好像是要進入容器才能運作 (不知道是不是因為有複數專案的關係) 所以要進入容器內下指令 <code>docker-compose exec workspace bash</code> 然後再下 <code>root@xxx6:/var/www# php artisan migrate</code></li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實我本來是用 <a href="https://laravel.com/docs/7.x/valet">Valet</a> 當做本地的開發環境 但由於 Laradock 真的太潮了 又可以確保開發者大家的開發環境一致 自己使用後又發現一些小坑 所以就來分享一下，希望可以幫助到大家!</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考:"></a>參考:</h2><p><a href="https://medium.com/@yfancc20/laradock-%E8%BC%95%E9%87%8F-laravel-%E7%92%B0%E5%A2%83%E7%9A%84%E5%98%97%E8%A9%A6-%E5%B8%B8%E8%A6%8B%E9%8C%AF%E8%AA%A4-2fc6f0c21433">https:&#x2F;&#x2F;medium.com&#x2F;@yfancc20&#x2F;laradock-%E8%BC%95%E9%87%8F-laravel-%E7%92%B0%E5%A2%83%E7%9A%84%E5%98%97%E8%A9%A6-%E5%B8%B8%E8%A6%8B%E9%8C%AF%E8%AA%A4-2fc6f0c21433</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>藍新金流 openssl_encrypt(): Unknown cipher algorithm</title>
      <link href="/2020/05/21/newebpay-openssl-encrypt-unknown-cipher-algorithm-2/"/>
      <url>/2020/05/21/newebpay-openssl-encrypt-unknown-cipher-algorithm-2/</url>
      
        <content type="html"><![CDATA[<h1 id="藍新金流-openssl-encrypt-Unknown-cipher-algorithm"><a href="#藍新金流-openssl-encrypt-Unknown-cipher-algorithm" class="headerlink" title="藍新金流 openssl_encrypt(): Unknown cipher algorithm"></a>藍新金流 openssl_encrypt(): Unknown cipher algorithm</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近因應網站 PHP 版本升級 結果一堆原來的 <code>function</code> 壞掉不能使用 下面就記一個坑</p><h2 id="實例"><a href="#實例" class="headerlink" title="實例"></a>實例</h2><p>比如說 串藍新金流 API 時所需的 <code>mcrypt_decrypt()</code> 就被 PHP 從 <code>7.2.0</code> 之後拿掉 找了一下新的文件發現有一個新 <code>function</code> &#x3D;&gt; <code>(openssl_decrypt()</code> (文件參考: <a href="https://www.spgateway.com/WebSiteData/document/5.pdf">https://www.spgateway.com/WebSiteData/document/5.pdf</a>)</p><p>欸~很高興直接拿來用一波 結果發現竟然報錯</p><pre><code>openssl_encrypt(): Unknown cipher algorithm</code></pre><p>走訪了估狗大神 試了各種方法 才發現是因為官方文件是寫</p><pre><code class="php">function create_mpg_aes_encrypt ($parameter = &quot;&quot; , $key = &quot;&quot;, $iv = &quot;&quot;) &#123;     $return_str = &#39;&#39;;     if (!empty($parameter)) &#123;     //將參數經過 URL ENCODED QUERY STRING     $return_str = http_build_query($parameter);     &#125;     return trim(bin2hex(openssl_encrypt(addpadding($return_str), &#39;aes-256-    cbc&#39;, $key, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv))); &#125;function addpadding($string, $blocksize = 32) &#123; $len = strlen($string); $pad = $blocksize - ($len % $blocksize); $string .= str_repeat(chr($pad), $pad); return $string; &#125;</code></pre><p>但!!!</p><p><code>&#39;aes-256-cbc&#39;</code> 這段不能斷行空格啊!</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>把下面這個</p><pre><code class="php">     return trim(bin2hex(openssl_encrypt(addpadding($return_str), &#39;aes-256-    cbc&#39;, $key, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv)));</code></pre><p>給改成下面這個</p><pre><code class="php">     return trim(bin2hex(openssl_encrypt(addpadding($return_str), &#39;aes-256-cbc&#39;, $key, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv)));</code></pre><p>就好了</p><p>真心傻眼 真的是經驗太淺 以後真的不能直接複製貼上 紀錄一波 囧</p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>現代前端渲染機制: SSR vs. CSR</title>
      <link href="/2020/04/28/ssr-versus-csr/"/>
      <url>/2020/04/28/ssr-versus-csr/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>雖然是在當後端工程師 但不知怎的還是一直碰到前端渲染的東西…… 不過沒關係 多學多健康 就讓我們來看看所謂 <code>SSR (Server Side Render 後端渲染)</code> 以及 <code>CSR (Client Side Render 前端渲染)</code> 兩者到底有什麼不同、優劣勢在哪，以及分別會被應用在什麼地方吧!</p><h2 id="渲染機制"><a href="#渲染機制" class="headerlink" title="渲染機制"></a>渲染機制</h2><ul><li><p>SSR: 渲染結果於 Server 產生 意即 browser 在接到 server 傳來的資料時 收到的就是完整的、渲染過後的HTML</p></li><li><p>CSR: 渲染結果於 Browser 產生 意即 browser 在接受到 server 傳來的資料時 收到的是 data (通常是json格式) 以及 template 須要透過 JS 才會渲染成 HTML</p></li><li><p>圖解 <img src="https://growingdna.com/wp-content/uploads/2020/04/image-1588073450595.png" alt="file"></p></li></ul><h2 id="影響"><a href="#影響" class="headerlink" title="影響"></a>影響</h2><h3 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h3><ul><li><p>SSR: 有利 由於 browser 是拿到渲染後、可以直接展示的結果 意即，server 端傳到 browser 時傳送的是一個”真實”的頁面 因此，當爬蟲爬到該頁面時，就可以分析這個頁面 並進一步 index 頁面中的關鍵資料，於是有利 SEO</p></li><li><p>CSR: 不利 有別於 SSR CSR 從上圖可知，browser 在展示完整頁面的過程中會發起兩次請求 也就是說，爬蟲爬到該頁面時，無法拿到完整的資料並進行解析 因此不利於 SEO</p></li></ul><h3 id="效能"><a href="#效能" class="headerlink" title="效能"></a>效能</h3><ul><li><p>SSR: “組版”的工作發生在 server，所以對 server 負擔較重</p></li><li><p>CSR: “組版”的工作發生在 browser，所以對 browser 負擔較重 每次更新時只更新資料，所以使用者感覺速度較快</p></li></ul><h3 id="頁面應用"><a href="#頁面應用" class="headerlink" title="頁面應用"></a>頁面應用</h3><ul><li><p>SSR: 主內容 由於需要 SEO</p></li><li><p>CSR: 廣告、個人化內容 由於畫面更新頻率較高或不須 SEO</p></li></ul><h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><p><img src="https://growingdna.com/wp-content/uploads/2020/04/image-1588073427754.png" alt="file"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://medium.com/@hulitw/introduction-mvc-spa-and-ssr-545c941669e9">https:&#x2F;&#x2F;medium.com&#x2F;@hulitw&#x2F;introduction-mvc-spa-and-ssr-545c941669e9</a> <a href="https://noob.tw/client-server-side-render/">https://noob.tw/client-server-side-render/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初探 Docker: 從 Dockerfile、Docker Compose 說起</title>
      <link href="/2020/04/08/docker-intro/"/>
      <url>/2020/04/08/docker-intro/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在研究公司的 dockerfile、docker-compose和相關 config 檔 順手筆記一下，希望在加深印象之餘 也可以讓有同樣初學者有一個大概的藍圖</p><h2 id="關係圖"><a href="#關係圖" class="headerlink" title="關係圖"></a>關係圖</h2><p><img src="https://growingdna.com/wp-content/uploads/2020/04/image-1586334903677.png" alt="file"> 從上圖可以看到 <code>Dockerfile</code> 會生成 <code>Docker Image</code> 所謂的 <code>Image</code>，就是生產 <code>Container</code> 的模版 而 <code>Container</code> 則是透過 <code>Image</code> 產生隔離的執行環境 是一組利用 Linux 核心提供的技術來達到把程式或軟體「包裹」在一個可隔離且獨立執行環境的工具 (以下也會把 <code>Container</code> 提供的服務描述為 <code>service</code>) 而 Docker 就是用來管理這些 Container 的工具</p><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><p>可以想像是一個腳本 作用在於當我們的 project 想要一次運作多個 service 的時候 我們就得一個一個啟動 container 這麼曠日費時的工作 當然要外包出去啊</p><p>所以就有 <code>Docker-compose</code> 就像上面所說的，可以把它想像成是一個腳本 原來設定我們的 project 所需的環境，以及它會用到的 service 們</p><p>比如說 docker-compose.yml (YAML 檔案格式，使用空格來縮排，附檔名為 .yml）</p><pre><code class="yml">version: &#39;3&#39; # 目前使用的版本，可以參考官網：services: # services 關鍵字後面列出 web, redis 兩項專案中的服務  web:    build: . # Build 在同一資料夾的 Dockerfile（描述 Image 要組成的 yaml 檔案）成 container    ports:      - &quot;5000:5000&quot; # 外部露出開放的 port 對應到 docker container 的 port    volumes:      - .:/code # 要從本地資料夾 mount 掛載進去的資料    links:      - redis # 連結到 redis，讓兩個 container 可以互通網路  redis:    image: redis # 從 redis image build 出 container</code></pre><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>在 <code>Docker-compose</code> 裡有寫到 <code>Dockerfile</code> 我們可以說 <code>Docker-compose</code> 提供了環境的設定 而 <code>Dockerfile</code> 就是在完成環境設定後，執行的 “指令”</p><p>一個簡單的 Dockerfile 如下</p><pre><code class="yml">FROM centos:7 # FROM: 使用到的 Docker Image 名稱，今天使用 CentOSRUN yum install -y wget # RUN 指令後面放 Linux 指令，用來執行安裝和設定這個 Image 需要的東西RUN cd /ADD jdk-8u152-linux-x64.tar.gz / # ADD: 把 Local 的檔案複製到 Image 裡，如果是 tar.gz 檔複製進去 Image 時會順便自動解壓縮。RUN wget http://apache.stu.edu.tw/tomcat/tomcat-7/v7.0.82/bin/apache-tomcat-7.0.82.tar.gzRUN tar zxvf apache-tomcat-7.0.82.tar.gzENV JAVA_HOME=/jdk1.8.0_152 # ENV: 用來設定環境變數ENV PATH=$PATH:/jdk1.8.0_152/binCMD [&quot;/apache-tomcat-7.0.82/bin/catalina.sh&quot;, &quot;run&quot;] # CMD: 在指行 docker run 的指令時會直接呼叫開啟 Tomcat Service</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://philipzheng.gitbook.io/docker_practice/dockerfile/basic_structure">https://philipzheng.gitbook.io/docker_practice&#x2F;dockerfile&#x2F;basic_structure</a> <a href="https://hackmd.io/@titangene/docker-lamp">https:&#x2F;&#x2F;hackmd.io&#x2F;@titangene&#x2F;docker-lamp</a> <a href="https://blog.techbridge.cc/2018/09/07/docker-compose-tutorial-intro/">https://blog.techbridge.cc/2018/09/07/docker-compose-tutorial-intro/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【景氣循環投資】- 讀後感</title>
      <link href="/2020/03/08/business-cycle-investment/"/>
      <url>/2020/03/08/business-cycle-investment/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近美股波動神大 除了武漢肺炎的衝擊外 同時<a href="https://www.bnext.com.tw/article/56871/saudi-oil-price-war-">石油大戰</a>又迫在眉捷 油價一度掉到$30以下 投資人一度恐慌 美股甚至啟動23年來首見的<a href="https://www.businessweekly.com.tw/focus/blog/3001930">熔斷機制</a> 熱血之餘 得好好來充實自己 同時筆記一下重點 紀錄一下這本<a href="https://growingdna.com/cycle-investment">景氣循環投資</a>的重點要義 免的看完後忘一波 白白浪費了研究的時間XD <a href="https://growingdna.com/cycle-investment"><img src="https://growingdna.com/wp-content/uploads/2020/03/20191129201210037_1000-400x400.jpg" alt="cycle-investment"></a></p><h2 id="景氣循環四階段"><a href="#景氣循環四階段" class="headerlink" title="景氣循環四階段"></a>景氣循環四階段</h2><p>作者愛謝克觀察過去幾十年來的市場循環波動 總結出了景氣循環的4個時期 並針對各階段提出相對應的關鍵指標及投資建議 其4時期分別是:</p><ol><li>復甦期</li><li>成長期</li><li>榮景期</li><li>衰退期</li></ol><p>其中 復甦期、成長期、榮景期為<code>景氣擴張</code>時期 佔1個景氣循環的3&#x2F;4 而衰退期，則為<code>景氣收縮</code>時期 佔1個景氣循環的1&#x2F;4 每一個時期都有其特點和投資方式 以下就簡單分點記下 對作者的推論過程及資料來源 有興趣的捧油可以買書來讀讀</p><h3 id="一、-復甦期"><a href="#一、-復甦期" class="headerlink" title="一、 復甦期"></a>一、 復甦期</h3><blockquote><p>景氣收縮期過渡之擴張期 投資布局最佳時機</p></blockquote><h4 id="判斷復甦期關鍵4指標"><a href="#判斷復甦期關鍵4指標" class="headerlink" title="判斷復甦期關鍵4指標"></a>判斷復甦期關鍵4指標</h4><ol><li>就業: 「初領失業救濟金人數」和「短期失業人數」改善</li><li>消費: 「個人耐久財消費」與「零售銷售」落底反轉</li><li>投資: 「耐久財訂單」走出低迷</li><li>進出口:「進口金額年增率」回溫</li></ol><p>※以上指標資料皆可至<a href="https://fred.stlouisfed.org/">聖路易聯邦儲備銀行</a>找到</p><h4 id="投資法"><a href="#投資法" class="headerlink" title="投資法"></a>投資法</h4><ol><li>現金不可為王 &#x3D;&gt; 勇敢錢進股市</li><li>把握最佳轉換期 &#x3D;&gt; 布局高收益債、原物料</li></ol><h3 id="二、-成長期"><a href="#二、-成長期" class="headerlink" title="二、 成長期"></a>二、 成長期</h3><blockquote><p>景氣回歸正常軌道 適合安心長線布局</p></blockquote><h4 id="4大現象確認景氣進入成長期"><a href="#4大現象確認景氣進入成長期" class="headerlink" title="4大現象確認景氣進入成長期"></a>4大現象確認景氣進入成長期</h4><ol><li><p>撙節開支結束</p><blockquote><p>遞延消費挹注內需動能成長</p></blockquote></li><li><p>就業增長顯著改善</p><blockquote><p>民間消費穩定擴增</p></blockquote></li><li><p>民間投資擴張</p><blockquote><p>迎來固定資本投入與房地產熱潮</p></blockquote></li><li><p>通膨回升至可持續增長水準</p><blockquote><p>鞏固消費與投資信心</p></blockquote></li></ol><h4 id="投資法-1"><a href="#投資法-1" class="headerlink" title="投資法"></a>投資法</h4><blockquote><p>沉穩規劃策略 持續買進與持有風險資產</p></blockquote><ol><li>股市: 最佳投資標的</li><li>高收益債: 違約率低，可持續買進</li></ol><h3 id="三、榮景期"><a href="#三、榮景期" class="headerlink" title="三、榮景期"></a>三、榮景期</h3><blockquote><p>景氣擴張最迷人時期 過度熱絡後走向盛極而衰</p></blockquote><h4 id="7大指標確立榮景期起訖關鍵點"><a href="#7大指標確立榮景期起訖關鍵點" class="headerlink" title="7大指標確立榮景期起訖關鍵點"></a>7大指標確立榮景期起訖關鍵點</h4><ol><li>初領失業救濟金人數: 判讀就業市場是否處於擴張</li><li>民間消費: 消費動能放緩為榮景期落幕敲下定音鎚</li><li>消費者信心指數: 續創新高則美股尚有高點可期</li><li>民間投資: 第2次耐久財支出潮預告榮景期尾聲</li><li>政府支出: 數據顯著增加顯示景氣將從高點反轉</li><li>庫存增減: 景氣擴張期間庫存明顯增加</li><li>債務違約率: 數據上揚 + 緊縮銀根恐觸發景氣轉向</li></ol><h4 id="投資法-2"><a href="#投資法-2" class="headerlink" title="投資法"></a>投資法</h4><ol><li>持續做多，但持股水位最低應為30%</li><li>佈局無風險債券，避開高收益債&amp;原物料</li></ol><h3 id="四、衰退期"><a href="#四、衰退期" class="headerlink" title="四、衰退期"></a>四、衰退期</h3><blockquote><p>透過轉弱、加速、落底等3個階段大幅衰退</p></blockquote><h4 id="緊盯2數據，確認衰退期是否來臨"><a href="#緊盯2數據，確認衰退期是否來臨" class="headerlink" title="緊盯2數據，確認衰退期是否來臨"></a>緊盯2數據，確認衰退期是否來臨</h4><ol><li>個人消費支出年增率出氣「2次消費陡降」</li><li>民間投資年增率比經濟成長率更早反轉</li></ol><h4 id="留意3指標，判斷景氣是否落底"><a href="#留意3指標，判斷景氣是否落底" class="headerlink" title="留意3指標，判斷景氣是否落底"></a>留意3指標，判斷景氣是否落底</h4><ol><li>民間投資: 動能轉強是推動景氣谷底止穩的關鍵</li><li>民間消費: 數據轉強是景氣落底轉強的重要基石</li><li>採購經理人指數: 觸底回升即景氣擴張倒數計時</li></ol><h4 id="投資法-3"><a href="#投資法-3" class="headerlink" title="投資法"></a>投資法</h4><blockquote><p>持有債券+美元 把握股市低檔佈局時機</p></blockquote><p>債市為保守投資人的理想避風港 同時股市為絕佳的入市時間 應分批佈局、把氣拉長 而美金也將因為避險的心態而升值 可以考慮持有</p><h2 id="投資組合-階段式股債均衡配置"><a href="#投資組合-階段式股債均衡配置" class="headerlink" title="投資組合: 階段式股債均衡配置"></a>投資組合: 階段式股債均衡配置</h2><p>作者建議使用階段式股債均衡配置 除了能夠有較高的收益外 還能夠有效避開市場回檔 以下援引一下作者在【經濟指標告訴你&amp;沒告訴你的事】裡的一段話</p><blockquote><p>所謂【長期投資的價值】，應該把字的的順序做個對換 – 【長期價值的投資】。 為什麼呢? 因為投資之所以能獲利，重點在「價值」，不在「長期」，更不在於「投資」。</p></blockquote><p>我的想法是 因為整個投資的重點在於價值 所以應該要根據各個時期 把有限的金錢放在最有最值的標的上 才能有效提高收益並降低風險 舉例來說 在榮景期間 將第一年的持投比例由100%降至70%(30%債券) 第二年50%(50%債券) 第三年30%(70%債券) 在這之後就不再降底持股比例，直到衰退期的轉折點來到</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>觀察最近的股市變動 頗有再現金融海嘯的趨勢 但若以作者的角度來看 應該是還沒有達到衰退期的程度 但S&amp;P500、道瓊指數不斷下滑 截至今天(3&#x2F;13)為止 S&amp;P 500指數已經從高點3390跌到2480 共掉了27%左右 基本上可以算是一次股災了 看起來是進入衰退期 除非川普大大又要幹啥好事 不然的話真的是在08年次貸風暴後的最新一波金融風暴了吧 至於會再跌到哪呢? 可能要看石油大戰的進展 以及武漢肺炎的特效藥是否能快點問世了囉</p><h2 id="書籍資訊"><a href="#書籍資訊" class="headerlink" title="書籍資訊"></a>書籍資訊</h2><p>書名: 景氣循環投資 作者: 愛謝克 博客來連結: <a href="https://growingdna.com/cycle-investment">點我</a> <a href="https://growingdna.com/cycle-investment"><img src="https://growingdna.com/wp-content/uploads/2020/03/20191129201210037_1000-400x400.jpg" alt="cycle-investment"></a> 內容簡介:</p><pre><code>　　掌握住總體經濟，就能掌握景氣循環　　掌握了景氣循環，就能掌握投資方向　　有了投資方向，獲利自然水到渠成！</code></pre><p>「這本書，作為總體經濟投資哲學三部曲的最終曲，是我窮盡前半生研究景氣循環周期的心血結晶，謹此呈現予你；希望能讓你在總體經濟研究和資產投資的路上有所依循、如虎添翼！」──愛榭克 經濟分析奇才愛榭克於2014年的著作《道瓊3萬點：你不可錯過的世紀大行情》當中，大膽預測美股道瓊工業指數將於2017年～2018年突破2萬5,000點、甚至更高的位置；事實印證，道瓊在2018年漲破2萬6,000點，走出一波當年多數投資人難以想像的波瀾壯闊大行情！ 這段期間，每一次美股創新高，市場總是充滿「即將走入衰退」、「轉折將至」的等雜音，既然景氣會不斷循環，那麼這一波多頭行情還能持續多久？身為投資人，又該怎樣判斷多頭將盡的時間點？ 這一次，愛榭克要繼續帶著讀者站上歷史的制高點，俯視全球最大經濟體──美國，近70年來的經濟與股市變化；從中抽絲剝繭，發掘各個景氣周期萌芽及凋落的線索。你將會知道，只要在每個周期的關鍵時刻，把握住幾項重要的經濟指標，也能在貌似凶險的資本市場，輕易找到安身之處。</p>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>關聯式資料庫建置練習 - 從發票開始</title>
      <link href="/2020/02/28/db-creation-practice/"/>
      <url>/2020/02/28/db-creation-practice/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近工作上需要 得把一張發票上的資料建好放在資料庫裡備存 所以就來把過程給紀錄下來如下</p><h2 id="發票"><a href="#發票" class="headerlink" title="發票"></a>發票</h2><p>假設發票長這個樣子</p><p><img src="https://growingdna.com/wp-content/uploads/2020/03/image-1583736057090.png" alt="file"></p><p>讓我們要怎麼把它給建出來呢? 以下就以我的步驟說明之</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="第一步-將所有需要的欄位列出來"><a href="#第一步-將所有需要的欄位列出來" class="headerlink" title="第一步: 將所有需要的欄位列出來"></a>第一步: 將所有需要的欄位列出來</h3><p><img src="https://growingdna.com/wp-content/uploads/2020/03/image-1583736723379.png" alt="file"> 可以看到是相當長且不易讀 所以我們必須要照資料庫正規化的流程來規劃 細結這邊就不說 只講我的作法</p><h3 id="第二步-建立ER-Model"><a href="#第二步-建立ER-Model" class="headerlink" title="第二步: 建立ER Model"></a>第二步: 建立ER Model</h3><p>為了要讓各 table 之間的關係明確 所以我們可以畫一下 ER Model 來釐清各 table 間的關係 <img src="https://growingdna.com/wp-content/uploads/2020/03/image-1583736206444.png" alt="file"> 其中 <code>1 &lt;---&gt; 1</code> : 代表一對一的關係 <code>1 &lt;---&gt; 多</code> : 代一對多的關係 <code>多 &lt;---&gt; 多</code> :代表多對多的關係，因此必須要多加一個 mapping table 圖中是以 product_order 為名產生mapping table</p><h3 id="第三步-建立-table-與欄位"><a href="#第三步-建立-table-與欄位" class="headerlink" title="第三步: 建立 table 與欄位"></a>第三步: 建立 table 與欄位</h3><p>為了完成 ER Model 的設計 我們產出了6張 table <img src="https://growingdna.com/wp-content/uploads/2020/03/image-1583736783063.png" alt="file"> 當然要再優化或增加欄位都是可行的 但目前這樣子設計已經可以初步完成我們的目的 打完收工!</p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> 技術筆記 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 操作 DOM 並 scrollTop 跳轉至指定位置</title>
      <link href="/2020/02/21/jquery-scrolltop/"/>
      <url>/2020/02/21/jquery-scrolltop/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們在點連結並跳轉到下個頁面後 會想要同時做兩件事 分別是</p><ol><li>更變指定DOM的狀態: 如換色</li><li>移動頁面到指定的位置</li></ol><p>上述兩件事 若分開處理都不困難 以第2項來說 只要在 URL 後面加<code>#</code>就可以了</p><p>比如說 下面這個頁面 <a href="https://lol.gamepedia.com/Kobbe">https://lol.gamepedia.com/Kobbe</a> 若我們要看 Kobbe 這位仁兄的戰果 只要在 URL 後面加上 #Tournament Results 如下 <a href="https://lol.gamepedia.com/Kobbe#Tournament_Results">https://lol.gamepedia.com/Kobbe#Tournament_Results</a> 就可以達成了</p><p>但若我們以上兩件都要完成 而且只能用 URL 來傳遞指定要變更的DOM及位置所需要之參數的話呢?</p><p>下面就來說說我的作法</p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><h3 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h3><p>在 html 標籤裡塞兩個 Hash 並用 <code>&amp;</code> 來隔開</p><p>例:</p><pre><code class="html">&lt;div class=&quot;test&quot;&gt;    &lt;a href=&quot;https://lol.gamepedia.com/Kobbe#Tournament_Results&amp;#media1&quot;&gt;&lt;/a&gt;&lt;/div&gt;</code></pre><p>這邊是要讓頁面跳到 <code>id = &quot;Tournament_Results&quot;</code> 的位置 並讓 <code>id = &quot;1&quot;</code> 的div變紅色</p><h3 id="二、完成js部份"><a href="#二、完成js部份" class="headerlink" title="二、完成js部份"></a>二、完成js部份</h3><p>js我們就可以寫</p><pre><code class="javascript">$(function()&#123;    var hash = $(location).attr(&#39;hash&#39;); // 使用 location function 來取得 #xxxx    var tabid_t = hash.split(&#39;&amp;&#39;); // 使用 split function 來切開 #xxxx    if (tabid_t.length &gt; 1) &#123; // 考慮到其他可能只傳一個 #xxxx 的情形 所以先判斷 length 是否大於 1        var tabid = tabid_t[1].replace(&#39;#media&#39;, &#39;&#39;); // 若是 把第1筆拿出來 而且我只要後面的id 所以用 replace function 來把 #medila 拿掉        $(&#39;#&#39;+tabid).addClass(&#39;red&#39;); // 接著就可以把 id = &quot;1&quot; 的 div 給加一個 class 讓它變紅色了         $(&#39;html, body&#39;).scrollTop($(tabid_t[0]).offset().top); // 同時我們使用 scrollTop function 來移動視窗至指定位置 在這邊是移到第0筆資料的位置    &#125; else &#123;        var tabid = hash.replace(&#39;#media&#39;, &#39;&#39;);        $(&#39;#&#39;+tabid).addClass(&#39;red&#39;);    &#125;&#125;);</code></pre><p>這樣子就完成囉!</p><p>另外 若在滾動畫面的時候要有滑動的效果的話 可以改成以下 function</p><pre><code class="js">$(&#39;html, body&#39;).animate(&#123;    scrollTop: $(tabid_t[0]).offset().top&#125;, 2000); // 2000 是指滾動的秒數</code></pre><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://stackoverflow.com/questions/19012495/smooth-scroll-to-div-id-jquery/22455323">https://stackoverflow.com/questions/19012495/smooth-scroll-to-div-id-jquery/22455323</a> <a href="https://border0902.pixnet.net/blog/post/345456517">https://border0902.pixnet.net/blog/post/345456517</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> Javascript </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP + Laravel 雞排聯盟API實作: 串接歐付寶金流API</title>
      <link href="/2020/02/13/php-laravel-opay-api/"/>
      <url>/2020/02/13/php-laravel-opay-api/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面的幾篇文章中 我們陸續完成了雞排聯盟API的雛型</p><p>那麼 如果我們要新增訂單並以第三方金流結帳的話 要怎麼處理呢?</p><p>以下就以歐付寶的API為範例 介紹如何串接歐付寶的信用卡支付API 達成結帳的效果</p><h2 id="流程簡介"><a href="#流程簡介" class="headerlink" title="流程簡介"></a>流程簡介</h2><p>根據歐付寶官網介紹 <a href="https://developers.opay.tw/AioCreditCard/CreateOrder">https://developers.opay.tw/AioCreditCard/CreateOrder</a> 信用卡金流服務流程如下 <img src="/wp-content/uploads/2020/02/image-1581497616586.png" alt="file"></p><p>而我的文章的大略流程如下:</p><ol><li>clone 歐付寶SDK (什麼SDK? <a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/424027/">參考文章</a>) 並複製到專案資料夾底下</li><li>建立 Controller 並複製 SDK 內的 example 以串接歐付寶API</li><li>建立 <code>Orders</code> table 紀錄交易資料</li><li>建立前台畫面輸入訂單</li><li>實際建立訂單以確認流程ok</li></ol><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="1-clone-歐付寶SDK，並複製到專案資料夾底下"><a href="#1-clone-歐付寶SDK，並複製到專案資料夾底下" class="headerlink" title="1. clone 歐付寶SDK，並複製到專案資料夾底下"></a>1. clone 歐付寶SDK，並複製到專案資料夾底下</h3><p>[step]1[&#x2F;step] clone 歐付寶 SDK URL 如下 <a href="https://github.com/o-pay/Payment_PHP">https://github.com/o-pay/Payment_PHP</a></p><p>[step]2[&#x2F;step] 複製到專案資料夾底下 總共有2個 <img src="/wp-content/uploads/2020/02/image-1581497815085.png" alt="file"></p><h3 id="2-建立-Controller-並複製-SDK-內的-example-以串接歐付寶API"><a href="#2-建立-Controller-並複製-SDK-內的-example-以串接歐付寶API" class="headerlink" title="2. 建立 Controller 並複製 SDK 內的 example 以串接歐付寶API"></a>2. 建立 Controller 並複製 SDK 內的 example 以串接歐付寶API</h3><p>[step]1[&#x2F;step] 在 terminal 內下指令建立 controller</p><pre><code>php artisan make:controller OpayPaymentsController</code></pre><p>[step]2[&#x2F;step] 複製 example 到我們的 controller 裡 首先是付款</p><pre><code class="php">&lt;?phpclass OpayPaymentController extends Controller&#123;/****/    public function pay(Request $request) &#123;    //載入SDK(路徑可依系統規劃自行調整)    include(&#39;Opay.Payment.Integration.php&#39;);    try &#123;        $obj = new OpayAllInOne();        //服務參數        $obj-&gt;ServiceURL  = &quot;https://payment-stage.opay.tw/Cashier/AioCheckOut/V5&quot;;         //服務位置        $obj-&gt;HashKey     = &#39;5294y06JbISpM5x9&#39; ;                                            //測試用Hashkey，請自行帶入OPay提供的HashKey        $obj-&gt;HashIV      = &#39;v77hoKGq4kWxNNIS&#39; ;                                            //測試用HashIV，請自行帶入OPay提供的HashIV        $obj-&gt;MerchantID  = &#39;2000132&#39;;                                                      //測試用MerchantID，請自行帶入OPay提供的MerchantID        $obj-&gt;EncryptType = OpayEncryptType::ENC_SHA256;                                    //CheckMacValue加密類型，請固定填入1，使用SHA256加密        //基本參數(請依系統規劃自行調整)        $MerchantTradeNo = &quot;Test&quot;.time();        $obj-&gt;Send[&#39;ReturnURL&#39;]         = &#39;http://localhost/simple_ServerReplyPaymentStatus.php&#39;; //付款完成通知回傳的網址        $obj-&gt;Send[&#39;MerchantTradeNo&#39;]   = $MerchantTradeNo;                                       //訂單編號        $obj-&gt;Send[&#39;MerchantTradeDate&#39;] = date(&#39;Y/m/d H:i:s&#39;);                                    //交易時間        $obj-&gt;Send[&#39;TotalAmount&#39;]       = 2000;                                                   //交易金額        $obj-&gt;Send[&#39;TradeDesc&#39;]         = &quot;good to drink&quot;;                                        //交易描述        $obj-&gt;Send[&#39;ChoosePayment&#39;]     = OpayPaymentMethod::ALL;                                 //付款方式:全功能        //訂單的商品資料        array_push($obj-&gt;Send[&#39;Items&#39;], array(&#39;Name&#39; =&gt; &quot;歐付寶黑芝麻豆漿&quot;, &#39;Price&#39; =&gt; (int)&quot;2000&quot;,                   &#39;Currency&#39; =&gt; &quot;元&quot;, &#39;Quantity&#39; =&gt; (int) &quot;1&quot;, &#39;URL&#39; =&gt; &quot;dedwed&quot;));        //產生訂單(auto submit至OPay)        $obj-&gt;CheckOut();    &#125; catch (Exception $e) &#123;        echo $e-&gt;getMessage();      &#125;    &#125;&#125;?&gt;</code></pre><p>接著是接收歐付寶 response 的部份</p><pre><code class="php">  public function receive(Request $request) &#123;    //載入SDK(路徑可依系統規劃自行調整)    include(&#39;Opay.Payment.Integration.php&#39;);    try &#123;            $obj = new OpayAllInOne();            /* 服務參數 */            $obj-&gt;HashKey     = &#39;5294y06JbISpM5x9&#39; ;            $obj-&gt;HashIV      =  &#39;v77hoKGq4kWxNNIS&#39; ;            $obj-&gt;MerchantID  = &#39;2000132&#39;;            $obj-&gt;EncryptType = OpayEncryptType::ENC_SHA256;            /* 取得回傳參數 */            $arFeedback = $obj-&gt;CheckOutFeedback();            // 參數寫入檔案            if(true)            &#123;                $sLog_Path  = __DIR__.&#39;/sample_payment_return.log&#39; ; // LOG路徑                $sLog = &#39;+++++++++++++++++++++++++++++++++++++++ 接收回傳參數 &#39; . date(&#39;Y-m-d H:i:s&#39;) . &#39; ++++++++++++++++++++++++++++++++++++++++++++&#39; . &quot;\n&quot;;                $fp=fopen($sLog_Path, &quot;a+&quot;);                fputs($fp, $sLog);                fclose($fp);                $sLog_File =  print_r($arFeedback, true). &quot;\n&quot;;                $fp=fopen($sLog_Path, &quot;a+&quot;);                fputs($fp, $sLog_File);                fclose($fp);            &#125;            echo &#39;1OK&#39; ;    &#125; catch (Exception $e) &#123;        if(true)        &#123;            $sLog_Path  = __DIR__.&#39;/sample_payment_return.log&#39; ; // LOG路徑            $sLog = &#39;+++++++++++++++++++++++++++++++++++++++ 接收回傳參數(ERROR) &#39; . date(&#39;Y-m-d H:i:s&#39;) . &#39; ++++++++++++++++++++++++++++++++++++++++++++&#39; . &quot;\n&quot;;            $fp=fopen($sLog_Path, &quot;a+&quot;);            fputs($fp, $sLog);            fclose($fp);            $sLog_File =  $e-&gt;getMessage(). &quot;\n&quot;;            $fp=fopen($sLog_Path, &quot;a+&quot;);            fputs($fp, $sLog_File);            fclose($fp);        &#125;     &#125;    &#125;</code></pre><p>[step]3[&#x2F;step] 置換掉include</p><p>因為後面會一直include 歐付寶的 SDK 進來 所以這邊一次性置換成 use</p><p>首先是刪掉 example 原本的 use</p><pre><code>//載入SDK(路徑可依系統規劃自行調整)include(&#39;Opay.Payment.Integration.php&#39;);</code></pre><p>接著新增AllPay.Payment.Integration.php到composer.json file</p><pre><code>&quot;autoload-dev&quot;: &#123;    &quot;psr-4&quot;: &#123;        &quot;Tests\\&quot;: &quot;tests/&quot;    &#125;,    &quot;files&quot;: [        &quot;app/AllPay.Payment.Integration.php&quot; // 新增這個files    ]&#125;,</code></pre><p>ps. 有關PSR-4 Autoloader 機制 可以參考以下文章 <a href="http://blog.tonycube.com/2016/09/php-psr-4-autoloader.html">http://blog.tonycube.com/2016/09/php-psr-4-autoloader.html</a> 大概就是說我們直接拿<code>composer</code>的autoload來自動載入對應的檔案</p><p>所以我們接著在 terminal 下 autoload 指令</p><pre><code>composer dump-autoload</code></pre><p>最後我們在 OpayPayment controller 裡 use 會使用到的 class</p><pre><code class="php">&lt;?phpnamespace App\Http\Controllers;use OpayAllInOne;use OpayEncryptType;use Exception;use OpayPaymentMethod;</code></pre><h3 id="3-建立-orders-table-Model-紀錄交易資料"><a href="#3-建立-orders-table-Model-紀錄交易資料" class="headerlink" title="3. 建立 orders table &amp; Model 紀錄交易資料"></a>3. 建立 <code>orders</code> table &amp; Model 紀錄交易資料</h3><p>這邊我們要用最簡單的方法生成訂單相關的 db table 及 model 以簡單達到兩個目的</p><pre><code>1. 能成立訂單2. 能紀錄訂單是否已付款</code></pre><p>[step]1[&#x2F;step] 生成 <code>orders</code> table 我們將使用 migration 在 terminal 內下指令</p><pre><code>php artisan make:model Order -mc</code></pre><ul><li>m: 預產生migration</li><li>c: 預產生controller</li></ul><p>[step]2[&#x2F;step] 完成 migration 內容 首先到剛剛用指令生成的 migration 裡新增我們要的欄位</p><pre><code class="php">class CreateOrdersTable extends Migration&#123;    /**     * Run the migrations.     *     * @return void     */    public function up()    &#123;        Schema::create(&#39;orders&#39;, function (Blueprint $table) &#123;            $table-&gt;increments(&#39;id&#39;);            $table-&gt;string(&#39;name&#39;);            $table-&gt;integer(&#39;user_id&#39;);            $table-&gt;string(&#39;shop_name&#39;);            $table-&gt;string(&#39;item_name&#39;);            $table-&gt;string(&#39;item_description&#39;);            $table-&gt;integer(&#39;unit_price&#39;);            $table-&gt;integer(&#39;quantity&#39;);            $table-&gt;integer(&#39;total_amount&#39;);            $table-&gt;string(&#39;merchant_trade_no&#39;); // 預計拿這個訂單編來當作是PK            $table-&gt;boolean(&#39;status&#39;)-&gt;default(false);            $table-&gt;timestamps();        &#125;);    &#125;    /**     * Reverse the migrations.     *     * @return void     */    public function down()    &#123;        Schema::dropIfExists(&#39;orders&#39;);    &#125;&#125;</code></pre><p>[step]3[&#x2F;step] 執行 migration</p><pre><code>php artisan migrate</code></pre><p>這樣子我們的 <code>orders</code> table 就完成了 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1581562260893.png" alt="file"></p><p>[step]4[&#x2F;step] 完成 Order model 簡單寫兩個方法在裡面 分別是</p><pre><code>1. 成立訂單2. 在付款完成後將status改為1(付款完)</code></pre><p>code 如下</p><pre><code class="php">&lt;?phpnamespace App;use Illuminate\Database\Eloquent\Model;class Order extends Model&#123;    /**     * The attributes that are mass assignable.     *     * @var array     */    public static function createOrder($item) &#123;        $order = new Order();        $order-&gt;name = $item[&#39;order_name&#39;];        $order-&gt;user_id = $item[&#39;user_id&#39;];        $order-&gt;shop_name = $item[&#39;shop_name&#39;];        $order-&gt;item_name = $item[&#39;product_name&#39;];        $order-&gt;item_description = isset($item[&#39;description&#39;]) ? $item[&#39;description&#39;] : &#39;&#39;;        $order-&gt;unit_price = $item[&#39;price&#39;];        $order-&gt;quantity = $item[&#39;qty&#39;];        $order-&gt;total_amount = $item[&#39;price&#39;] * $item[&#39;qty&#39;];        $order-&gt;merchant_trade_no = $item[&#39;merchant_trade_no&#39;];        $order-&gt;save();        return $order;    &#125;    public static function updateOrderStatus($merchant_trade_no) &#123;        $order = Order::where(&#39;merchant_trade_no&#39;, $merchant_trade_no)-&gt;update([&#39;status&#39; =&gt; 1]);        return $order;    &#125;&#125;</code></pre><h3 id="4-建立前台畫面輸入訂單"><a href="#4-建立前台畫面輸入訂單" class="headerlink" title="4. 建立前台畫面輸入訂單"></a>4. 建立前台畫面輸入訂單</h3><p>在前面的文章中我們已經做好註冊&#x2F;登入功能 所以這邊我們就直接把登入後的id 給存到 session 裡 讓後續建訂單時可以存到 db</p><p>[step]1[&#x2F;step] 在 laravel 預設的 <code>welcome.blade.php</code> 新增一個連結到下訂單處 同時把 <code>user_id</code> 給存入 session</p><pre><code class="php">&lt;div class=&quot;links&quot;&gt;    &lt;a href=&quot;&#123;&#123; url('/OpayPayment/') &#125;&#125;&quot;&gt;雞排下單連結&lt;/a&gt;    &lt;a href=&quot;https://github.com/BenmrChen/&quot; TARGET=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;    &lt;?php        if (isset(\Illuminate\Support\Facades\Auth::user()-&gt;id)) &#123;            session()-&gt;put(&#39;user_id&#39;, \Illuminate\Support\Facades\Auth::user()-&gt;id);        &#125;    ?&gt;&lt;/div&gt;</code></pre><p><img src="/wp-content/uploads/2020/02/image-1581565311549.png" alt="file"></p><p>[step]2[&#x2F;step] 新增 route 在 <code>web.php</code> 內</p><pre><code class="php">Route::get(&#39;OpayPayment&#39;, function () &#123;    return view(&#39;OpayPayment&#39;);&#125;);</code></pre><p>在 <code>api.php</code> 內</p><pre><code class="php">Route::post(&#39;pay&#39;, &#39;OpayPaymentController@pay&#39;);Route::post(&#39;receive&#39;, &#39;OpayPaymentController@receive&#39;);</code></pre><p>[step]3[&#x2F;step] 簡單生成一個下單頁面</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;OpayPayment Exercise&lt;/title&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&quot;POST&quot; action=&quot;/api/pay&quot;&gt;    @csrf    &lt;p&gt;店舖名:        &lt;select name=&quot;shop_name&quot; id=&quot;&quot;&gt;            &lt;option value=&quot;TW_No_1&quot;&gt;台灣第一家雞排&lt;/option&gt;            &lt;option value=&quot;World_No_1&quot;&gt;世界第一家雞排&lt;/option&gt;        &lt;/select&gt;    &lt;/p&gt;    &lt;p&gt;雞排種類:        &lt;select name=&quot;product_name&quot; id=&quot;&quot;&gt;            &lt;option name=&quot;chrispy&quot; value=&quot;脆皮雞排&quot;&gt;脆皮雞排&lt;/option&gt;            &lt;option name=&quot;traditional&quot; value=&quot;傳統雞排&quot;&gt;傳統雞排&lt;/option&gt;        &lt;/select&gt;    &lt;/p&gt;    &lt;p&gt;數量:        &lt;select name=&quot;qty&quot; id=&quot;&quot;&gt;            &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;            &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;            &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;            &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;            &lt;option value=&quot;5&quot;&gt;5&lt;/option&gt;        &lt;/select&gt;    &lt;/p&gt;    &lt;input type=&quot;hidden&quot; value=&quot;http://547776ad.ngrok.io&quot; name=&quot;ClintBackURL&quot;&gt;    &lt;input type=&quot;hidden&quot; value=&quot;&lt;?php echo </code></pre><p>[step]4[&#x2F;step] 修改複製過到 controller 的 example 好讓 sdk 可以收到前台傳來的資料做結帳 下面要特別注意的點是 <code>ReturnURL</code> 是設定要讓歐付寶傳值回來的 URL 由於我是用 valet 當作 local 開發環境 所以可以直接在 command line 下</p><pre><code>valet share</code></pre><p>就會產生 <code>https://b30097bf.ngrok.io</code> 這個url 讓外部ip連 所以請不要跟我用一樣的 url 喔 更多 share 相關可以看官網說明 <a href="https://laravel.com/docs/5.8/valet#sharing-sites">https://laravel.com/docs/5.8/valet#sharing-sites</a></p><pre><code class="php"> public function pay(Request $request) &#123;        $MerchantTradeNo = &quot;Test&quot;.time();        // 存入訂單資料        $item[&#39;user_id&#39;] = $request-&gt;input(&#39;user_id&#39;);        $item[&#39;shop_name&#39;] = $request-&gt;input(&#39;shop_name&#39;);        $item[&#39;product_name&#39;] = $request-&gt;input(&#39;product_name&#39;);        $item[&#39;qty&#39;]  = $request-&gt;input(&#39;qty&#39;);        $item[&#39;price&#39;] = 65;        $item[&#39;order_name&#39;] = &#39;test_order&#39;;        $item[&#39;merchant_trade_no&#39;] = $MerchantTradeNo;        $order = Order::createOrder($item);        $price = 65;        $qty   = $request-&gt;input(&#39;qty&#39;);        $name  = $request-&gt;input(&#39;product_name&#39;);        try &#123;            $obj = new OpayAllInOne();            //服務參數            $obj-&gt;ServiceURL  = &quot;https://payment-stage.opay.tw/Cashier/AioCheckOut/V5&quot;;         //服務位置            $obj-&gt;HashKey     = &#39;5294y06JbISpM5x9&#39; ;                                            //測試用Hashkey，請自行帶入OPay提供的HashKey            $obj-&gt;HashIV      = &#39;v77hoKGq4kWxNNIS&#39; ;                                            //測試用HashIV，請自行帶入OPay提供的HashIV            $obj-&gt;MerchantID  = &#39;2000132&#39;;                                                      //測試用MerchantID，請自行帶入OPay提供的MerchantID            $obj-&gt;EncryptType = OpayEncryptType::ENC_SHA256;                                    //CheckMacValue加密類型，請固定填入1，使用SHA256加密            $obj-&gt;Send[&#39;ReturnURL&#39;]         = &#39;https://b30097bf.ngrok.io/api/receive&#39;; //付款完成通知回傳的網址            $obj-&gt;Send[&#39;MerchantTradeNo&#39;]   = $MerchantTradeNo;                                       //訂單編號            $obj-&gt;Send[&#39;MerchantTradeDate&#39;] = date(&#39;Y/m/d H:i:s&#39;);                                    //交易時間            $obj-&gt;Send[&#39;TotalAmount&#39;]       = $price * $qty;                                                   //交易金額            $obj-&gt;Send[&#39;TradeDesc&#39;]         = &quot;Hen好吃，史勾以!&quot;;                                        //交易描述            $obj-&gt;Send[&#39;ChoosePayment&#39;]     = OpayPaymentMethod::ALL;                                 //付款方式:全功能            //訂單的商品資料            array_push($obj-&gt;Send[&#39;Items&#39;], array(&#39;Name&#39; =&gt; $name, &#39;Price&#39; =&gt; (int)$price,                &#39;Currency&#39; =&gt; &quot;元&quot;, &#39;Quantity&#39; =&gt; (int) $qty, &#39;URL&#39; =&gt; &quot;&quot;));            //產生訂單(auto submit至OPay)            $obj-&gt;CheckOut();        &#125; catch (Exception $e) &#123;            echo $e-&gt;getMessage();        &#125;    &#125;</code></pre><p>同時也修改 receive 在確認到歐付寶傳回來的 response 確認裡頭的 <code>CheckMacValue</code> 和我們這邊 server 生成的一致之後 再去把 order status 改成 1</p><pre><code class="php">public function receive(Request $request) &#123;        try &#123;            $obj = new OpayAllInOne();            /* 服務參數 */            $obj-&gt;HashKey     = &#39;5294y06JbISpM5x9&#39; ;            $obj-&gt;HashIV      =  &#39;v77hoKGq4kWxNNIS&#39; ;            $obj-&gt;MerchantID  = &#39;2000132&#39;;            $obj-&gt;EncryptType = OpayEncryptType::ENC_SHA256;            /* 取得回傳參數 */           $arFeedback = $obj-&gt;CheckOutFeedback();            // 參數寫入檔案           if(true)           &#123;               $sLog_Path  = __DIR__.&#39;/sample_payment_return.log&#39; ; // LOG路徑               $sLog = &#39;+++++++++++++++++++++++++++++++++++++++ 接收回傳參數 &#39; . date(&#39;Y-m-d H:i:s&#39;) . &#39; ++++++++++++++++++++++++++++++++++++++++++++&#39; . &quot;\n&quot;;               $fp=fopen($sLog_Path, &quot;a+&quot;);               fputs($fp, $sLog);               fclose($fp);               Log::info($sLog);               $sLog_File =  print_r($arFeedback, true). &quot;\n&quot;;               $fp=fopen($sLog_Path, &quot;a+&quot;);               fputs($fp, $sLog_File);               fclose($fp);           &#125;            echo &#39;1OK&#39; ;            $MerchantTradeNo = $request[&#39;MerchantTradeNo&#39;]; // 取得MerchantTradeNo 當作是PK去更更新 order status            $status = Order::updateOrderStatus($MerchantTradeNo);        &#125; catch (Exception $e) &#123;            if(true)            &#123;                $sLog_Path  = __DIR__.&#39;/sample_payment_return.log&#39; ; // LOG路徑                $sLog = &#39;+++++++++++++++++++++++++++++++++++++++ 接收回傳參數(ERROR) &#39; . date(&#39;Y-m-d H:i:s&#39;) . &#39; ++++++++++++++++++++++++++++++++++++++++++++&#39; . &quot;\n&quot;;                $fp=fopen($sLog_Path, &quot;a+&quot;);                fputs($fp, $sLog);                fclose($fp);                Log::info($sLog);                $sLog_File =  $e-&gt;getMessage(). &quot;\n&quot;;                $fp=fopen($sLog_Path, &quot;a+&quot;);                fputs($fp, $sLog_File);                fclose($fp);            &#125;        &#125;    &#125;</code></pre><h3 id="5-實際建立訂單以確認流程ok"><a href="#5-實際建立訂單以確認流程ok" class="headerlink" title="5. 實際建立訂單以確認流程ok"></a>5. 實際建立訂單以確認流程ok</h3><p>[step]1[&#x2F;step] 進入首頁 並點右上右登入 點選進入下單頁面 <img src="/wp-content/uploads/2020/02/image-1581565311549.png" alt="file"></p><p>[step]2[&#x2F;step] 進入下單面後確認訂單 submit</p><p>[step]3[&#x2F;step] 此時會導入歐付寶的頁面 裡面會有剛剛點選的雞排訂單 <img src="/wp-content/uploads/2020/02/image-1581568353485.png" alt="file"></p><p>同時check 一下 db 裡頭有剛剛新建的訂單 可以發現</p><pre><code>1. status = 0 ，代表還未付款2. merchant_trade_no 是剛剛生成的 當作是PK (其實應該是要建關聯db 但這邊就當測試就好 直接用)</code></pre><p><img src="/wp-content/uploads/2020/02/image-1581568434298.png" alt="file"></p><p>[step]4[&#x2F;step] 登入並輸入信用卡 可以參考官網的介紹 <a href="https://developers.opay.tw/AioCreditCard/CreateOrder">https://developers.opay.tw/AioCreditCard/CreateOrder</a></p><p>[step]5[&#x2F;step] 完成訂單! 我們會收到以下畫面 <img src="/wp-content/uploads/2020/02/image-1581568700595.png" alt="file"></p><p>同時再check一下db hen 好! <code>status = 1</code> ，代表已完成信用卡支付 <img src="/wp-content/uploads/2020/02/image-1581568785619.png" alt="file"></p><p>讚! 完成!</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><p>最後附上系列文章</p><ol><li><a href="https://growingdna.com/chickenfilletaffiliate-api-preface/">PHP + Laravel 雞排聯盟API實作: 前言</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-createmodel/">PHP + Laravel 雞排聯盟API實作: 產出 table 及可供操作的物件</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-crud">PHP + Laravel 雞排聯盟API實作: CRUD 增刪改查</a></li><li><a href="https://growingdna.com/php-laravel-chickenfillet-auth">PHP + Laravel 雞排聯盟API實作: 追加會員身份驗證</a></li><li><a href="https://growingdna.com/php-laravel-opay-api">PHP + Laravel 雞排聯盟API實作: 串接歐付寶金流API</a></li></ol><p>以及初學時看的書 推薦!</p><ul><li><a href="https://growingdna.com/Laravel5-for-beginner">Laravel 5 for beginner 新手道場：優雅運用框架快速開發 PHP 網站</a></li></ul><p>還有gibhub連結</p><ul><li><a href="https://github.com/BenmrChen/ChickenFillet">https://github.com/BenmrChen/ChickenFillet</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python Pandas 來抓取台股每日資訊</title>
      <link href="/2020/02/12/python-pandas-tw-stock/"/>
      <url>/2020/02/12/python-pandas-tw-stock/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <a href="https://growingdna.com/python-pandas-intro/">上一篇文章</a> 裡，我們介紹了Python Pandas厲害的地方</p><p>本篇文章則是要分享 如何使用 Python Pandas 來抓取在 <a href="https://www.twse.com.tw/zh/">【台灣證券交易所】</a> 揭示的每日股價資訊 並在使用 Pandas 存成 Dataframe 後 存到 SQLite3 這個資料庫內，以利後續分析</p><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><p>主要可以分成</p><h3 id="第一洞-找到資料來源"><a href="#第一洞-找到資料來源" class="headerlink" title="第一洞: 找到資料來源"></a>第一洞: 找到資料來源</h3><p>這邊會以 <a href="https://www.twse.com.tw/zh/">【台灣證券交易所】</a> 為例</p><h3 id="第二洞-將資料抓下來並解析成-Pandas-可讀的格式"><a href="#第二洞-將資料抓下來並解析成-Pandas-可讀的格式" class="headerlink" title="第二洞: 將資料抓下來並解析成 Pandas 可讀的格式"></a>第二洞: 將資料抓下來並解析成 Pandas 可讀的格式</h3><p>Pandas 是啥? 請見下個段落</p><h3 id="第三洞-使用-Pandas-存成-Dataframe"><a href="#第三洞-使用-Pandas-存成-Dataframe" class="headerlink" title="第三洞: 使用 Pandas 存成 Dataframe"></a>第三洞: 使用 Pandas 存成 Dataframe</h3><p>存了之後試試看可否做簡單的資料篩選</p><h3 id="第四洞-將資料分存入-SQLite3-內"><a href="#第四洞-將資料分存入-SQLite3-內" class="headerlink" title="第四洞: 將資料分存入 SQLite3 內"></a>第四洞: 將資料分存入 SQLite3 內</h3><p>這樣子之後我們就可以使用存在SQLite3 裡面的資料來做下一步處理了</p><h2 id="預備知識"><a href="#預備知識" class="headerlink" title="預備知識"></a>預備知識</h2><p>在實作前有些名詞須要先了解一下 所以簡單列一下會用到的名字解釋</p><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3><p>可以想像成是 Windows 的 excel 用途是快速地對資料做運算並整理成一張張厲害的表格</p><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>Python 常用的 package 它可以將網路上的資料給下載下來，給程式使用</p><h3 id="csv檔"><a href="#csv檔" class="headerlink" title=".csv檔"></a>.csv檔</h3><p><code>.csv</code>是一種檔案的格式 它可以被excel或記事本打開 (對!就是 windows 的那個記事本)</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="第一洞-找到資料來源-1"><a href="#第一洞-找到資料來源-1" class="headerlink" title="第一洞: 找到資料來源"></a>第一洞: 找到資料來源</h3><p>可以點開台灣證券交易所的網站如下 <a href="https://www.twse.com.tw/zh/"></a><a href="https://www.twse.com.tw/zh/">https://www.twse.com.tw/zh/</a> [step]1[&#x2F;step] 點選【交易資訊】裡的【每日收盤行情】 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580786147438.png" alt="file"> [step]2[&#x2F;step] 在【分類】裡點選【全部(不含權證…)】 並按下查詢 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580786163738.png" alt="file"> [step]3[&#x2F;step] 打開「開發者工具」 (以下以Chrome為例)</p><ul><li>在網頁任一處點右鍵-&gt;檢查即可 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580786179231.png" alt="file"> [step]4[&#x2F;step] 點開【Network】分頁，這邊可以看到你在操作網頁時與server互動的情況</li></ul><p>請點選【CSV下載】 此時你可以看到右邊開發者工具多了很東西 請點選<code>MI_INDEX?</code>開頭的那個 就可看到右邊有一個 <code>Request URL</code> 這個就是你點了【CSV下載】後會發出去的 request <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580786211227.png" alt="file"> 這個 request 會回傳【每日收盤行情】的資訊回來 接著我們就是要利用這個 request 來拉股市資訊下來處理</p><p>[step]5[&#x2F;step] 將這個 URL 複製下來貼到網址列裡 <a href="https://www.twse.com.tw/exchangeReport/MI_INDEX?response=csv&date=20200120&type=ALLBUT0999">https://www.twse.com.tw/exchangeReport/MI_INDEX?response&#x3D;csv&amp;date&#x3D;20200120&amp;type&#x3D;ALLBUT0999</a> 你會得到以下畫面 這樣就可以把股市資訊的<code>csv</code>檔給抓下來了 而其中的<code>【date=20200120】</code>就是你要抓的資料日期 而這也意謂著 我們可以用這個 URL 來抓任意日期的股市資訊了</p><h3 id="第二洞-將資料抓下來並解析成-Pandas-可讀的格式-1"><a href="#第二洞-將資料抓下來並解析成-Pandas-可讀的格式-1" class="headerlink" title="第二洞: 將資料抓下來並解析成 Pandas 可讀的格式"></a>第二洞: 將資料抓下來並解析成 Pandas 可讀的格式</h3><p>ps. 【貼心提示】以下內容請搭配 code 傳送門服用 <a href="https://github.com/BenmrChen/Python/blob/master/Stock_data.ipynb"></a><a href="https://github.com/BenmrChen/Python/blob/master/Stock_data.ipynb">https://github.com/BenmrChen/Python/blob/master/Stock_data.ipynb</a></p><p>[step]1[&#x2F;step] 使用以下程式碼來使用python把資料抓下來 並存到 response 這個變數裡</p><pre><code class="python">import requestsimport pandas as pdfrom io import StringIOresponse = requests.get(&#39;http://www.twse.com.tw/exchangeReport/MI_INDEX?response=csv&amp;date=20200120&amp;type=ALLBUT0999&amp;_=1520785530355&#39;)</code></pre><p>[step]2[&#x2F;step] 試試可這個抓下來的資料可否用 <code>pandas</code>直接存取</p><pre><code class="python">lines = pd.read_csv(StringIO(response.text))</code></pre><p>結果報錯了，它說:</p><pre><code>ParserError: Error tokenizing data. C error: Expected 7 fields in line 193, saw 17</code></pre><p>意思是在193行，程式預期有7個欄位 但實際上有17個欄位 程式就卡住報錯了</p><p>怎麼辦呢? 這時候我們可以打開剛剛下載下來的<code>.csv</code>檔 這才發現 原來是因為檔案的上半部和下半部的欄位不一樣多 以致會有 pandas 讀不出來的情形發生 所以接下來就是要處理一下資料 才能讓 pandas 好處理囉~</p><p>[step]3[&#x2F;step]</p><p>我們使用<code>split</code>這個 function 來為.csv檔分行(.csv是用<code>&#39;\n&#39;</code>來斷行的) 並一行一行存到<code>lines</code>變數裡 然後把第100行印出來看看是啥</p><pre><code class="python">lines = response.text.split(&#39;\n&#39;)print(lines[100])print(lines[200])</code></pre><p>嗯看起來符合預期 讚! 而且我們要的資料是下面那筆 總共有17個欄位的 所以要處理的就是把不要的那個給拿掉</p><p>[step]4[&#x2F;step] 我們使用<code>&quot;,</code>這個符號再把剛剛存在<code>line</code>這個變數的字串給拆開 由於我們只要有17個欄位的資料 所以寫一個判斷 把有17個欄位的存到<code>newlines</code>變數裡 並簡單驗證一下 原來的<code>lines</code>變數內的資料筆數和新的<code>newlines</code>變數內的資料筆數是否有變更</p><pre><code class="python">newlines = []for line in lines:    if len(line.split(&#39;&quot;,&#39;)) == 17:            newlines.append(line)print(len(lines))print(len(newlines))</code></pre><p>[step]5[&#x2F;step] 接著把剛剛的<code>newlines</code>給印出來看看</p><pre><code class="python">print(newlines)</code></pre><p>看起來是我們想要的東西沒錯!</p><p>[step]6[&#x2F;step] 現在的狀況是 我們有一個list，裡面有超多筆data 但為了要讓 pandas 解析 所以我們必須要讓它成為一個string 所以使用以下 code 將<code>newlines</code>變數給黏起來 並印出來看看它有多長(string長度) 也印出來看看內容對不對 最後再用<code>type</code>函式來確認是不是string</p><pre><code class="python">s = &#39;\r&#39;.join(newlines)print(s)type(s)</code></pre><p>好的! 這樣子看起來就差不多了 我們可以開始準備用 pandas 來解析囉</p><h3 id="第三洞-使用-Pandas-存成-Dataframe-1"><a href="#第三洞-使用-Pandas-存成-Dataframe-1" class="headerlink" title="第三洞: 使用 Pandas 存成 Dataframe"></a>第三洞: 使用 Pandas 存成 Dataframe</h3><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580787266534.png" alt="file"></p><h3 id="第四洞-將資料分存入-SQLite3-內-1"><a href="#第四洞-將資料分存入-SQLite3-內-1" class="headerlink" title="第四洞: 將資料分存入 SQLite3 內"></a>第四洞: 將資料分存入 SQLite3 內</h3><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580787273184.png" alt="file"> 完成!</p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> 技術筆記 </category>
          
          <category> 投資理財 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP + Laravel 雞排聯盟API實作: 追加會員身份驗證</title>
      <link href="/2020/02/06/php-laravel-chickenfillet-auth/"/>
      <url>/2020/02/06/php-laravel-chickenfillet-auth/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身為一個後端攻城屍 沒事就是在寫驗證管權限什麼的 今天就是要來寫一個限權管理機制 好確保我們的雞排資料不會被奇怪的人亂改亂修</p><p>好的 準備好就開始吧!</p><h2 id="增加註冊功能"><a href="#增加註冊功能" class="headerlink" title="增加註冊功能"></a>增加註冊功能</h2><p>Laravel 很貼心地提供了快速的指令 可以直接生成前端畫面和設置權限的相關 Routes 指令如下:</p><pre><code>composer require laravel/ui --devphp artisan ui vue --auth</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580891570030.png" alt="file"></p><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580891533843.png" alt="file"></p><p>這邊可以用<code>Git</code>看一下新增了什麼 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580891779576.png" alt="file"></p><p>可以得知新增了一個<code>HomeController</code></p><p>同時我們可以看一下<code>web.php</code>(管前端畫面的路由) <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580891924482.png" alt="file"> 可以發現 Laravel 自動幫我們追加了一個<code>/home</code>的路由進去</p><p>這邊我可以用<code>command line</code>看一下目前的路由狀況</p><pre><code>php artisan route:list</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580892171443.png" alt="file"> 可以看到紅框框起來的地方就是這次新增的路由 基本的會員登錄驗證都已經在Laravel大大的幫助下完成了</p><p>你可能會問，那DB勒? 沒問題! Laravel 在 new 專案出來的時候也已經自帶好了 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580892289887.png" alt="file"></p><p>這個時候 只要進入我們用 Valet 架好的本地環境 就可以看到登錄&#x2F;註冊畫面囉 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580892389194.png" alt="file"></p><p>超方便的! 輸入好資料後就可以註冊完成了</p><p>下一步呢? 就是要來寫驗證會員身份啦!</p><h2 id="使用Passport做會員身份驗證"><a href="#使用Passport做會員身份驗證" class="headerlink" title="使用Passport做會員身份驗證"></a>使用Passport做會員身份驗證</h2><p>建議可以先行服用看官方文件 安裝好官方推薦的passport做OAuth2驗證 就可以輕易地讓我們的API來使用Token驗證 user <a href="https://laravel.com/docs/6.x/passport">https://laravel.com/docs/6.x/passport</a></p><p>[step]1[&#x2F;step]</p><pre><code>composer require laravel/passport</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580892922190.png" alt="file"></p><p>到<code>composer.json</code>就可以看到<code>passport</code>囉 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580892992305.png" alt="file"></p><p>[step]2[&#x2F;step] 接著來讓<code>passport</code>幫我們加入相關的<code>table</code></p><pre><code>php artisan migrate</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580893046105.png" alt="file"></p><p>可以看到<code>passport</code>加入了<code>client table</code>和<code>token table</code> 這個概念可以想像成白名單 也就是說 如果有人要來存取我們的API 首先 user 必須要被加到白名單內(client table) 接著在確認 user 是白名單的成員後 api 端才能核發 Token 給 user 以獲取會員的權限</p><p>一般在做任何需要認證的請求時 比如說（我「想」要新增雞排店） 那麼就要先跟伺服器請求核發一組 Access Token(就是一段亂碼) 把這個 Token 附帶在請求中 就可以操作需要驗證的API (我要新增雞排-附帶有效的Token)</p><p>[step]3[&#x2F;step] 創建加密需要的<code>公鑰</code>及<code>私鑰</code> 這主要是讓我們在接著可以安全產生 Access Token 使用方式在後面會做介紹</p><pre><code>php artisan passport:install</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580893971406.png" alt="file"></p><p>[step]4[&#x2F;step] 設定<code>Passport</code> 有了以上的預備 接著我們要來做一些設定 把這個<code>passport</code>給引用到我們user的model中</p><pre><code class="php">&lt;?phpnamespace App;use Illuminate\Contracts\Auth\MustVerifyEmail;use Illuminate\Foundation\Auth\User as Authenticatable;use Illuminate\Notifications\Notifiable;use Laravel\Passport\HasApiTokens; // 加這行class User extends Authenticatable&#123;    use HasApiTokens, Notifiable; // 加這行    use Notifiable;&#125;</code></pre><p>這樣子我們就加入了 Passport 寫好的方法</p><p>[step]5[&#x2F;step] 接著 AuthServiceProvider 中的 boot 方法中調用 Passport::routes 方法 這個方法會註冊必要的路由去核發、換發、撤銷 Token 以及請求客戶端的 id、secret 之類的路由</p><pre><code class="php">&lt;?phpnamespace App\Providers;use App\ChickenFilletShop;use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;use Illuminate\Support\Facades\Gate;use Laravel\Passport\Passport;class AuthServiceProvider extends ServiceProvider&#123;    /**     * Register any authentication / authorization services.     *     * @return void     */    public function boot()    &#123;        $this-&gt;registerPolicies();        Passport::routes();  // 加這行    &#125;&#125;</code></pre><p>完成後 就可以看到路由表以下 紅框處就是我們調用<code>passport</code>方法所新增的路由了! <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580894713292.png" alt="file"></p><p>ps. <code>passport</code>核發的token預設是<code>1年</code>有效</p><p>[step]6[&#x2F;step] 修改config</p><p>讓我們到<code>config/auth.php</code>內</p><pre><code class="php">&lt;? php    &#39;guards&#39; =&gt; [        &#39;web&#39; =&gt; [            &#39;driver&#39; =&gt; &#39;session&#39;,            &#39;provider&#39; =&gt; &#39;users&#39;,        ],        &#39;api&#39; =&gt; [            &#39;driver&#39; =&gt; &#39;passport&#39;, // 把原來的 token 改成 passport            &#39;provider&#39; =&gt; &#39;users&#39;,            &#39;hash&#39; =&gt; false,        ],    ],</code></pre><h3 id="申請授權"><a href="#申請授權" class="headerlink" title="申請授權"></a>申請授權</h3><p>在上面的步驟中 我們安裝也設定好了<code>passport</code> 接下來就是要來使用它並設定權限了</p><p>首先要提的是 Laravel 提供了4種不同的授權類型</p><ol><li>密碼授權</li><li>授權碼授權</li><li>個人授權</li><li>同步授權</li></ol><p>而以下將對<code>密碼授權</code>進行說明</p><p>如先前所說 在請求API，首先必須確認 user 在白名單(client table)內 這才有辦法使用<code>id</code>及<code>secret</code>來申請<code>Access Token</code> 接著才能拿著這個<code>Access Token</code>來請求API</p><p>而當 User 在申請<code>Access Token</code>時 設定資料如下:</p><pre><code>POST /oauth/token HTTP/1.1Content-type: application/x-www-form-urlencoded</code></pre><p>須附帶資料如下:</p><pre><code class="php">&lt;?php  &#39;grant_type&#39; =&gt; &#39;password&#39;, //告訴伺服器密碼授權  &#39;client_id&#39; =&gt; &#39;2&#39;, // 伺服器端會有一筆client ID資料，在安裝Passport 有新增一組，日後若有需求可再新增。  &#39;client_secret&#39; =&gt; &#39;Y9kRRtMX...&#39;,  //上面ID對應的 secret 值  &#39;username&#39; =&gt; &#39;goodchicken@gmail.com&#39;, // 登入哪個使用者  &#39;password&#39; =&gt; &#39;goodchicken@gmail.com&#39;, //密碼  &#39;scope&#39; =&gt; &#39;&#39;, //作用區</code></pre><p>回傳的資料如下</p><pre><code class="json"> &#123;    &quot;token_type&quot;: &quot;Bearer&quot;,    &quot;expires_in&quot;: 31622400,    &quot;access_token&quot;: &quot;eyJ0eXA...&quot;,    &quot;refresh_token&quot;: &quot;def502...&quot;&#125;</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2020/02/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2020-01-08-%E4%B8%8A%E5%8D%8810.15.56-800x383.png" alt="access_token"> 這樣就取得了`Access Token` 代表授權成功了! 接著我們就可以使用這個`Access Token`來請求須要驗證的API了!</p><p>但我們還沒有在系統中設定雞排resource成須要驗證才能操作 接下來就來完成這部份吧!</p><h3 id="設定操作資源需驗證的方法"><a href="#設定操作資源需驗證的方法" class="headerlink" title="設定操作資源需驗證的方法"></a>設定操作資源需驗證的方法</h3><p>[step]1[&#x2F;step] 首先到這支檔案設定 `chickenFillet&#x2F;app&#x2F;Http&#x2F;Controllers&#x2F;ChickenFilletShopController.php`</p><p>除了`index`(查詢清單)和`show`(查詢單一筆資料)外，其他的action都要驗證</p><pre><code class="php">middleware(&#39;auth:api&#39;, [&#39;except&#39; =&gt; [&#39;index&#39;,&#39;show&#39;]]);    &#125;</code></pre><p>[step]2[&#x2F;step] 使用`Postman`來刪資料試試 看看是不是隨便一個 user 都可以把我們家資料刪掉 <img src="https://growingdna.com/wp-content/uploads/2020/02/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2020-01-08-%E4%B8%8A%E5%8D%889.52.29-529x400.png" alt="delete_without_auth"></p><p>嗯看來是不行 會跳`401 error` 符合預期</p><p>[step]3[&#x2F;step] 還記得上面申請的`Access Token`嗎?</p><p><img src="https://growingdna.com/wp-content/uploads/2020/02/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2020-01-08-%E4%B8%8A%E5%8D%8810.15.56-800x383.png" alt="access_token"></p><p>我們把上面`Access Token`給copy下來 並貼到header再打一次 API header的寫法如下: <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580977790500.png" alt="file"></p><p>response 如下 <img src="https://growingdna.com/wp-content/uploads/2020/02/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2020-01-08-%E4%B8%8B%E5%8D%885.14.16-800x237.png" alt="delete"></p><p>這樣子就成功囉!</p><p>ps. 若出現`Could not get any response`字串的話 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580976758640.png" alt="file"></p><p>那可能是因為在`Access Token`的時候貼錯 多貼了一行斷行 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580976814902.png" alt="file"></p><p>刪了這段就好了 真的冏</p><p>[step]3[&#x2F;step] Laravel 預設`Access Token`是一年有效 (若要自訂有效期，可以參考官方文件 <a href="https://laravel.com/docs/5.8/passport#token-lifetimes">https://laravel.com/docs/5.8/passport#token-lifetimes</a>) 在失效後，可以使用`Refresh Token`來取得新的`Access Token` 其設定如下: header:</p><pre><code>Content-Type: application/x-www-form-urlencodedAccept: application/json</code></pre><p>body</p><pre><code>grant_type: refresh_tokenrefresh_token: def5020054....client_id:2client_secret: Y9kRRtMXcUrn29z7HPlyPIuju2IJpaQWwdq6rECoscope:</code></pre><p>完成後就可以看到新的<code>Access Token</code>囉</p><p><img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580979135809.png" alt="file"></p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><p>最後附上系列文章</p><ol><li><a href="https://growingdna.com/chickenfilletaffiliate-api-preface/">PHP + Laravel 雞排聯盟API實作: 前言</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-createmodel/">PHP + Laravel 雞排聯盟API實作: 產出 table 及可供操作的物件</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-crud">PHP + Laravel 雞排聯盟API實作: CRUD 增刪改查</a></li><li><a href="https://growingdna.com/php-laravel-chickenfillet-auth">PHP + Laravel 雞排聯盟API實作: 追加會員身份驗證</a></li></ol><p>以及初學時看的書 推薦!</p><ul><li><a href="https://growingdna.com/Laravel5-for-beginner">Laravel 5 for beginner 新手道場：優雅運用框架快速開發 PHP 網站</a></li></ul><p>還有gibhub連結</p><ul><li><a href="https://github.com/BenmrChen/ChickenFillet">https://github.com/BenmrChen/ChickenFillet</a></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://laravel.com/docs/6.x/authentication">https://laravel.com/docs/6.x/authentication</a> <a href="https://learnku.com/laravel/t/10488/could-not-get-any-response">https://learnku.com/laravel/t/10488/could-not-get-any-response</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>應用 Python 於圖表數據：Pandas</title>
      <link href="/2020/02/03/python-pandas-intro/"/>
      <url>/2020/02/03/python-pandas-intro/</url>
      
        <content type="html"><![CDATA[<h2 id="Python-圖表數據用名詞解釋"><a href="#Python-圖表數據用名詞解釋" class="headerlink" title="Python 圖表數據用名詞解釋"></a>Python 圖表數據用名詞解釋</h2><h3 id="code-傳送門"><a href="#code-傳送門" class="headerlink" title="code 傳送門:"></a>code 傳送門:</h3><p><a href="https://github.com/BenmrChen/Python/blob/master/Pandas_Intro.ipynb">https://github.com/BenmrChen/Python/blob/master/Pandas_Intro.ipynb</a></p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ol><li>Python Package (函式庫) 是什麼? <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580700202512.png" alt="file"></li><li>Python Environment (環境) 是什麼? <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580700211700.png" alt="file"></li><li>Anaconda 是什麼? <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580700216436.png" alt="file"></li></ol><h2 id="Pandas-簡介"><a href="#Pandas-簡介" class="headerlink" title="Pandas 簡介"></a>Pandas 簡介</h2><ol><li>Pandas 是什麼 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580700225662.png" alt="file"></li><li>數據型態<ul><li>Series <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580700273024.png" alt="file"></li><li>DataFrame <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580700241033.png" alt="file"></li></ul></li></ol><h2 id="實例-預測人生財務曲線"><a href="#實例-預測人生財務曲線" class="headerlink" title="實例: 預測人生財務曲線"></a>實例: 預測人生財務曲線</h2><h3 id="code-傳送門-1"><a href="#code-傳送門-1" class="headerlink" title="code 傳送門:"></a>code 傳送門:</h3><p><a href="https://github.com/BenmrChen/Python/blob/master/Life_Financial_Status.ipynb">https://github.com/BenmrChen/Python/blob/master/Life_Financial_Status.ipynb</a></p><h3 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h3><ol><li>每年淨額 計算</li><li>有&#x2F;無投資的總資產變化情況</li><li>考慮買房的總資產變化</li><li>結論 <img src="https://growingdna.com/wp-content/uploads/2020/02/image-1580700836212.png" alt="file"><ul><li>絕對要開始投資，讓資產報酬率在每年5％就差很多了！</li><li>買不買房差很大！</li><li>投資部位很重要</li></ul></li></ol><h2 id="PPT-傳送門"><a href="#PPT-傳送門" class="headerlink" title="PPT 傳送門:"></a>PPT 傳送門:</h2><p><a href="https://github.com/BenmrChen/Python/blob/master/Python_pandas_intro.pptx">https://github.com/BenmrChen/Python/blob/master/Python_pandas_intro.pptx</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> 技術筆記 </category>
          
          <category> 投資理財 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>話術閒談：Appen、Lion Bridge、eToro、Youtube</title>
      <link href="/2020/01/21/mis-leading-talk/"/>
      <url>/2020/01/21/mis-leading-talk/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先來定義一下話術</p><p>我認為 界於真實和詐騙之間有個中間灰色地段 這裡大概就是話術了吧</p><p>比如說 房仲業者會跟你推薦一個物件 雖然在近郊，但離市區只有10分鐘路程 既可以遠離城市喧囂、享有清靜 又可以迅速進入市區享受繁華富麗</p><p>聽起來好棒棒是吧?</p><p>但其實10分鐘是啥10分鐘? 是三更半夜或凌晨完全沒車沒紅綠燈才有可能達到的境界啊!</p><p>但業者有說謊嗎? 也沒有 是詐騙嗎? 也不是</p><p>這就是話術了吧。</p><p>隱惡揚善絕對是好的 縮小缺點、強調優點也是常態 但這種話術就是莫名讓人不爽 有一種你得了便宜還賣乖的感覺</p><p>嘖嘖 就讓我 murmur 一下吧! <img src="https://growingdna.com/wp-content/uploads/2020/01/getty_464987849_127937-800x371.jpg" alt="lying to others"></p><h2 id="話術的種類"><a href="#話術的種類" class="headerlink" title="話術的種類"></a>話術的種類</h2><h3 id="第一種，事物本身其實滿困難的，但他們刻意忽略難處並放大好處-Appen、Lion-Bridge"><a href="#第一種，事物本身其實滿困難的，但他們刻意忽略難處並放大好處-Appen、Lion-Bridge" class="headerlink" title="第一種，事物本身其實滿困難的，但他們刻意忽略難處並放大好處 - Appen、Lion Bridge"></a>第一種，事物本身其實滿困難的，但他們刻意忽略難處並放大好處 - Appen、Lion Bridge</h3><p>這種的在<code>youtube</code>最多 常常可以看到什麼<code>什麼! 看影片就可以賺錢?</code>、<code>XXX 教你如何在一週內打造XXX</code>之類的 不論是發財啊、學習啊、還是任何特殊技能 他們都可以只帶你個入門 然後只強調簡單的地方，並說明自己在中間享受到了極大好處</p><p>接著就會有人上當 (比如說在下我) 比如說標題的Appen、Lion Bridge等網站 那些人會說註冊一下、填填資料、上網動動手指 錢很快就會入你帳戶 blablabla的</p><p>當然也不限定這兩個網站 其他像是玩遊戲啊、開個網路商城啊、聽音樂啊、講講話啊 之類的</p><p>八成都沒那麼簡單 要嘛是標準很高 (甚至要考試)、要嘛是案源很少 (八成接不到) 總之 非常不容易 但因為標題吸引人、實行起來又”看起來”不困難</p><p>話術就成立了</p><p>他賺了流量、發了大財 使用者呢? 你可能說，也沒損失啥，就損失時間嘛</p><p>但時間就是金錢啊 那時間我大可拿來好好學新知、發摟國際新聞、增進自己的技能啥的 但失去的時間 甚至說注意力(這部份可以看 <a href="https://growingdna.com/principle-of-selling-your-time/">這篇文章</a> 了解更多) 就像是淘淘江水般一去不復返啦~</p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/appen_logo_transparent.png"></p><h3 id="第二種，利用廠商贊助博取支持"><a href="#第二種，利用廠商贊助博取支持" class="headerlink" title="第二種，利用廠商贊助博取支持"></a>第二種，利用廠商贊助博取支持</h3><p>有些廠商會同時贊助很多人(可能是網紅、名人、明星、甚至是”所有人”)並提供福利給一般大眾 但是一般大眾可能不知道這件事 (所謂<code>資訊不對稱</code>啊) 因此這些網紅名人們就可以利用這點 強調說這些”福利”是他們好不容易”爭取”來的 為的是<code>&quot;給一直關注他的網友們福利&quot;</code></p><p>看到這個真的是有夠噁心</p><p>舉例來說 <a href="https://growingdna.com/etoro-register-link">eToro</a> 這個投資交易平台 有給”所有已註冊的人”一個推薦連結 (包括我，所以上面這個連結也是推薦連結 用它註冊並入金的話你我”都”可以拿$50獎金喔)</p><p>只要有人藉由這個連結註冊並拿來投資 推薦人和被推薦人”兩個人” (注意喔! 是<code>兩個人</code>)就”都可以”拿到<code>USD $50</code>的推薦獎金</p><p>但有些網紅會刻意忽略這個活動是**”推薦人和被推薦人”**雙方都可以享有的獎金 而只強調這個活動一定要透過他的連結才能參與 而且這個活動是他_”特別努力”_爭取而來的</p><p>well，說實在的，他也沒說謊 畢竟你用這個連結的話的確是可以拿$50 但我實在是覺得類似這種隱暪重要事實還自肥的話術很不可取</p><h3 id="第三種，打悲情牌突破你的心防"><a href="#第三種，打悲情牌突破你的心防" class="headerlink" title="第三種，打悲情牌突破你的心防"></a>第三種，打悲情牌突破你的心防</h3><p>這種就滿常見的勒 哭啊、淚牛滿面啊 反正用盡一切方法做道得綁架 讓人不忍也不敢攻擊他 以免讓自己也陷入道德陷井裡 進而遭到別人的攻擊</p><p>這種就很多 不另外舉例啦 (我絕對不會說是因為想不出什麼實例XD)</p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/%E4%B8%8B%E8%BC%89-1.jpeg" alt="prevent"></p><h2 id="預防之道"><a href="#預防之道" class="headerlink" title="預防之道"></a>預防之道</h2><p>那麼，該如何避免被話術唬嚨呢?</p><p>在這個時代 缺的不是資料 畢竟大家都處於資訊爆炸的時代啦</p><p>現在缺乏的 是注意力，是專注的注意力 以及分別什麼東西值得你關注，什麼不是</p><p>如何做到呢? 真的很困難 大概也只有方向性的東西可以實作</p><h3 id="一、莫貪心"><a href="#一、莫貪心" class="headerlink" title="一、莫貪心"></a>一、莫貪心</h3><p>看到莫名有利可圖或莫名”簡單”的方法 就得特別留心注意</p><p>說真的 非常簡單就可以取得的東西不是沒有 但機率真的是非常非常非常非常低</p><p>平常真的要小心防範 遇到了也要實刻提醒自己莫貪一時之利 以免因小失大</p><p>但如果真的機會來了 做好萬全的準備和風險規避後 就衝吧! 做一個無悔的選擇 <img src="https://growingdna.com/wp-content/uploads/2020/01/image1-713x400.jpg"></p><h3 id="二、注意發表人的動機及利益關係"><a href="#二、注意發表人的動機及利益關係" class="headerlink" title="二、注意發表人的動機及利益關係"></a>二、注意發表人的動機及利益關係</h3><p>以房仲來說 他要的是成交後的手續費 而且因為抽成比例的關係 房仲與買賣方的利益關係是不一致的</p><p>假設一個房子1000萬 房仲抽其中的5%的話 他可以獲得50萬業績(先不算實拿)</p><p>現在因為房仲想要讓房子成交 於是說服買賣雙方說以900萬成交 我們再來看看現在的關係</p><p>對賣方而言，他是**”少賺了100萬”** 這房子就算沒成交，他大也可以賣給其他買家</p><p>但對房仲而言呢?</p><p>他只是**”少了5萬”**的業績啊 但這個房子如果沒成交，他就什麼都沒有了 莫忘記賣家在簽約給房仲業者的時候，通常是不會簽獨家契約的 也就是說 同時會有很多家房仲急著想把這個房子給賣了 競爭壓力不可謂不小</p><p>所以 賣家和房仲的利益是一樣的嗎? 房仲真的是想幫屋主賣個”好價格”嗎?</p><p>這就是思考_動機_和_利益關係_的重要性吶</p><h3 id="三、不斷充實自己"><a href="#三、不斷充實自己" class="headerlink" title="三、不斷充實自己"></a>三、不斷充實自己</h3><p>好啦 這就是老生常談了</p><p>但真的是不可避免 多看書、多吸收知識 學會思考、不隨大流、學會判斷 (多踩點坑XD 真的是不可或缺啊</p><p>最後推薦一下這本書 <a href="https://growingdna.com/ask-more">精準提問的力量：問對問題，就解決一半的問題！</a> 對於提問題、進而提高思考力很有幫助</p><p>另外我覺得假新聞和話術某方面還滿像的 基本上也是弄一個似是而非的消息出來 反正閱聽者也不一定會去查證 主事者就可以利用資訊不對稱來散播假消息</p><p>真的是不可不注意啊……..</p><p>彼此加油! 有問題也可以在下面提問喔~! 另外如果想知道是在講哪些網紅的話也可以私訊問XD</p>]]></content>
      
      
      <categories>
          
          <category> 雜學清談 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>街舞種類：如何選擇人生第一堂街舞課</title>
      <link href="/2020/01/16/how-to-select-your-first-dance-class/"/>
      <url>/2020/01/16/how-to-select-your-first-dance-class/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近囂張老師開了 <a href="https://www.youtube.com/channel/UC7diRwYysR5Ju9UogDc4-qg">Youtube 個人頻道</a><br>第一隻影片就是在講 <a href="https://www.youtube.com/watch?v=10pfIN1s68g">如何選擇人生第一堂街舞課程</a> 內容是聚焦在【根據你喜歡的音樂風格來選擇跳舞的舞風】</p><p>個人看了是深有感觸 (畢竟跳到最近之前都是隨性、有課就跳，月票王道!) 所以來個摘要&amp;個人想法 希望也可以對有意入坑跳舞的捧油一點想法</p><h2 id="街舞種類："><a href="#街舞種類：" class="headerlink" title="街舞種類："></a>街舞種類：</h2><p>目前主流的種類不外乎<code>Hip Hop</code>、<code>Locking</code>、<code>Popping</code>、<code>Free Style</code>、<code>Breaking</code>、<code>Urban</code>等 一般會要看你去看說你比較喜歡哪種，然後再去挑一個(或幾個)來學</p><p>但本篇不用這個方式來切入 而是根據你喜歡的音樂風格 從而推薦你可能會比較喜歡什麼類型的舞蹈風格</p><p>畢竟，跳舞離不開音樂 不喜歡音樂，就很難喜歡跳舞啊XD</p><h2 id="根據音樂風格來選擇人生第一堂街舞課：音樂-街舞種類"><a href="#根據音樂風格來選擇人生第一堂街舞課：音樂-街舞種類" class="headerlink" title="根據音樂風格來選擇人生第一堂街舞課：音樂 &amp; 街舞種類"></a>根據音樂風格來選擇人生第一堂街舞課：音樂 &amp; 街舞種類</h2><p>終於要來音樂風格嚴選了 以下就一個個介紹，並貼上老師推薦音樂連結 希望可以對你對街舞種類有更多理解 <img src="https://growingdna.com/wp-content/uploads/2020/01/hhhh4.jpg" alt="street dance"></p><h3 id="Funk-Popping"><a href="#Funk-Popping" class="headerlink" title="Funk - Popping"></a>Funk - Popping</h3><p>Funk 音樂hen適合拿來跳 Popping 比如說下面這首</p><h4 id="SJIN-史今-使勁"><a href="#SJIN-史今-使勁" class="headerlink" title="SJIN&#x2F;史今 - 使勁"></a>SJIN&#x2F;史今 - 使勁</h4><p>特色是大鼓和小鼓的聲音非常清楚 跳起 popping 來就特別有感</p><h3 id="Hip-hop"><a href="#Hip-hop" class="headerlink" title="Hip hop"></a>Hip hop</h3><p>Hip hop音樂風格…當然就是適合跳 Hip hop 舞風XD 其實有滿多類型的 比如說近代的<code>Trap</code> 或之前的<code>Boom Bap</code> 但其實跳起舞來不會差太多</p><p>以<code>Boom Bap</code>來說 這首</p><h4 id="老莫-Boom-Bap-With-Conscious"><a href="#老莫-Boom-Bap-With-Conscious" class="headerlink" title="老莫 - Boom Bap With Conscious"></a>老莫 - Boom Bap With Conscious</h4><p>就很適合用來跳 90 年代的Hip-Hop舞步</p><p>而這首</p><h4 id="吳卓源-撥接"><a href="#吳卓源-撥接" class="headerlink" title="吳卓源 - 撥接"></a>吳卓源 - 撥接</h4><p>就很<code>New Jack Swing</code> (注意喔 這個詞原來是個音樂風格)</p><p>有趣的是它也會因為性別而稍微改個名 男歌手的話會講<code>New Jack Swing</code> 女歌手的話會講<code>New Jill Swing</code></p><p>再稍晚一點 因為音樂風格就更多偏向<code>Funk</code> 所以就有人叫它<code>New Jack Funk</code> 算是一個冷知識補充吧(?)</p><p>另外 這首</p><h4 id="頑童MJ116-走跳"><a href="#頑童MJ116-走跳" class="headerlink" title="頑童MJ116 - 走跳"></a>頑童MJ116 - 走跳</h4><p>就很有致敬<code>LA Boyz</code>的感覺 當然也是很適合跳Hip hop囉</p><h3 id="Funk-Locking-or-Waacking"><a href="#Funk-Locking-or-Waacking" class="headerlink" title="Funk - Locking or Waacking"></a>Funk - Locking or Waacking</h3><p>為啥<code>Funk</code>這麼重要呢 是因為它是第一個將音樂編曲的曲風變的像現代流音樂階遍使用的編曲方式 而誰是第一個這樣做的人呢? 當然就是<code>James Brown</code>了 他的<code>Cold Sweat</code>的經典不用多說 其特色更是將所有樂器的力量都回到<code>1</code> 因此，根據 Funk 曲風來跳舞的舞風 - <code>Locking</code>在<code>1</code>和<code>2</code>的力量就會特別明顯 (順帶一提，也是因為這樣 所以隨著你練的舞風不同，你也會練到不同的用力方式)</p><h4 id="James-Brown-Cold-Sweat"><a href="#James-Brown-Cold-Sweat" class="headerlink" title="James Brown - Cold Sweat"></a>James Brown - Cold Sweat</h4><p>要推薦的歌曲是什麼呢? 就是這首</p><h4 id="宇宙人-你以為"><a href="#宇宙人-你以為" class="headerlink" title="宇宙人 - 你以為"></a>宇宙人 - 你以為</h4><p>開頭的這個 Bass 真的是太 Funk 了</p><p>有機會也想去聽他們live啊…XD</p><p>第二首推薦:</p><h4 id="放客兄弟-微笑的臉"><a href="#放客兄弟-微笑的臉" class="headerlink" title="放客兄弟 - 微笑的臉"></a>放客兄弟 - 微笑的臉</h4><p>Funk吉他刷扣的感覺真的是太爽了 私心覺得電吉他刷扣是Funk的靈魂啊</p><h2 id="寫在最後"><a href="#寫在最後" class="headerlink" title="寫在最後"></a>寫在最後</h2><p>我個人的想法是認為 要所有的舞風都基本試過一輪後 才會有一個比較清楚的輪廓 知道自己比較喜歡什麼，進而可以再往下精進</p><p>然後，跟囂張老師一樣 無論是什麼舞風 學到後面，什麼音樂都可以跳啦!</p><h4 id="方大同-春風吹"><a href="#方大同-春風吹" class="headerlink" title="方大同 - 春風吹"></a>方大同 - 春風吹</h4><p>像是這首，就是之前上<code>Locking</code>時用的歌 乍聽之下完全不像跳 Locking 的 但配起來也是意外地好聽吶!</p><p>(希望不要被版權聲音 有人知道怎麼備註版權來源的嗎@@?)</p><h2 id="最後的最後"><a href="#最後的最後" class="headerlink" title="最後的最後"></a>最後的最後</h2><p>這兩天又看了下<strong>這就是街舞</strong> 還是覺得很猛 推薦給大家! <a href="https://growingdna.com/this-is-dance2-ep4-review/">點我看之前的文章</a></p><p>另外 若文章有任何錯誤或有疑問的地方，請不吝讓我知道 我一定立馬更正 希望大家可以好交流交流喔~</p>]]></content>
      
      
      <categories>
          
          <category> 興趣陳列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP + Laravel 雞排聯盟API實作: CRUD 增刪改查</title>
      <link href="/2020/01/14/chickenfilletaffiliate-api-crud/"/>
      <url>/2020/01/14/chickenfilletaffiliate-api-crud/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://growingdna.com/chickenfilletaffiliate-api-createmodel/">前一篇文章</a>我們已經完成了可供操作的 Model 物件 及使用 migration 產出了相關 table 這篇文章就讓我們來看看要怎麼完成基本的 CRUD 增刪改查吧!</p><h2 id="CRUD-增刪改查架構"><a href="#CRUD-增刪改查架構" class="headerlink" title="CRUD 增刪改查架構"></a>CRUD 增刪改查架構</h2><p>讓我們複習一下目前的 route list (可以在command line 下<code>php artisan route:list</code>查看)</p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-23-%E4%B8%8B%E5%8D%886.07.28-800x134.png"></p><p>了解到 CRUD 增刪改查的對應關係如下</p><h3 id="C-新增-Create"><a href="#C-新增-Create" class="headerlink" title="C 新增 Create"></a>C 新增 Create</h3><ul><li>HTTP method: POST</li><li>URI: api&#x2F;chickenFilletShop</li><li>對應 controller: App\Http\Controllers\ChickenFilletShopController</li><li>對應方法: store</li></ul><h3 id="R-查詢-Read"><a href="#R-查詢-Read" class="headerlink" title="R 查詢 Read"></a>R 查詢 Read</h3><ul><li>範圍查詢<ul><li>HTTP method: GET</li><li>URI: api&#x2F;chickenFilletShop</li><li>對應 controller:<ul><li>App\Http\Controllers\ChickenFilletShopController</li></ul></li><li>對應方法: index</li></ul></li><li>指定 ID 查詢<ul><li>HTTP method: GET</li><li>URI: api&#x2F;chickenFilletShop&#x2F;{chickenFilletShop} (這裡的<code>&#123;chickenFilletShop&#125;</code>可以當作是 id 來想)</li><li>對應 controller: App\Http\Controllers\ChickenFilletShopController</li><li>對應方法: show</li></ul></li></ul><h3 id="U-修改-Update"><a href="#U-修改-Update" class="headerlink" title="U 修改 Update"></a>U 修改 Update</h3><ul><li>HTTP method: PUT&#x2F;PATCH (注意在使用 postman 打 api 時， form-data 不支持 put 和 patch，所以必須在 header 裡修改，這邊後面會再提)</li><li>URI: api&#x2F;chickenFilletShop&#x2F;{chickenFilletShop} (這裡的<code>&#123;chickenFilletShop&#125;</code>可以當作是 id 來想)</li><li>對應 controller: App\Http\Controllers\ChickenFilletShopController</li><li>對應方法: update</li></ul><h3 id="D-刪除-Delete"><a href="#D-刪除-Delete" class="headerlink" title="D 刪除 Delete"></a>D 刪除 Delete</h3><ul><li>HTTP method: DELETE</li><li>URI: api&#x2F;chickenFilletShop&#x2F;{chickenFilletShop} (這裡的<code>&#123;chickenFilletShop&#125;</code>可以當作是 id 來想)</li><li>對應 controller: App\Http\Controllers\ChickenFilletShopController</li><li>對應方法: destroy</li></ul><p>有了以上的關係架構後 我們就要去 controller 裡去完成各個方法的處理囉</p><h2 id="C-新增-Create-1"><a href="#C-新增-Create-1" class="headerlink" title="C 新增 Create"></a>C 新增 Create</h2><p><code>app/Http/Controllers/ChickenFilletShopController.php</code></p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/createyourownlives-create-579x400.jpg" alt="create"></p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre><code class="php">namespace App\Http\Controllers;use App\ChickenFilletShop;use Illuminate\Http\Request;use Symfony\Component\HttpFoundation\Response;    /**     * Store a newly created resource in storage.     *     * @param  \Illuminate\Http\Request  $requestx     * @return \Illuminate\Http\Response     */    public function store(Request $request)    &#123;        $this-&gt;validate($request,[            &#39;type_id&#39;     =&gt; &#39;required&#39;,            &#39;chain_store&#39; =&gt; &#39;requiredboolean&#39;            ]        );        $chickenFilletShop = ChickenFilletShop::create($request-&gt;all());        return response($chickenFilletShop, Response::HTTP_CREATED); // 這邊不要忘記use Symfony\Component\HttpFoundation\Response;    &#125;</code></pre><h3 id="驗證"><a href="#驗證" class="headerlink" title="驗證"></a>驗證</h3><p>這邊先讓<code>type_id</code>和<code>chain_store</code>是必填的 而且<code>chain_store</code>必須是布林值 更多 validate 相關方法可以看這邊: <a href="https://laravel.com/docs/5.8/validation#quick-displaying-the-validation-errors"></a><a href="https://laravel.com/docs/5.8/validation#quick-displaying-the-validation-errors">https://laravel.com/docs/5.8/validation#quick-displaying-the-validation-errors</a> 若驗證失敗，Laravel會回傳錯誤訊息</p><ul><li>ps. 若無法回傳錯誤訊息:<ul><li>解法: 因為沒在header裡放<code>Accept: application/json</code>，加上這段在postman的header即可</li></ul></li></ul><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><p><code>$chickenFilletShop = ChickenFilletShop::create($request-&gt;all());</code></p><ul><li>Laravel 取得 body 內的資料 (存在 $request 內) 使用all的方法取出後，藉由ChickenFilletShop這個 Model (上一篇文章建立的可供操作物件)去新增資料<ul><li>ps. 這種使用方法有一個前提條件，就是 model 裡，已經有一個欄位名稱叫 ‘id’，Laravel 會依據 id 找到對應的 model 資料。</li></ul></li></ul><h3 id="使用-Postman-測試"><a href="#使用-Postman-測試" class="headerlink" title="使用 Postman 測試"></a>使用 Postman 測試</h3><p>成功畫面如下:</p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-24-%E4%B8%8A%E5%8D%8810.41.38-800x366.png" alt="create-success"></p><h2 id="R-查詢-Read-1"><a href="#R-查詢-Read-1" class="headerlink" title="R 查詢 Read"></a>R 查詢 Read</h2><p><code>app/Http/Controllers/ChickenFilletShopController.php</code> 本文先介紹最基本的，根據 id 來查詢的方法 下一篇文章再來敘述如何設定查詢條件、篩選、排序等</p><p><img src="https://growingdna.com/wp-content/uploads/2015/11/10-600x400.jpg" alt="read"></p><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><pre><code class="php">    /**     * Display the specified resource.     *     * @param  \App\ChickenFilletShop  $chickenFilletShop     * @return \Illuminate\Http\Response     */    public function show(ChickenFilletShop $chickenFilletShop)    &#123;        return response($chickenFilletShop, Response::HTTP_OK);    &#125;</code></pre><h3 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h3><p>show 傳入的物件 Laravel 會自動利用 Model 設定的主鍵去找出資料(主鍵預設id)</p><h2 id="U-修改-Update-1"><a href="#U-修改-Update-1" class="headerlink" title="U 修改 Update"></a>U 修改 Update</h2><p><code>app/Http/Controllers/ChickenFilletShopController.php</code></p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/samuel-zeller-358865-unsplash-1080x675-1-640x400.jpg" alt="update"></p><h3 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h3><pre><code class="php">    /**     * Update the specified resource in storage.     *     * @param  \Illuminate\Http\Request  $request     * @param  \App\ChickenFilletShop  $chickenFilletShop     * @return \Illuminate\Http\Response     */    public function update(Request $request, ChickenFilletShop $chickenFilletShop)    &#123;        $chickenFilletShop-&gt;update($request-&gt;all());        return response($chickenFilletShop, Response::HTTP_OK);    &#125;</code></pre><h3 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h3><p>由於 URI 是<code>api/chickenFilletShop/&#123;chickenFilletShop&#125;</code> 其中的<code>&#123;chickenFilletShop&#125;</code>就是 id Laravel 會根據這個 id 去 ChickenFilletShop 這個 Model 去找對應的資料 並使用<code>$request-&gt;all()</code>來取出送過來的資料，以執行 <code>update()</code> 最後回傳已更新的 $chickenFilletShop</p><h3 id="HTTP方法注意點"><a href="#HTTP方法注意點" class="headerlink" title="HTTP方法注意點:"></a>HTTP方法注意點:</h3><ul><li>Postman用<code>form-data</code>吃不到<ul><li>原因: form-data 不支持 put 和 patch</li><li>解法:<ol><li>用 x-www-form-urlencoded</li><li>用 post 模擬 put 和 patch</li></ol></li><li>參考: <a href="https://learnku.com/articles/7956/a-small-pit-in-developing-api-with-laravel">https://learnku.com/articles/7956/a-small-pit-in-developing-api-with-laravel</a></li></ul></li></ul><h3 id="使用-Postman-測試-1"><a href="#使用-Postman-測試-1" class="headerlink" title="使用 Postman 測試"></a>使用 Postman 測試</h3><p>chain_store，也就是紀錄該店是否為連鎖店的欄位 由 1 改為 0</p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2020-01-02-%E4%B8%8A%E5%8D%8810.17.20-800x365.png" alt="PATCH"></p><h2 id="D-刪除-Delete-1"><a href="#D-刪除-Delete-1" class="headerlink" title="D 刪除 Delete"></a>D 刪除 Delete</h2><p><code>app/Http/Controllers/ChickenFilletShopController.php</code></p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/remove.jpg" alt="delete"></p><h3 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h3><pre><code class="php">    /**     * Remove the specified resource from storage.     *     * @param  \App\ChickenFilletShop  $chickenFilletShop     * @return \Illuminate\Http\Response     */    public function destroy(ChickenFilletShop $chickenFilletShop)    &#123;        $chickenFilletShop-&gt;delete();        return response(NULL, Response::HTTP_NO_CONTENT);    &#125;&#125;</code></pre><h3 id="說明-3"><a href="#說明-3" class="headerlink" title="說明"></a>說明</h3><p>由於 URI 是<code>api/chickenFilletShop/&#123;chickenFilletShop&#125;</code> 其中的<code>&#123;chickenFilletShop&#125;</code>就是 id Laravel 會根據這個 id 去 ChickenFilletShop 這個 Model 去找對應的資料 並執行 <code>delete()</code> 最後回傳 NULL</p><h3 id="使用-Postman-測試-2"><a href="#使用-Postman-測試-2" class="headerlink" title="使用 Postman 測試"></a>使用 Postman 測試</h3><p>成功的話，照目前設定會回傳空值 且db內該筆資料會被清掉</p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-26-%E4%B8%8B%E5%8D%884.36.11-800x172.png" alt="delete"></p><p>db顯示為空</p><p><img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-26-%E4%B8%8B%E5%8D%884.34.55-1-800x72.png" alt="blank-db"></p><p>好的! 這樣我們就完成了基本的CRUD 下一篇再來介紹怎麼在查詢時加入各種條件 有任何問題的話也歡迎隨時留言喔~!</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><p>最後附上系列文章</p><ol><li><a href="https://growingdna.com/chickenfilletaffiliate-api-preface/">PHP + Laravel 雞排聯盟API實作: 前言</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-createmodel/">PHP + Laravel 雞排聯盟API實作: 產出 table 及可供操作的物件</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-crud">PHP + Laravel 雞排聯盟API實作: CRUD 增刪改查</a></li></ol><p>以及初學時看的書 推薦!</p><ul><li><a href="https://growingdna.com/Laravel5-for-beginner">Laravel 5 for beginner 新手道場：優雅運用框架快速開發 PHP 網站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Callback 甘苦談</title>
      <link href="/2020/01/07/js-callback-sharing/"/>
      <url>/2020/01/07/js-callback-sharing/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近為 JavaScript 的 Callback 所苦 所以這就來個筆記把這個概念給弄清楚明白些! (雖然說<a href="https://growingdna.com/about/">我本來是打算寫 PHP</a>的XD)</p><p>從結論來說 Callback 基本概念不難 只是因為在實務上有太多奇怪的 code 會出現搗亂 以致有時就會很神奇的發生</p><p>有時候跳 error 跟你說哪裡錯還方便 debug 些 但有時候 javascript 就是不報錯還可以執行 只是哪裡怪怪的 那就真的是OOXX……</p><h2 id="JavaScript-Callback-是什麼"><a href="#JavaScript-Callback-是什麼" class="headerlink" title="JavaScript Callback 是什麼?"></a>JavaScript Callback 是什麼?</h2><p><img src="https://growingdna.com/wp-content/uploads/2019/11/1_pa1aDoszr0_u1wXvgAmaQA-533x400.jpeg"> 就如何字面上表達的 是我在某段 code 裡呼叫了(call)某 function 之後，再回去(back)執行先前的 function 也就是說，寫在前面的 function 不會先執行，而是會等到被呼叫的時候才會 這有助於確保我們想要讓執行順序固定下來的情境</p><p>舉例來說 假說我們現在有兩個 function 分別是 <code>funcA</code> 和 <code>funcB</code> 如果我們想要讓執行的順序定下來是<code>funcA -&gt; funcB</code>的話 就會用到 <code>Callback</code></p><h3 id="情境1-在-PHP-裡"><a href="#情境1-在-PHP-裡" class="headerlink" title="情境1: 在 PHP 裡"></a>情境1: 在 PHP 裡</h3><p>由於 PHP 原則上是沒有非同步處理的機制 (有關同步與非同步，可以看<a href="https://ithelp.ithome.com.tw/articles/10209328">這篇文章參考</a>) 所以我們來看一下這段 code</p><pre><code class="php">&lt;?phpfunction funcA() &#123;    $i = rand(0.1,1);    sleep($i);    echo(&#39;function A&#39;);&#125;;function funcB() &#123;    $i = rand(0.1,1);    sleep($i);    echo(&#39;function B&#39;);&#125;;funcA();funcB();/*** result: * function A* function B*/</code></pre><p>隨機生成一個 sleep time 給<code>funcA</code>和<code>funcB</code> 但由於 PHP 是同步處理的 程式會由上到下，一行一行處理 所以結果一定是先A後B 也就是</p><pre><code>function Afunction B</code></pre><p>這種情況下就_不會_用到callback</p><h3 id="情境2-在-JS-裡"><a href="#情境2-在-JS-裡" class="headerlink" title="情境2: 在 JS 裡"></a>情境2: 在 JS 裡</h3><p>相較於 PHP，JS是非同處理的 所以我們來看一段類似 php 的 code</p><pre><code class="js">&lt;script&gt;var funcA = function()&#123;  var i = Math.random();  window.setTimeout(function()&#123;    console.log(&#39;function A&#39;);  &#125;, i * 1000);&#125;;var funcB = function()&#123;  var i = Math.random();  window.setTimeout(function()&#123;    console.log(&#39;function B&#39;);  &#125;, i * 1000);&#125;;funcA();funcB();/*** result:* 可能是* function A* function B** 也可能是* function B* function A*/</code></pre><p>我們一樣也生成一個隨機的 timeout 給<code>funcA</code>和<code>funcB</code> 但在執行後 由於 JS 為非同步處理 也就是說<code>funcB()</code>不會等<code>funcA()</code>處理完才處理 所以最後<code>console.log</code>的結果會是不確定的，可能是</p><pre><code>function Afunction B</code></pre><p>也可能是</p><pre><code>function Bfunction A</code></pre><p>這樣就有點為難 假如說我們一定要讓<code>funcA</code>先，<code>funcB</code>後執行的話，那該怎麼辦呢? 這就是<code>Callback</code>上場的時候啦</p><h3 id="使用-callback-來解決-JS-非同步處理問題"><a href="#使用-callback-來解決-JS-非同步處理問題" class="headerlink" title="使用 callback 來解決 JS 非同步處理問題"></a>使用 callback 來解決 JS 非同步處理問題</h3><p>來個簡單的例子</p><pre><code class="js">var funcA = function(callback)&#123; // 我們在funcA裡先代一個callback參數進來  var i = Math.random();  // 這邊就都一樣  window.setTimeout(function()&#123;    console.log(&#39;function A&#39;);    if( typeof callback === &#39;function&#39; )&#123; // 如果callback是function的話 就執行callback();      callback();    &#125;  &#125;, i * 1000);&#125;;var funcB = function()&#123;  var i = Math.random();  window.setTimeout(function()&#123;    console.log(&#39;function B&#39;);  &#125;, i * 1000);&#125;;// 將 funcB 作為參數帶入 funcA()funcA( funcB );/*** result:* 一定是:* function A* function B*/</code></pre><p>從上面就看的出來 如果把<code>funcB</code>當作是一個參數丟到<code>funcA</code>裡去，而段<code>funcA</code>裡有定義<code>Callback</code>的話 <code>funcB</code>就會成為一個<code>Callback</code> function 要等到在<code>funcA</code>裡被呼叫的時候，才會被執行</p><h2 id="實務操作"><a href="#實務操作" class="headerlink" title="實務操作"></a>實務操作</h2><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre><code class="js">// 首先我們呼叫post這個function，並傳入相關參數與callback functionpost(11, 22, &#39;Ready&#39;, &#39;&#39;, function (data)&#123; //區塊A    console.log(111); // output 就讓它是111吧&#125;, undefined, 77, 88);function post(shopId, itemId, status, time, _afterCallback, _errorCallback, isAuto, Hash) &#123; // 區塊B    var delayTime = 1000;    // 在post function 裡再寫一個function去call ajax，裡面也有一個completeCallback    reserveCallback(shopId, itemId, status, function()&#123; // 區塊C        $.ajax(&#123;            type: &#39;POST&#39;,            url: &#39;/entry/ajax/update&#39;,            dataType:&#39;json&#39;,            async:true,            data: &#123;                    &#39;shopId&#39;:shopId,                    &#39;itemId&#39;:itemId,                    &#39;status&#39;:status,                    &#39;time&#39;:time,                    &#39;isAuto&#39;:isAuto,                    &#39;Hash&#39;:Hash            &#125;,            success: function(data)&#123;                if (_afterCallback !== undefined)&#123;                    _afterCallback(data);                &#125;                console.log(222);            &#125;,            error: function(ret)&#123;                if (_errorCallback !== undefined)&#123;                    _errorCallback();                &#125;                if (_afterCallback !== undefined)&#123; // 關鍵A                    _afterCallback();                &#125;                console.log(333); // 關鍵B            &#125;,            complete: function(ret)&#123;                console.log(444); // 關鍵C            &#125;        &#125;);    &#125;, delayTime);&#125;function reserveCallback(shopId, itemId, status, callback, delayTime)&#123; // 區塊D    console.log(555);    var closureCallback = callback;    runReservedTimerId = setTimeout(function()&#123; // 區塊E        console.log(666);        lockCallback = true        closureCallback();        delete closureCallback;    &#125;, delayTime);&#125;</code></pre><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><p>好的 根據之前的說明 我們的預期會印出來的東西應該是這樣吧!</p><pre><code>555666333444111</code></pre><p>但很不幸地，結果卻是</p><pre><code>555666111333444</code></pre><p>什麼情況? 不對欸~ <img src="https://growingdna.com/wp-content/uploads/2020/01/ScrawnyExhaustedBedlingtonterrier-size_restricted.gif" alt="Not Correct"> 為什麼呢? 照這樣子看來，順序是: 區塊D-&gt;區塊E-&gt;區塊A-&gt;區塊C</p><p>原因在哪? 關鍵就在於<code>_afterCallback();</code>的位置</p><p>在<code>關鍵A</code>的地方，我先寫了<code>_afterCallback()</code> 以致於程式又跳回<code>區塊A</code> 把<code>function(data)</code>給執行完後 (印出111) 才會回來<code>關鍵B</code>和<code>關鍵C</code>去把這兩個333和444印出來 最後的結果才會是</p><pre><code>555666111333444</code></pre><p>很好! 經過此役 希望可以不用再苦於callback之中 希望有幫助到閱讀這篇文章的捧油 有什麼問題也可以留言提問喔!</p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> Javascript </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP + Laravel 雞排聯盟API實作: 產出 table 及可供操作的物件</title>
      <link href="/2020/01/02/chickenfilletaffiliate-api-createmodel/"/>
      <url>/2020/01/02/chickenfilletaffiliate-api-createmodel/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://growingdna.com/chickenfilletaffiliate-api-preface/">上一篇文章</a>我們已經說明完這個API的目的及方向 本篇就來 share 一下實作 加深印象的同時也讓對 API 實作有興趣的捧油一起參考討論</p><h2 id="產生model物件"><a href="#產生model物件" class="headerlink" title="產生model物件"></a>產生model物件</h2><p><code>php artisan make:model ChickenFilletShop -rmc</code></p><ul><li>r: 預先載入CRUD方法</li><li>m: 預產生migration</li><li>c: 預產生controller</li></ul><h3 id="完成指令後會看到以下畫面"><a href="#完成指令後會看到以下畫面" class="headerlink" title="完成指令後會看到以下畫面"></a>完成指令後會看到以下畫面</h3><p><img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-26-%E4%B8%8B%E5%8D%884.06.48.png"> ps. 指令有加入r變數，所以打開ChickenFilletShopController.php可以看到已經有很多方法寫在裡面。 ps. 參照路由指令看route list : <code>php artisan route:list</code> ps. 這邊如果有在route.php加入<code>Route::apiResource(&#39;chickenFilletShop&#39;, &#39;ChickenFilletShopController&#39;);</code>的話 就會有 <img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-23-%E4%B8%8B%E5%8D%886.07.28-800x134.png"> 意指: 如果打<code>http://chickenfillet.test/api/chickenFilletShop</code> 用 <code>GET</code> http method的話， 就會route到 <code>App\Http\Controllers\ChickenFilletShopController</code>的 index 方法</p><ul><li>而我們若要新增一筆資料，就會用<code>POST</code> method來打store方法</li></ul><h2 id="使用-migration-產生-table"><a href="#使用-migration-產生-table" class="headerlink" title="使用 migration 產生 table"></a>使用 migration 產生 table</h2><ul><li>Migration 可以想像成是 db 的版控，目的是為了讓團隊成員都能擁有一樣的 table，開發時才不會多東少西漏</li><li>參考資料: <a href="https://laravel.com/docs/6.x/migrations">https://laravel.com/docs/6.x/migrations</a></li><li>在<code>產生 model 物件</code>的時候，由於加入了 -m，所以已經預產生 migration 檔案<code>2019_12_23_095249_create_chicken_fillet_shops_table.php</code></li></ul><h3 id="migration-說明"><a href="#migration-說明" class="headerlink" title="migration 說明"></a>migration 說明</h3><ul><li><p><code>up</code>: 指執行 migration 後會產生的table及欄位設定</p></li><li><p><code>down</code>: 指在將 migration 給 rollback (有點像是 git 裡的reset)後會執行的動作</p></li><li><p>為了達到<a href="https://growingdna.com/chickenfilletaffiliate-api-preface/">前一篇文章:前言</a>的目的，初步設定 table 欄位如下:</p><pre><code class="php">public function up()&#123;    Schema::create(&#39;chicken_fillet_shops&#39;, function (Blueprint $table) &#123;        $table-&gt;bigIncrements(&#39;id&#39;);        $table-&gt;unsignedInteger(&#39;type_id&#39;)-&gt;comment(&#39;雞排分類&#39;);        $table-&gt;string(&#39;name&#39;)-&gt;comment(&#39;雞排店名&#39;);        $table-&gt;string(&#39;operation_time&#39;)-&gt;nullable()-&gt;comment(&#39;營業時間&#39;);        $table-&gt;string(&#39;area&#39;)-&gt;nullable()-&gt;comment(&#39;店家所在地區&#39;);        $table-&gt;boolean(&#39;chain_store&#39;)-&gt;default(false)-&gt;comment(&#39;是否為連鎖店&#39;);        $table-&gt;text(&#39;feature&#39;)-&gt;nullable()-&gt;comment(&#39;店家特色&#39;);        $table-&gt;text(&#39;phone_order&#39;)-&gt;nullable()-&gt;comment(&#39;可否電話訂餐/外送&#39;);        $table-&gt;timestamps();    &#125;);&#125;/** * Reverse the migrations. * * @return void */public function down()&#123;    Schema::dropIfExists(&#39;chicken_fillet_shops&#39;);&#125;</code></pre></li></ul><h3 id="migration-步驟"><a href="#migration-步驟" class="headerlink" title="migration 步驟"></a>migration 步驟</h3><p>[step]1[&#x2F;step] 新增db</p><p>mac 用戶可以使用<code>sequelPro</code>來新增database</p><p>[step]2[&#x2F;step] 設定<code>.env</code>檔</p><p>在專案資料夾下的<code>.env</code>檔內可以修改db相關設定</p><pre><code>DB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=chicken_fillet // 剛剛用sequelPro新增的databaseDB_USERNAME=root // 登入idDB_PASSWORD= // 登入pw</code></pre><p>[step]3[&#x2F;step] 執行 migration</p><p>鍵入 command line <code>php artisan migrate</code> <img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-24-%E4%B8%8A%E5%8D%8810.08.15.png"></p><p>接著在<code>sequelPro</code>裡面就可以看到新增的table &amp; 欄位了 <img src="https://growingdna.com/wp-content/uploads/2020/01/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-26-%E4%B8%8B%E5%8D%884.34.55-800x72.png"> 這樣就完成 migration，並新增了名為<code>chicken_fillet_shops</code>的 table，及相關的 controller了!</p><h2 id="設定-Model-可以被批量賦值的屬性"><a href="#設定-Model-可以被批量賦值的屬性" class="headerlink" title="設定 Model 可以被批量賦值的屬性"></a>設定 Model 可以被批量賦值的屬性</h2><p>為確保 db 的安全性，Laravel 須要我們設定批量賦值的屬性 也就是說如果現在如果前端要求更改 id , 但我們後端這邊並無將 id 屬性設定為可以批量賦值的話 系統就會報錯</p><pre><code class="php">namespace App;use Illuminate\Database\Eloquent\Model;class ChickenFilletShop extends Model&#123;    /**     * 可以被批量賦值的屬性。     *     * @var array     */    protected $fillable = [        &#39;type_id&#39;,        &#39;name&#39;,        &#39;operation_time&#39;,        &#39;area&#39;,        &#39;chain_store&#39;,        &#39;feature&#39;,        &#39;phone_order&#39;,    ];&#125;</code></pre><p>好的，以上就大略完成了db相關設置 若有任何不清楚或有誤解的地方可以隨時留言讓我知道 我很樂意回覆&amp;修正!</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><p>最後附上系列文章</p><ol><li><a href="https://growingdna.com/chickenfilletaffiliate-api-preface/">PHP + Laravel 雞排聯盟API實作: 前言</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-createmodel/">PHP + Laravel 雞排聯盟API實作: 產出 table 及可供操作的物件</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-crud">PHP + Laravel 雞排聯盟API實作: CRUD 增刪改查</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VoiceTube Hero 零元挑戰心得</title>
      <link href="/2019/12/31/voicetube-hero-zero-challenge/"/>
      <url>/2019/12/31/voicetube-hero-zero-challenge/</url>
      
        <content type="html"><![CDATA[<p>這次偶然看到 <a href="https://tw.voicetube.com/hero">VoiceTube_Hero</a> 的零元挑戰機會<br>想說該是好好念英文的時候了<br>趁這個機會 報一波 也因此有了這個心得文</p><h2 id="什麼是-VoiceTube-Hero-零元挑戰"><a href="#什麼是-VoiceTube-Hero-零元挑戰" class="headerlink" title="什麼是 VoiceTube Hero 零元挑戰"></a>什麼是 VoiceTube Hero 零元挑戰</h2><p>零元挑戰是 <a href="https://tw.voicetube.com/hero">Hero</a> 這個線上英文學習平台所推出的一個活動<br>基本上就是在期限內完成他們所規定的課程時數後，就可以把報名費退給你的活動<br>(當作是日本大胃王挑戰好像比較好理解XD)<br>更多詳細規則可以點擊這裡: <a href="https://tw.voicetube.com/hero/faq#topic14">https://tw.voicetube.com/hero/faq#topic14</a><br>本文就是完賽後的小小心得 希望幫助到對這個課程有興趣的捧油參考</p><h2 id="完賽心得"><a href="#完賽心得" class="headerlink" title="完賽心得"></a>完賽心得</h2><p>完成後簡單寫一下優缺點 給之後有興趣的捧由參考參考</p><h3 id="課程優點"><a href="#課程優點" class="headerlink" title="課程優點:"></a>課程優點:</h3><ol><li>課程主題多元: 相關的內容是滿廣泛的，從網路、環保、生物到人文的主題都有，除了可以學英文外也是不失為是一個增廣見廣的一個管道。</li><li>強迫練習: 因為是零元挑戰，等於一個月內要上90堂課，挺熱血的。</li><li>手機、電腦皆可上課: 等人空檔、休息時間都可以上一點衝進度，不過還是建議用電腦上，打字飛快，效率UP UP!</li></ol><h3 id="課程缺點"><a href="#課程缺點" class="headerlink" title="課程缺點:"></a>課程缺點:</h3><ol><li>無法自選主題: 以我的課程為例，總共30堂，其中有不少冷門的議題 (如VW的排氣偽造議題)，沒興趣的話看了痛苦，複習時更痛苦啊~。</li><li>補錄音問題: 若臨時不能錄，補錄時的UX設計個人覺得不太順，需要一個一個點選錄音檔，如果網速稍不順的話，等的時間可能會比錄音的時間長。</li><li>電腦版的”字典搜索”UX設計不順: 手機版的字典搜索個人覺得滿好用的(長按單字即可)，但電腦版的要點右上腳的放大鏡，然後再點搜索欄才能搜尋，個人覺得不太直覺，若可以有熱鍵搜尋 (如在回答選擇題時可以直接鍵入A&#x2F;B&#x2F;C&#x2F;D來選答案，而不用用滑鼠點)的話，應該會更方便。</li></ol><h2 id="個人小結"><a href="#個人小結" class="headerlink" title="個人小結"></a>個人小結</h2><p>學英文是一輩子的事啊<br>就像我<a href="https://growingdna.com/principle-of-selling-your-time/">之前文章</a>提到的<br>出售時間的第一個原則就是: “成長是關鍵”</p><p>也就是說，決定是否要做這件事情<br>關鍵就在於它能不能讓你成長<br>而學英文肯定是有利的 (至少在小叮噹發明翻譯蒟蒻之前吧XD)</p><p>加油! 共勉之<br>有問題的話也歡迎在留言發問喔<br>我很樂意與各位蕉流蕉流!</p>]]></content>
      
      
      <categories>
          
          <category> 雜學清談 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在 AWS EC2 上建立 LARAVEL 專案</title>
      <link href="/2019/12/23/aws-ec2-deploy-laravel/"/>
      <url>/2019/12/23/aws-ec2-deploy-laravel/</url>
      
        <content type="html"><![CDATA[<pre><code> 本篇文章將介紹如何在 AWS 上建立一個 Laravel 專案</code></pre><p>可以分為三大塊</p><pre><code>1. 建立 Instance2. SSH 連線至 Server3. Server 環境設定</code></pre><h1 id="建立-Instance"><a href="#建立-Instance" class="headerlink" title="建立 Instance"></a>建立 Instance</h1><ul><li>選用AMI<ul><li>套件管理工作: Yum</li></ul></li></ul><h1 id="SSH-連線至-Server"><a href="#SSH-連線至-Server" class="headerlink" title="SSH 連線至 Server"></a>SSH 連線至 Server</h1><ul><li>聽 80 Port並新增連線<ul><li>Dashboard→instance→security group→inbound</li><li><img src="https://i.imgur.com/QgU70xr.png"></li></ul></li><li>改根目錄為:<ul><li><code>/var/html/&lt;projectName&gt;/public</code><ul><li>Allow Override: All</li><li>因為對外的連接點是public裡的index, 而本機valet因為已經設好了所以不用此設定</li></ul></li></ul></li><li>SSH 連線<ul><li><p>Command Line</p><pre><code>ssh -i ~/.ssh/mykeypair.pem ec2-user@&lt;yourPublicIP&gt;</code></pre></li></ul></li></ul><h1 id="Server-環境設定"><a href="#Server-環境設定" class="headerlink" title="Server 環境設定"></a>Server 環境設定</h1><ul><li><p>安裝PHP</p><pre><code>sudo yum install php72</code></pre></li><li><p>安裝套件</p><pre><code>sudo yum install php72-mbstringsudo yum install php72-bcmathsudo yum install php72-pdosudo yum install php72-mysqlndsudo yum install php72-gd.x86_64</code></pre></li><li><p>Apache 設置</p><ul><li><p>安裝</p><pre><code>sudo yum install httpd24</code></pre></li><li><p>啟動</p><pre><code>sudo service httpd start</code></pre></li><li><p>設定開機自動重啟</p><pre><code>sudo chkconfig httpd on</code></pre></li><li><p>確認Httpd已啟用</p><pre><code>[ec2-user ~]$ chkconfig --list httpdhttpd           0:off   1:off   2:on    3:on    4:on    5:on    6:off</code></pre></li><li><p>安裝 SSL module</p><pre><code>sudo yum install mod24_ssl</code></pre></li><li><p>設定檔案許可</p><ul><li><img src="https://i.imgur.com/xS7QhA9.png"></li><li>預設在&#x2F;var&#x2F;www裡的檔案只給root用 但我們要給es2-user也可以用 所以須要設定 這邊是將 ec2-user 新增至 apache 群組，以向 apache 群組授予 &#x2F;var&#x2F;www 目錄的所有權，並指派寫入許可。</li><li>將使用者 ( ec2-user) 新增至 apache 群組: $ sudo usermod -a -G apache ec2-user</li><li>登出並重新登入，以取得新的群組並驗證成員資格。<ul><li><code>$ exit</code></li><li><code>$ groups</code></li><li><img src="https://i.imgur.com/RViLZOe.png"></li><li>原本是ec2-user wheel, 在變更及exit再重新連接後 會變成 ec2-user wheel apache</li></ul></li><li>將 &#x2F;var&#x2F;www 的群組所有權及其內容變更為 apache 群組。<ul><li><code>$ sudo chown -R ec2-user:apache /var/www</code></li><li>驗證一下是否成功</li><li><img src="https://i.imgur.com/L4uGPoK.png"></li><li>Ref: <a href="http://linux.vbird.org/linux_basic/0220filemanager.php">http://linux.vbird.org/linux_basic&#x2F;0220filemanager.php</a><ul><li>可參閱linux 指令，包括<code>find、exec、-p、-t、加到$PATH路徑的作法</code></li></ul></li><li>新增群組寫入許可並在將來的子目錄上設定群組 ID，變更 &#x2F;var&#x2F;www 及其子目錄的目錄許可。<ul><li><p>把當下的子資料夾也變成2775的權限</p><pre><code>sudo chmod 2775 /var/www(</code></pre></li><li><p>把之後加進去的資料夾也變成2775的權限</p><pre><code>find /var/www -type d -exec sudo chmod 2775 &#123;&#125; \;</code></pre></li><li><p>現在，ec2-user (以及 apache 群組未來的任何成員) 可以新增、刪除和編輯 Apache 文件根目錄中的檔案</p><ul><li>chmod 2775 意義: <a href="https://forums.oscommerce.com/topic/352153-is-chmod-2775-secure/">https://forums.oscommerce.com/topic/352153-is-chmod-2775-secure/</a><ul><li>The first digit of a 4-character permission (in this case, the “2”) specifies the setuid mode (&#x3D;4), the setgid mode (&#x3D;2), and the sticky mode (&#x3D;1). These values are added together in a manner identical to the read&#x2F;write&#x2F;executable permissions above. More information is here.</li><li>簡單來說 第一個2的意思是 在這個資料夾下面的子資料笑也會是有相同的權限 意即775</li></ul></li><li>Find、type、exec 意義: 以find &#x2F;var&#x2F;www -type d -exec sudo chmod 2775 {} ;為例，就是去找&#x2F;var&#x2F;www這個資料夾裡 type為directory的東西(即資料夾) 然後做額外的動作(-exec) 設權限為2775, 後面的大括號+右斜線是遞迴，意即這個資料夾下面也做一樣的事情(複寫改權限)</li></ul></li></ul></li></ul></li></ul></li><li><p>測試LAMP 伺服器</p><ul><li><p>在 Apache 文件根資料夾中建立 PHP 檔案。</p><pre><code>$ echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt; /var/www/html/phpinfo.php</code></pre></li><li><p>在 browser 輸入 IP + php位址</p><ul><li><a href="http://15.164.49.140/phpinfo.php">http://15.164.49.140/phpinfo.php</a></li><li>若無畫面 可以檢查套件是否正確安裝<ul><li>sudo yum list installed grep php<ul><li><p>grep後面可以加 php、httpd、mysql等</p></li><li><p>AWS 官方:</p><pre><code>[ec2-user ~]$ sudo yum list installed httpd24 php70 mysql56-server php70-mysqlnd Loaded plugins: priorities, update-motd, upgrade-helper Installed Packages httpd24.x86_64 2.4.25-1.68.amzn1 @amzn-updates mysql56-server.x86_64 5.6.35-1.23.amzn1 @amzn-updates php70.x86_64 7.0.14-1.20.amzn1 @amzn-updates php70-mysqlnd.x86_64 7.0.14-1.20.amzn1 @amzn-updates</code></pre></li></ul></li></ul></li></ul></li><li><p>刪除 phpinfo.php 檔案。雖然這可能是有用的資訊，但基於安全因素，不應將其廣播至網際網路。</p><pre><code></code></pre></li></ul></li><li><p>資料庫伺服器</p><ul><li><p>安裝Mysql</p><pre><code>$ sudo yum install mysql57-server</code></pre></li><li><p>啟動Mysql</p><pre><code>$ sudo service mysqld start</code></pre></li><li><p>設定Mysql於reboot時重啟</p><pre><code>$ sudo chkconfig mysqld on</code></pre></li><li><p>保護資料庫伺服器</p><pre><code>sudo mysql_secure_installation</code></pre></li><li><p>遠端連線</p><pre><code> GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION; FLUSH PRIVILEGES;</code></pre><ul><li>第一句是說給all 權限給 root 這個帳號，%代表從哪登入都可 (原來是localhost, 意即只有 remote那台本機) 藉password</li><li>第二句是立刻動作</li><li>Sequel Pro就用public IP (AWS裡的)登入 帳號就是上面寫的 (root) 密碼亦同 (password)</li></ul></li></ul></li><li><p>Composer</p><ul><li><p>安裝composer (可參考官網)</p><pre><code>php -r &quot;copy(&#39;https://getcomposer.org/installer&#39;, &#39;composer-setup.php&#39;);&quot;php -r &quot;if (hash_file(&#39;sha384&#39;, &#39;composer-setup.php&#39;) === &#39;48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5&#39;) &#123; echo &#39;Installer verified&#39;; &#125; else &#123; echo &#39;Installer corrupt&#39;; unlink(&#39;composer-setup.php&#39;); &#125; echo PHP_EOL;&quot;php composer-setup.phpphp -r &quot;unlink(&#39;composer-setup.php&#39;);&quot;</code></pre></li><li><p>把composer移到可以全域使用</p><pre><code>sudo mv composer.phar /usr/local/bin/composer</code></pre></li></ul></li><li><p>Git</p><ul><li>安裝<code>sudo yum install -y git</code></li></ul></li><li><p>部署</p><ul><li><p>Cd 到 &#x2F;var&#x2F;www&#x2F;html資料夾</p></li><li><p>Clone 專案</p></li><li><p>部署 <code>.env</code> 檔</p></li><li><p>以Composer安裝composer.json</p></li><li><p>改 Apache 的預設讀取資料夾位置</p><pre><code>$ sudo vim /etc/httpd/conf/httpd.conf</code></pre></li></ul><p>裡面要改的內容:</p><pre><code>DocumentRoot &quot;/var/www/html/PayMeChien/public&quot; (這個documentRoot不能不設) Relax access to content within /var/www.&lt;Directory &quot;/var/www/html/PayMeChien/public&quot;;&gt; (這個Directory不能不設, AllowOverride也要改成All)    AllowOverride All    # Allow open access:    Require all granted&lt;/Directory&gt;</code></pre><p>- 重啟apache <code>$ sudo service httpd restart</code></p><h1 id="恭喜-大功告成囉"><a href="#恭喜-大功告成囉" class="headerlink" title="恭喜! 大功告成囉!"></a>恭喜! 大功告成囉!</h1></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP + Laravel 雞排聯盟API實作: 前言</title>
      <link href="/2019/12/12/chickenfilletaffiliate-api-preface/"/>
      <url>/2019/12/12/chickenfilletaffiliate-api-preface/</url>
      
        <content type="html"><![CDATA[<h2 id="起心動念"><a href="#起心動念" class="headerlink" title="起心動念"></a>起心動念</h2><p>由於筆者本身很喜歡吃雞排 基本上可以說把家裡、公司附近的雞排店都吃盡了 但由於店家太多、特色又各有不同 價格的落差更是極大 (最近很流行”開源社”的35元雞排吶) 對於一個初入雞排的饕客來說是相當大的困擾 所以有了個想法，要來建立一個滿足雞排饕客的API</p><h2 id="初步可以達到的功能"><a href="#初步可以達到的功能" class="headerlink" title="初步可以達到的功能"></a>初步可以達到的功能</h2><ol><li>建雞排店家資料庫 (有店名、價位、位置、口位、特色的欄位)</li><li>搜索排序 (如: 離我最近、價格最低、評價最好、綜合評價)</li><li>會員機制 (權限管理、評價管理)</li><li>新聞推播 (最新店家、海外feedback)</li><li>我的最愛</li></ol><h2 id="三大步驟"><a href="#三大步驟" class="headerlink" title="三大步驟"></a>三大步驟</h2><p>一、產生table及可供操作的物件 (Object) 二、可操作物件的動作 (Action): CRUD 三、權限驗證機制</p><h2 id="使用工具-環境"><a href="#使用工具-環境" class="headerlink" title="使用工具&#x2F;環境"></a>使用工具&#x2F;環境</h2><ol><li>Local 環境: Valet</li><li>DB: MySQL &amp; Sequel Pro</li><li>Editor: PhpStorm</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li>安裝 Laravel: <a href="https://laravel.com/docs/6.x/installation">https://laravel.com/docs/6.x/installation</a></li><li>Valet: <a href="https://laravel.com/docs/6.x/valet">https://laravel.com/docs/6.x/valet</a></li></ol><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><p>最後附上系列文章</p><ol><li><a href="https://growingdna.com/chickenfilletaffiliate-api-preface/">PHP + Laravel 雞排聯盟API實作: 前言</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-createmodel/">PHP + Laravel 雞排聯盟API實作: 產出 table 及可供操作的物件</a></li><li><a href="https://growingdna.com/chickenfilletaffiliate-api-crud">PHP + Laravel 雞排聯盟API實作: CRUD 增刪改查</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL 語法筆記</title>
      <link href="/2019/12/05/sql-syntax-note/"/>
      <url>/2019/12/05/sql-syntax-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Between"><a href="#Between" class="headerlink" title="Between"></a>Between</h2><pre><code class="sql">SELECT * FROM ProductsWHERE Price BETWEEN 50 AND 60;</code></pre><h2 id="like-後面要加"><a href="#like-後面要加" class="headerlink" title="like: 後面要加%"></a>like: 後面要加%</h2><pre><code class="sql">SELECT * FROM CustomersWHERE City LIKE &#39;s%&#39;;</code></pre><h2 id="distinct-後面好像只能加一個"><a href="#distinct-後面好像只能加一個" class="headerlink" title="distinct: 後面好像只能加一個"></a>distinct: 後面好像只能加一個</h2><pre><code class="sql">SELECT DISTINCT Country FROM Customers;-- 這樣子每一個country就只會跑一筆record出來SELECT Count(*) AS DistinctCountriesFROM (SELECT DISTINCT Country FROM Customers);</code></pre><h2 id="where-AND-OR-NOT"><a href="#where-AND-OR-NOT" class="headerlink" title="where + AND OR NOT"></a>where + AND OR NOT</h2><pre><code class="sql">-- AND  SELECT * FROM CustomersWHERE Country=&#39;Germany&#39; AND City=&#39;Berlin&#39;;-- ORSELECT * FROM CustomersWHERE Country=&#39;Germany&#39; OR Country=&#39;Spain&#39;;-- NOT : 接著條件關鍵字的前面SELECT * FROM CustomersWHERE NOT Country=&#39;Germany&#39;;SELECT * FROM ProductsWHERE ProductName NOT BETWEEN &#39;Carnarvon Tigers&#39; AND &#39;Mozzarella di Giovanni&#39;ORDER BY ProductName;</code></pre><h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><pre><code class="sql">SELECT CustomerName, ContactName, AddressFROM CustomersWHERE Address IS NOT NULL;</code></pre><h2 id="Insert-Into-建立一筆新的record"><a href="#Insert-Into-建立一筆新的record" class="headerlink" title="Insert Into: 建立一筆新的record"></a>Insert Into: 建立一筆新的record</h2><pre><code class="sql">-- Insert 到所有columnINSERT INTO table_nameVALUES (value1, value2, value3, ...);-- Insert 部份INSERT INTO Customers (CustomerName, City, Country)VALUES (&#39;Cardinal&#39;, &#39;Stavanger&#39;, &#39;Norway&#39;);</code></pre><h2 id="Update-更新既有的record，一定要加where-否則整個表都會被update"><a href="#Update-更新既有的record，一定要加where-否則整個表都會被update" class="headerlink" title="Update: 更新既有的record，一定要加where 否則整個表都會被update"></a>Update: 更新既有的record，一定要加where 否則整個表都會被update</h2><pre><code class="sql">UPDATE CustomersSET ContactName = &#39;Alfred Schmidt&#39;, City= &#39;Frankfurt&#39;WHERE CustomerID = 1;</code></pre><h2 id="Delete-刪指定table的record-也可以把table的內容全刪掉"><a href="#Delete-刪指定table的record-也可以把table的內容全刪掉" class="headerlink" title="Delete: 刪指定table的record, 也可以把table的內容全刪掉"></a>Delete: 刪指定table的record, 也可以把table的內容全刪掉</h2><pre><code class="sql">DELETE FROM Customers WHERE CustomerName=&#39;Alfreds Futterkiste&#39;;</code></pre><h2 id="MIN-and-MAX"><a href="#MIN-and-MAX" class="headerlink" title="MIN() and MAX()"></a>MIN() and MAX()</h2><pre><code class="sql">SELECT MIN(Price) AS SmallestPriceFROM Products;</code></pre><h2 id="COUNT-AVG-and-SUM"><a href="#COUNT-AVG-and-SUM" class="headerlink" title="COUNT(), AVG() and SUM()"></a>COUNT(), AVG() and SUM()</h2><pre><code class="sql">SELECT COUNT(ProductID)FROM Products;SELECT AVG(Price)FROM Products;SELECT SUM(Quantity)FROM OrderDetails;</code></pre><h2 id="In-用括號括起來，各個字串用引號包並用逗號格開"><a href="#In-用括號括起來，各個字串用引號包並用逗號格開" class="headerlink" title="In: 用括號括起來，各個字串用引號包並用逗號格開"></a>In: 用括號括起來，各個字串用引號包並用逗號格開</h2><pre><code class="sql">SELECT * FROM CustomersWHERE Country IN (&#39;Germany&#39;, &#39;France&#39;, &#39;UK&#39;);SELECT * FROM CustomersWHERE Country NOT IN (&#39;Germany&#39;, &#39;France&#39;, &#39;UK&#39;);</code></pre><h2 id="UNION-預設是distinct"><a href="#UNION-預設是distinct" class="headerlink" title="UNION: 預設是distinct"></a>UNION: 預設是distinct</h2><pre><code class="sql">SELECT City FROM CustomersUNION SELECT City FROM SuppliersORDER BY City;-- 如果要全部的話SELECT City FROM CustomersUNION ALLSELECT City FROM SuppliersORDER BY City;</code></pre><h2 id="group-by-把有指令欄位中相同value的record給group起來"><a href="#group-by-把有指令欄位中相同value的record給group起來" class="headerlink" title="group by: 把有指令欄位中相同value的record給group起來"></a>group by: 把有指令欄位中相同value的record給group起來</h2><pre><code class="sql">-- 把有county 是一樣的record給group起來SELECT COUNT(CustomerID), CountryFROM CustomersGROUP BY Country;</code></pre><h2 id="Having-有運算時設條件-Sum-Count-Avg"><a href="#Having-有運算時設條件-Sum-Count-Avg" class="headerlink" title="Having: 有運算時設條件 (Sum(), Count(), Avg())"></a>Having: 有運算時設條件 (Sum(), Count(), Avg())</h2><pre><code class="sql">SELECT COUNT(CustomerID), CountryFROM CustomersGROUP BY CountryHAVING COUNT(CustomerID) &gt; 5;</code></pre><h2 id="Exists-和where配合的條件限制"><a href="#Exists-和where配合的條件限制" class="headerlink" title="Exists 和where配合的條件限制"></a>Exists 和where配合的條件限制</h2><pre><code class="sql">SELECT SupplierNameFROM SuppliersWHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price &lt; 20);</code></pre><h2 id="ANY-and-ALL"><a href="#ANY-and-ALL" class="headerlink" title="ANY and ALL"></a>ANY and ALL</h2><pre><code class="sql">-- Any: 只要中一個就可SELECT ProductNameFROM ProductsWHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);-- All: 要全部都符合 SELECT ProductNameFROM ProductsWHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);</code></pre><h2 id="CREATE-DROP-BACKUP-DATABASE"><a href="#CREATE-DROP-BACKUP-DATABASE" class="headerlink" title="CREATE&#x2F;DROP&#x2F;BACKUP DATABASE"></a>CREATE&#x2F;DROP&#x2F;BACKUP DATABASE</h2><pre><code class="sql">CREATE DATABASE testDB;DROP DATABASE testDB;BACKUP DATABASE testDBTO DISK = &#39;D:\backups\testDB.bak&#39;WITH DIFFERENTIAL;-- A differential back up reduces the back up time (since only the changes are backed up).</code></pre><h2 id="Create-table"><a href="#Create-table" class="headerlink" title="Create table"></a>Create table</h2><pre><code class="sql">CREATE TABLE Persons (    PersonID int,    LastName varchar(255),    FirstName varchar(255),    Address varchar(255),    City varchar(255));-- 從其他table來建tableCREATE TABLE TestTable ASSELECT customername, contactnameFROM customers;-- As 後面不能加東西 不是Alias</code></pre><h2 id="Alter-table"><a href="#Alter-table" class="headerlink" title="Alter table"></a>Alter table</h2><pre><code class="sql">ALTER TABLE CustomersADD Email varchar(255);ALTER TABLE CustomersDROP COLUMN Email;ALTER TABLE PersonsALTER COLUMN DateOfBirth year; -- 改變欄位屬性ALTER TABLE PersonsDROP COLUMN DateOfBirth;</code></pre><h2 id="contraint"><a href="#contraint" class="headerlink" title="contraint"></a>contraint</h2><pre><code class="sql">-- 放在 create table 或是alter  用來限制欄位的條件create table Employee(EID integer not null primary key,First_Name varchar(15) not null,Last_Name varchar(15) not null,Address varchar(30));</code></pre><h2 id="以上資料出自"><a href="#以上資料出自" class="headerlink" title="以上資料出自"></a>以上資料出自</h2><p><a href="https://www.w3schools.com/sql/">https://www.w3schools.com/sql/</a></p>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> 技術筆記 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WordPress + GCP + SSL：給你最完整的免費網站架設教學</title>
      <link href="/2019/11/29/wordpressgcpssl-free-website-tutorial/"/>
      <url>/2019/11/29/wordpressgcpssl-free-website-tutorial/</url>
      
        <content type="html"><![CDATA[<p>GCP (Google Cloud Platform) 和 AWS (Amazon Web Service) 應該是架站雲端主機的兩大山頭<br>其中我們的估狗大神 Google 對台灣的重視是有目共賭的<br>尤其實是在台灣彰化建了個資料中心後，整個服務與台灣的關係又是加深了一層<br>足顯誠意啊~  </p><p>近年來人人皆可架站<br>個人部落格、公司型象網站、網路商城等等多到不行<br>其中可以使用的網站架設資源百百種，為什麼要選 WordPress + GCP + SSL 呢?</p><h2 id="為什麼要使用-WordPress-GCP-SSL"><a href="#為什麼要使用-WordPress-GCP-SSL" class="headerlink" title="為什麼要使用 WordPress + GCP + SSL"></a><em>為什麼要使用</em> WordPress + GCP + SSL</h2><h3 id="1-免費雲端主機"><a href="#1-免費雲端主機" class="headerlink" title="1. 免費雲端主機"></a>1. 免費雲端主機</h3><p>Google 提供一年300USD的免費額度，已經足夠拿來架基本的WordPress<br>使用後喜歡或覺得流量要更大，到時候再來加價升級也非常彈性</p><h3 id="2-免費SSL"><a href="#2-免費SSL" class="headerlink" title="2. 免費SSL"></a>2. 免費SSL</h3><p>嘿丟! SSL 也是免費的<br>使用 Let’s Encrypt Certificate + WordPress 的 Really Simple SSL 免費外掛<br>就可以免費讓你的網站有 SSL 憑證<br>提升安全性之外，還強化了你的 SEO &amp; 網站排名，何樂而不為呢?</p><h3 id="3-連線速度快"><a href="#3-連線速度快" class="headerlink" title="3. 連線速度快"></a>3. 連線速度快</h3><p>所謂天下武功，唯快不破<br>不知道是不是因為 Google 在彰化建資料中心的關係<br>選對機器讓你上天堂啊<br>下面是用 Google PageSpeed Insights 測試的結果<br>比起 Siteground 之類的服務，整整快上一大截啊</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-28-%E4%B8%8B%E5%8D%885.35.43-800x359.png" alt="GCP speed test - Great!"></p><h3 id="4-簡單便利"><a href="#4-簡單便利" class="headerlink" title="4. 簡單便利"></a>4. 簡單便利</h3><p>Bitnami 已經提供了適合 WordPress 運作的範本<br>方便我們一鍵完成 WordPress 架站的工作<br>真心方便，5分鐘搞定!</p><hr><h2 id="網站架設流程"><a href="#網站架設流程" class="headerlink" title="網站架設流程"></a><em>網站架設流程</em></h2><p>以下就帶各位一步步來免費架設自己的網站<br>希望能多少幫助到少踩一點坑 (我自己是踩了滿多次的XD)<br>整個流程約略可切成四大塊:</p><p>一、申請 Google 帳號並啟用 GCP 雲端主機<br>二、開一台專門給 WordPress 用的機器並啟用 WordPress<br>三、將網域名稱 (Domain Name) 對應到 GCP 雲端主機<br>四、申請 SSL 憑證並設定自動更新</p><p>準備好了嗎? 最完整的免費網站架設教學要開始囉!</p><h3 id="一、申請-Google-帳號並啟用-GCP-雲端主機"><a href="#一、申請-Google-帳號並啟用-GCP-雲端主機" class="headerlink" title="一、申請 Google 帳號並啟用 GCP 雲端主機"></a>一、申請 Google 帳號並啟用 GCP 雲端主機</h3><p>這邊其實就是申請 Google 帳號，簡單帶一下<br>[step]1[&#x2F;step]<br>建立個人帳戶</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%889.55.38-1-800x376.png" alt="apply for google&#39;s account"></p><p>[step]2[&#x2F;step]<br>填入各種資訊，這邊就不另多做說明了</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%889.58.29-800x379.png" alt="info for registration"></p><h3 id="二、啟用-GCP-並開一台專門給-WordPress-用的主機"><a href="#二、啟用-GCP-並開一台專門給-WordPress-用的主機" class="headerlink" title="二、啟用 GCP 並開一台專門給 WordPress 用的主機"></a>二、啟用 GCP 並開一台專門給 WordPress 用的主機</h3><p>[step]1[&#x2F;step]<br>看到以下畫面後就可以確認<br>並點選右上角的【啟用】以免費試用GCP</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.04.34-1400x659.png" alt="click to confirm start using GCP"></p><p>[step]2[&#x2F;step]<br>再次填入各種資訊，其中信用卡並不會真的扣款<br>一年的免費期間到期 (或300USD額度用完) 後也會主動跟你確認是否要付款<br>可以放心驗證</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.07.10-800x377.png" alt="continue to start using GCP"></p><p>[step]3[&#x2F;step]<br>看到以下畫面，就代表已成功申請 GCP 囉!</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.27.48-1400x657.png" alt="succeed in starting GCP"></p><p>[step]4[&#x2F;step]<br>點選左側邊欄的【Marketplace】以套用 Bitnami 範本</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.31.11-800x376.png" alt="Click marketplace"></p><p>[step]5[&#x2F;step]<br>在搜索欄內輸入【wordpress ssl】並點選第一個【WordPress with NGINX and SSL Certified by Bitnami】<br>接著點選【在 COMPUTE ENGINE 上啟動】</p><ul><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.31.54-1-1400x656.png"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.32.07-1400x659.png"></p></li></ul><p>[step]6[&#x2F;step]<br>在【部署作業】中依照以下畫面中操作</p><ul><li>Zone: asia-east1-a: 這個是指台灣彰化的機房，速度應該是對我們台灣用戶來說是最快的</li><li>Machine type: 選小型 1.7 GB 記憶體，這個算夠用而且在免費額度範圍內</li><li>Boot Disk: 選【SSD Persistent Disk】，大小選【30】; 這也是夠用且在免費額度內</li><li>檢查一下右上方的每月預約費用，目前是$20.43，一年是$245.16，在免費額度 1年&#x2F;$300 USD 的範圍內</li><li>最後確認有點選【我接受 GCP Marketplace 服務條款】並點選【部署】</li></ul><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.36.59-1400x654.png"></p><p>[step]7[&#x2F;step]<br>看到以下左邊畫面代表 GCP 正在部署中<br>稍等一下後，看到右邊畫面就代表完成了!</p><ul><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.37.29-1400x640.png"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.39.07-1400x656.png"></p></li></ul><p>[step]8[&#x2F;step]<br>點選【Log into the admin panel】後<br>輸入畫面中的Admin user (帳號) 及 Admin password (密碼) 就可以登入 WordPress後台<br>在 settings 裡將 Site Language 改成繁體中文，最後點選 Save Changes 就可以看到中文界面</p><ul><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%8812.47.34-1400x656.png"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.40.59-1400x712.png"></p></li></ul><p>[step]9[&#x2F;step]<br>點選左上的【造訪網站】就可以看剛建好的網站囉!</p><ul><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.41.27-2-1400x706.png"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.41.40-1400x714.png"></p></li></ul><p>[step]10[&#x2F;step]<br>有發現右下角這個礙眼的Logo嗎?<br>要移除這傢伙，須要藉助一下我們神秘的終端機  </p><p>首先回到主控台，並點選 SSH 旁邊的倒三角形，再點選【在瀏覽視窗中開啟】<br>然後稍微等一下，就會進入神秘的終端機</p><ul><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%885.16.58-790x400.png" alt="ssl login"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.42.55.png"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.43.45.png"></p></li></ul><p>[step]11[&#x2F;step]<br>分別鍵入以下兩行指令後<br>回到 WordPress 主頁，就可以發現惱人的 Logo 不見囉!</p><pre><code>sudo /opt/bitnami/apps/wordpress/bnconfig --disable_banner 1sudo /opt/bitnami/ctlscript.sh restart nginx</code></pre><ul><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%885.27.32.png"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8810.45.06-1400x716.png"></p></li></ul><p>到這個階段其實網站就已經差不多了<br>不過我們還沒有 Domain，別人想要看我們的網站是非常困難的<br>所以接下來就來看怎麼設定 Domain 吧!</p><hr><h3 id="三、將網域名稱-Domain-Name-對應到-GCP-雲端主機"><a href="#三、將網域名稱-Domain-Name-對應到-GCP-雲端主機" class="headerlink" title="三、將網域名稱 (Domain Name) 對應到 GCP 雲端主機"></a>三、將網域名稱 (Domain Name) 對應到 GCP 雲端主機</h3><p>這部份原則上就是在 DNS 服務中設定 A Record 對應到你的 GCP 主機 IP 位址，等待生效後就能連結到網站<br>不過倒是有一件事要先做 : 把外部位址改成靜態的<br>做完這步後你的 IP 位址就會固定下來，不會因為重新啟動機器而變動</p><p>[step]1[&#x2F;step]<br>點選 VPC 網路 → 外部 IP 位址</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%885.52.41-635x800.png" alt="choose VPC internet"></p><p>[step]2[&#x2F;step]<br>點選靜態後，填一個自己好記的名稱<br>再點選保留，這樣子 IP 就會固定下來了!</p><ul><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%885.46.34-2-1400x415.png"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%885.59.15-1201x800.png"></p></li></ul><p>[step]3[&#x2F;step]<br>在 DNS 服務中設定 A Record 對應到你的 GCP 主機 IP 位址<br>我使用的是 <a href="https://www.namecheap.com/">NameCheap</a>，如何購買可以參考<a href="https://ithelp.ithome.com.tw/articles/10212243?sc=rss.qu">這篇文章</a><br>以下以一張圖片來圖解A Record設定</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%889.02.10-1400x726.png"></p><p>點選【Advanced DNS】，接著點下面的【ADD NEW RECORD】，最後照上圖填入，記得要把Value那邊改成你剛剛在 GCP 設定為靜態的那個外部 IP 喔!</p><p>好的! 這樣子其他人應該也可以透過你設定好的 Domain 連到你的網站了<br>(以我的為例，就是 growingdna.com)<br>最後一步，就是要做 SSL 憑證啦!</p><hr><h3 id="四、申請-SSL-憑證並設定自動更新"><a href="#四、申請-SSL-憑證並設定自動更新" class="headerlink" title="四、申請 SSL 憑證並設定自動更新"></a>四、申請 SSL 憑證並設定自動更新</h3><p>SSL 憑證可以讓提升你的網站 SEO ，先不說其他的<br>光是左上角可以看到鎖頭而不是一個問號或紅色警示<br>這感覺就是爽啊!</p><p>[step]1[&#x2F;step]<br>為了安裝免費的 SSL Let’s Encrypt Certificate<br>我們必須透過 SSH 連線到主機<br>這邊又會出動我們的神秘終端機</p><p>老樣子，回到主控台<br>並點選 SSH 旁邊的倒三角形，再點選【在瀏覽視窗中開啟】</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%885.16.58-1400x709.png" alt="SSH connection"></p><p>[step]2[&#x2F;step]<br>接著在神秘的終端機內貼上以下指令</p><pre><code>sudo /opt/bitnami/letsencrypt/scripts/generate-certificate.sh -m YOURMAIL -d YOURDOMAIN</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8811.05.20.png"></p><p>記得要把【YOURMAIL】和【YOURDOMAIN】改成自己的喔<br>以我的為例，mail就是<a href="mailto:&#x67;&#114;&#x6f;&#119;&#x69;&#x6e;&#103;&#x64;&#110;&#97;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#x67;&#114;&#x6f;&#119;&#x69;&#x6e;&#103;&#x64;&#110;&#97;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a>; domain 就是 growingdna.com</p><p>開始安裝後，系統會在中途詢問幾個問題，都只要輸入 y 同意即可<br>不過比較麻煩的是，Let’s encrypt 三個月就會失效<br>所以我們要自己寫一個腳本 (crontab) 來讓他自動更新</p><p>[step]3[&#x2F;step]<br>建立腳本自動更新 SSL</p><p>首先在神秘的終端機內輸入以下指令</p><pre><code>sudo nano /opt/bitnami/letsencrypt/scripts/renew-certificate.sh</code></pre><p>接下來就會出一個全黑的畫面<br>在這邊複製貼上以下內容</p><pre><code>#!/bin/bashsudo /opt/bitnami/ctlscript.sh stop nginxsudo /opt/bitnami/letsencrypt/lego --tls --email=&quot;EMAIL-ADDRESS&quot; --domains=&quot;DOMAIN&quot; --path=&quot;/opt/bitnami/letsencrypt&quot; renew --days 88sudo /opt/bitnami/ctlscript.sh start nginx</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8811.09.34.png"></p><p>老樣子，email 和 domain 都要換成自己的喔</p><p>完成後按下 ctrl + X ，系統會問你是否要儲存，按 y 確認，最後再按 enter 儲存<br>完成後會再回到原畫面</p><p>以上是完成了要執行的內容 (也就是更新 SSL<br>但為了要執行它，我們必須要給它足夠的權限<br>這邊要在神秘的終端機分別鍵入以下指令</p><pre><code>sudo chmod +x /opt/bitnami/letsencrypt/scripts/renew-certificate.shsudo crontab -e</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%889.47.29-1400x732.png"></p><p>下面Choose的部份鍵入 1 ，然後就會開啟一個黑畫面</p><p>在這個黑畫面鍵入以下內容</p><pre><code>0 0 1 * * /opt/bitnami/letsencrypt/scripts/renew-certificate.sh 2&gt; /dev/null</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8811.11.42.png"></p><p>完成後，跟之前一樣，按ctrl + X、按 y 、按 enter 就完成囉!</p><p>到這邊，腳本就會每三個月 (嚴格說起來我們是設了88天)幫你更新一次 SSL<br>之後如果發現有問題沒更新的話<br>可以回這裡看看有沒有問題</p><p>不過我們 SSL 還須要一點微調才能讓它真的生效<br>一起看下去吧!</p><p>[step]4[&#x2F;step]<br>SSL 設定</p><p>在終端機內鍵入以下指令</p><pre><code>sudo nano /opt/bitnami/apps/wordpress/htdocs/wp-config.php</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8811.16.17.png"></p><p>找到WP_SITEURL、WP_HOME，將原本的 http:&#x2F;&#x2F; 改成 http<strong>s</strong>:&#x2F;&#x2F; (注意多了個 s 喔!)</p><ul><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%889.59.46-1-1400x798.png"></p></li><li><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%8810.00.19-1-1400x794.png"></p></li></ul><p>左邊是修改前，右邊是修改後<br>完成後一樣 ctrl + X 存檔離開</p><p>接著修改一下使用權限<br>讓我們 WordPress 的外掛可以使用<br>所以要在終端機內鍵入以下指令</p><pre><code>sudo chmod 664 /opt/bitnami/apps/wordpress/htdocs/wp-config.php</code></pre><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8A%E5%8D%8811.20.11.png"></p><p>[step]5[&#x2F;step]<br>最後的最後，就是使用 WordPress 的外掛來讓 SSL 生效了!  </p><p>直接在 WordPress 內搜索  <a href="https://tw.wordpress.org/plugins/really-simple-ssl/">Really Simple SSL</a><br>安裝完成再啟用就好，不須要額外的設定</p><p>有沒有看到代表 SSL 的鎖頭了呢?</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2019-11-29-%E4%B8%8B%E5%8D%8810.07.46.png"></p><p>到這裡就大功告成了<br>我看到鎖頭時真的是亂感動一把的<br>所以才想要寫這篇文章來分享心路歷程<br>希望能幫助想省錢的朋友少走一點冤枉路 LOL</p><p>若有什麼問題都歡迎留言詢問喔<br>我一定盡自己所能幫助你<br>彼此加油!!</p><h2 id="2020-2-21-新增-解決無法接收到系統郵件問題"><a href="#2020-2-21-新增-解決無法接收到系統郵件問題" class="headerlink" title="2020&#x2F;2&#x2F;21 新增: 解決無法接收到系統郵件問題"></a>2020&#x2F;2&#x2F;21 新增: 解決無法接收到系統郵件問題</h2><p>若無法接收到系統的更改郵件<br>可以依照以下方法操作 (我是用gmail)<br><a href="https://progressbar.tw/posts/63">https://progressbar.tw/posts/63</a></p><h2 id="2020-7-09-新增-如何使用-SSH-來遠端連線並操作-PhpMyAdmin"><a href="#2020-7-09-新增-如何使用-SSH-來遠端連線並操作-PhpMyAdmin" class="headerlink" title="2020&#x2F;7&#x2F;09 新增: 如何使用 SSH 來遠端連線並操作 PhpMyAdmin"></a>2020&#x2F;7&#x2F;09 新增: 如何使用 SSH 來遠端連線並操作 PhpMyAdmin</h2><p>新增如何使用 SSH 來遠端連線並操作 PhpMyAdmin 一文<br><a href="https://growingdna.com/use-ssh-to-connect-gcp-bitnami-wordpress-phpmyadmin/">使用 SSH 遠端連線 GCP Bitnami WordPress 操作 PhpMyAdmin</a><br>供須要進階存取資料庫的朋友參考!</p>]]></content>
      
      
      <categories>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>投資最重要的事：長期且有價值</title>
      <link href="/2019/11/19/long-term-with-value-on-investment/"/>
      <url>/2019/11/19/long-term-with-value-on-investment/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是投資最重要的事呢"><a href="#什麼是投資最重要的事呢" class="headerlink" title="什麼是投資最重要的事呢?"></a>什麼是投資最重要的事呢?</h2><p>在討論在這個問題之前，我們先來講一個話題</p><h3 id="什麼是貪婪"><a href="#什麼是貪婪" class="headerlink" title="什麼是貪婪?"></a>什麼是貪婪?</h3><p>我們或許都常聽到家人朋友說</p><blockquote><p>「啊那時時就是太貪心了<del>抱著股票沒賣等他漲<br>結果等著等著</del>後來就跌破底，止損都來不及就變壁紙了<br>啊~年輕人還是不要玩股票吧!」</p></blockquote><p>這就是貪婪的心<br>但它起源於什麼呢?</p><p>我認為是【無知】</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/GettyImages_587169617.0-600x400.jpg" alt="ignorance is terrible when investing"></p><h3 id="以巴非特為例"><a href="#以巴非特為例" class="headerlink" title="以巴非特為例"></a>以巴非特為例</h3><p>再舉個例子  </p><p>巴菲特他老人家截至2007年間這43年的歲月裡<br>複合年化報酬率是21.1%  </p><p>但很多人在投資時要求的報酬率是多少?<br>兩倍、三倍甚至更多!  </p><p>而這就是一種貪婪<br>這種貪婪，來自無知<br>連巴菲特老人家的複合年化報酬率都在21.1%了<br>憑什麼市場會給這種人兩三倍的報酬?</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/1_pa1aDoszr0_u1wXvgAmaQA-533x400.jpeg" alt="why should the market pay you twice or more return than you invested?"></p><p>那麼，什麼是合理的報酬呢?<br>巴菲特提及</p><blockquote><p>「我必須確保買到的是在長期至少獲得15%複合年化報酬率的股票」<br>(<a href="https://www.forbes.com/sites/investor/2013/08/26/5-return-on-equity-dividend-stocks-buffett-and-lynch-would-love/#13c82387c3c8">參考資料</a>)</p></blockquote><p>這裡面有兩個重點</p><p>一、<strong>15%，也就是這股票的價值</strong><br><strong>二、複合年化報酬率，也就是長期</strong></p><p>第一點好理解，誰不想發大財呢?</p><h2 id="投資要點其一-有價值"><a href="#投資要點其一-有價值" class="headerlink" title="投資要點其一: 有價值"></a>投資要點其一: 有價值</h2><p>但第兩點就比較難了<br>一般我們都講收益率、報酬率、回報率等等<br>但都沒看到【年化】，更沒看到【複合】  </p><p>事實上這邊的複合年化<br>至少是十年、甚至數十年<br>也就是我們投資要把一筆錢判個「無期徒刑」<br>長期下來的複合年化報酬才是該追求的</p><h2 id="投資要點其二-長期"><a href="#投資要點其二-長期" class="headerlink" title="投資要點其二: 長期"></a>投資要點其二: 長期</h2><p>長期，且有價值<br>才是投資時最重要的事、也是最優先該思考的大前題</p><p>任何有價值，但「非長期」投資<br>常常就是一種<strong>誘惑</strong><br>它讓我們眼光短淺<br>稍不留神，就會陷入短期投資的痛苦深谷</p><h2 id="結論-什麼是投資最重要的事-長期且有價值"><a href="#結論-什麼是投資最重要的事-長期且有價值" class="headerlink" title="結論: 什麼是投資最重要的事? 長期且有價值"></a>結論: 什麼是投資最重要的事? 長期且有價值</h2><p>所以，我們該追求的是<br>至少長期年化複合報酬率15%的目標</p><p>共勉之，我們下篇文章見!</p><p><a href="https://www.youtube.com/watch?v=bHLEP36QCQU">https://www.youtube.com/watch?v=bHLEP36QCQU</a></p>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP 語法筆記</title>
      <link href="/2019/11/18/php-syntax-note/"/>
      <url>/2019/11/18/php-syntax-note/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="常數-constant"><a href="#常數-constant" class="headerlink" title="常數 constant"></a>常數 constant</h2><pre><code class="php">define(&quot;GREETING&quot;, &quot;Welcome to W3Schools.com!&quot;);echo GREETING;</code></pre><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><pre><code class="php">// switch + case + break + default$favcolor = &quot;red&quot;;switch ($favcolor) &#123;    case &quot;red&quot;:        echo &quot;Your favorite color is red!&quot;;        break;    default:        echo &quot;Your favorite color is neither red, blue, nor green!&quot;;&#125;</code></pre><h2 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h2><h3 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h3><pre><code class="php">// 先assign一個變數 然後再去做事$x = 1;while($x &lt;= 5) &#123;    echo &quot;The number is: $x &lt;br&gt;&quot;;    $x++;&#125;</code></pre><h3 id="Do-while-loop"><a href="#Do-while-loop" class="headerlink" title="Do while loop"></a>Do while loop</h3><pre><code class="php">// 無論發生啥事 會先做do的內容 然後再跑迴圈$x = 1;do &#123;    echo &quot;The number is: $x &lt;br&gt;&quot;;    $x++;&#125; while ($x &lt;= 5);</code></pre><h3 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h3><pre><code class="php">// 用分號隔開for ($x = 0; $x &lt;= 10; $x++) &#123;    echo &quot;The number is: $x &lt;br&gt;&quot;;&#125;</code></pre><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="Sorting-排序方法"><a href="#Sorting-排序方法" class="headerlink" title="Sorting 排序方法"></a>Sorting 排序方法</h3><pre><code class="php">sort() - sort arrays in ascending orderrsort() - sort arrays in descending orderasort() - sort associative arrays in ascending order, according to the valueksort() - sort associative arrays in ascending order, according to the keyarsort() - sort associative arrays in descending order, according to the valuekrsort() - sort associative arrays in descending order, according to the key/*a 為 valuek 為 keyr 是 降序- 是 升序*/</code></pre><h2 id="Superglobals"><a href="#Superglobals" class="headerlink" title="Superglobals"></a>Superglobals</h2><pre><code class="php">// 列出常用的$GLOBALS$_SERVER // 如果要取得server相關的資料 比如說ip/host server/之類的話可以用$_REQUEST$_POST$_GET$_FILES$_ENV$_COOKIE$_SESSION</code></pre><h1 id="PHP-advanced"><a href="#PHP-advanced" class="headerlink" title="PHP advanced"></a>PHP advanced</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><pre><code class="php">date(format,timestamp)// format  Required. Specifies the format of the timestamp// timestamp Optional. Specifies a timestamp. Default is the current date and time</code></pre><h2 id="include-and-require"><a href="#include-and-require" class="headerlink" title="include and require"></a>include and require</h2><pre><code class="php">// require 會在錯誤時停掉 但 include不會// require will produce a fatal error (E_COMPILE_ERROR) and stop the script// include will only produce a warning (E_WARNING) and the script will continue&lt;html&gt;&lt;body&gt;&lt;h1&gt;Welcome to my home page!&lt;/h1&gt;&lt;p&gt;Some text.&lt;/p&gt;&lt;p&gt;Some more text.&lt;/p&gt;&lt;?php include &#39;footer.php&#39;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="file-handling"><a href="#file-handling" class="headerlink" title="file handling"></a>file handling</h2><p>PHP Read File - fread() PHP Open File - fopen() PHP Close File - fclose() PHP Write to File - fwrite()</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><code>setcookie(name, value, expire, path, domain, secure, httponly);</code></p><pre><code class="php">$cookie_name = &quot;user&quot;;$cookie_value = &quot;John Doe&quot;;setcookie($cookie_name, $cookie_value, time() + (86400 * 30), &quot;/&quot;); // 86400 = 1 day</code></pre><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><pre><code class="php">&lt;?php// Start the sessionsession_start();?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;?php// Set session variables$_SESSION[&quot;favcolor&quot;] = &quot;green&quot;;$_SESSION[&quot;favanimal&quot;] = &quot;cat&quot;;echo &quot;Session variables are set.&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>PHP - json_encode()</p><pre><code class="php">$age = array(&quot;Peter&quot;=&gt;35, &quot;Ben&quot;=&gt;37, &quot;Joe&quot;=&gt;43);echo json_encode($age); // 因為json 其實就是一個string 所以可以直接echo出來</code></pre><p>PHP - json_decode()</p><pre><code class="php">$jsonobj = &#39;&#123;&quot;Peter&quot;:35,&quot;Ben&quot;:37,&quot;Joe&quot;:43&#125;&#39;;var_dump(json_decode($jsonobj, true));</code></pre><p>取得 decoded的json 方法</p><pre><code class="php">// 第一種$jsonobj = &#39;&#123;&quot;Peter&quot;:35,&quot;Ben&quot;:37,&quot;Joe&quot;:43&#125;&#39;;$obj = json_decode($jsonobj);echo $obj-&gt;Peter;echo $obj-&gt;Ben;echo $obj-&gt;Joe;// 第二種$jsonobj = &#39;&#123;&quot;Peter&quot;:35,&quot;Ben&quot;:37,&quot;Joe&quot;:43&#125;&#39;;$arr = json_decode($jsonobj, true);echo $arr[&quot;Peter&quot;];echo $arr[&quot;Ben&quot;];echo $arr[&quot;Joe&quot;];</code></pre><h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><h2 id="Classes-Objects"><a href="#Classes-Objects" class="headerlink" title="Classes&#x2F;Objects"></a>Classes&#x2F;Objects</h2><p>class 是一個類 而new出來就變一個一個的objects</p><pre><code class="php">class Fruit &#123;  // Properties 屬性  public $name;  public $color;  // Methods 方法  function set_name($name) &#123;    $this-&gt;name = $name;  &#125;  function get_name() &#123;    return $this-&gt;name;  &#125;&#125;$apple = new Fruit();$banana = new Fruit();$apple-&gt;set_name(&#39;Apple&#39;);$banana-&gt;set_name(&#39;Banana&#39;);echo $apple-&gt;get_name();echo &quot;&lt;br&gt;&quot;;echo $banana-&gt;get_name();</code></pre><h2 id="constructor-在new這個class出來的時候自動call"><a href="#constructor-在new這個class出來的時候自動call" class="headerlink" title="constructor 在new這個class出來的時候自動call"></a>constructor 在new這個class出來的時候自動call</h2><pre><code class="php">class Fruit &#123;  public $name;  public $color;  function __construct($name) &#123; // 這個_construct會把new object出來時的參數帶過來    $this-&gt;name = $name;  &#125;  function get_name() &#123;    return $this-&gt;name;  &#125;&#125;$apple = new Fruit(&quot;Apple&quot;);echo $apple-&gt;get_name();?</code></pre><h2 id="destructor-會結束的時候自動call這個function-作用-減少code量"><a href="#destructor-會結束的時候自動call這個function-作用-減少code量" class="headerlink" title="destructor 會結束的時候自動call這個function; 作用: 減少code量"></a>destructor 會結束的時候自動call這個function; 作用: 減少code量</h2><pre><code class="php">class Fruit &#123;  public $name;  public $color;  function __construct($name) &#123;    $this-&gt;name = $name;  &#125;  function __destruct() &#123;    echo &quot;The fruit is &#123;$this-&gt;name&#125;.&quot;;  &#125;&#125;$apple = new Fruit(&quot;Apple&quot;);</code></pre><h2 id="Access-Modifiers-Visibility-三種-public-protected-private"><a href="#Access-Modifiers-Visibility-三種-public-protected-private" class="headerlink" title="Access Modifiers: Visibility 三種-&gt;public&#x2F;protected&#x2F;private"></a>Access Modifiers: Visibility 三種-&gt;public&#x2F;protected&#x2F;private</h2><pre><code>- public - the property or method can be accessed from everywhere. This is default到處都可call, 預設是這個- protected - the property or method can be accessed within the class and by classes derived from that class只有在該class和繼承的class可call (new 出來的object不算; 同理 繼承的class所new出來的object也不行)- private - the property or method can ONLY be accessed within the class只有該class可call 不能被繼承</code></pre><h2 id="Inheritance-繼承"><a href="#Inheritance-繼承" class="headerlink" title="Inheritance 繼承"></a>Inheritance 繼承</h2><pre><code class="php">class Fruit &#123;  public $name;  public $color;  public function __construct($name, $color) &#123;    $this-&gt;name = $name;    $this-&gt;color = $color;  &#125;  protected function intro() &#123;    echo &quot;The fruit is &#123;$this-&gt;name&#125; and the color is &#123;$this-&gt;color&#125;.&quot;;  &#125;&#125;class Strawberry extends Fruit &#123; // 繼承就是用extends  public function message() &#123;    echo &quot;Am I a fruit or a berry? &quot;;  &#125;  $this-&gt;intro(); // 這樣子就可以使用protected的function&#125;// Try to call all three methods from outside class$strawberry = new Strawberry(&quot;Strawberry&quot;, &quot;red&quot;);  // OK. __construct() is public$strawberry-&gt;message(); // OK. message() is public$strawberry-&gt;intro(); // ERROR. intro() is protected</code></pre><h1 id="以上資料來自-https-www-w3schools-com-php-default-asp"><a href="#以上資料來自-https-www-w3schools-com-php-default-asp" class="headerlink" title="以上資料來自 https://www.w3schools.com/php/default.asp"></a>以上資料來自 <a href="https://www.w3schools.com/php/default.asp">https://www.w3schools.com/php/default.asp</a></h1>]]></content>
      
      
      <categories>
          
          <category> tech-note </category>
          
          <category> PHP / Laravel </category>
          
          <category> 技術筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>元認知能力：如何培養篇</title>
      <link href="/2019/11/17/how-to-build-pre-conscious/"/>
      <url>/2019/11/17/how-to-build-pre-conscious/</url>
      
        <content type="html"><![CDATA[<p>在前面的文章我們已經提到元認知能力的重要性<br>(若還不確定的朋友，可以參考【<a href="https://growingdna.com/importance-of-pre-conscious/">元認知能力: 你最應該擁有的最重要能力</a>】一文<br>這篇我們就來了解如何培靠  </p><p>以下主要分享三個方法</p><h2 id="元認知能力該如何培養"><a href="#元認知能力該如何培養" class="headerlink" title="元認知能力該如何培養?"></a>元認知能力該如何培養?</h2><h3 id="一、冥想"><a href="#一、冥想" class="headerlink" title="一、冥想"></a>一、冥想</h3><h4 id="冥想的好處"><a href="#冥想的好處" class="headerlink" title="冥想的好處"></a>冥想的好處</h4><p><a href="https://www.youtube.com/watch?v=w1Dqx3FF8W4">https://www.youtube.com/watch?v=w1Dqx3FF8W4</a></p><h4 id="如何開始冥想"><a href="#如何開始冥想" class="headerlink" title="如何開始冥想"></a>如何開始冥想</h4><p><a href="https://www.youtube.com/watch?v=NLJcwbpkiJ0">https://www.youtube.com/watch?v=NLJcwbpkiJ0</a></p><p>冥想已經被科學證實是個有效降低焦慮、提高專注力的「腦袋體操」<br>若你還不確定有沒有用，可以每天拿10分鐘出來試試<br>第二隻影片裡有介紹，建議你可以試試  </p><p>這種訓練，可以增大訓練者的大腦皮層表面積<br>我們的大腦皮層表面其實有很多褶皺<br>而大腦皮層表面積增加，就是褶皺增多的結果  </p><p>從另外一個側面來看<br>冥想是讓混亂的思緒集中在一個點上<br>比如說，若冥想時你專注在呼吸<br>那此時專注的點就是只有呼吸  </p><p>此時，大腦會高度集中<br>但你又沒在做認何事情，大腦於是「主動」進入了休息的狀態</p><h3 id="二、興趣"><a href="#二、興趣" class="headerlink" title="二、興趣"></a>二、興趣</h3><p>培養一個好的興趣，讓你進入<a href="https://growingdna.com/Flow-The-Psychology-of-Optimal-Experience">心流的狀態(中文</a>&#x2F;<a href="https://growingdna.com/Flow-The-Psychology-of-Optimal-Experience-en">英文</a>)<br>(<a href="https://zh.wikipedia.org/wiki/%E5%BF%83%E6%B5%81%E7%90%86%E8%AB%96">【點擊這邊</a>】看什麼是心流)</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/Two_dancers.jpg" alt="two dancers"></p><p>而這種好的興趣，必須要是<strong>「主動」的興趣</strong><br>所以小說、電影、電玩都不算<br>因為它們本來就是設計來要吸引你的注意力的  </p><p>我們這邊提卻是<strong>主動型的興趣</strong><br>舉凡演奏音樂、唱歌跳舞、運動競技、藝術創作等的都算<br>它會讓你進入一個心流的狀態<br>你會有高度的投入，而頭腦會在這個狀態下有一個完全投入而產生徹底的放鬆<br>腦細胞因而有自然的的連結<br>進而提高你的元認知能力</p><h3 id="三、反省"><a href="#三、反省" class="headerlink" title="三、反省"></a>三、反省</h3><p>反省會讓人引起反思<br>進一步站在思考的後面，去思考為何自己會這樣思考<br>每天可以花10分鐘左右的時間反省以下事情  </p><p><em>-</em> 我想了什麼?<br><em>-</em> 這些想法有沒有邏輯謬誤?<br><em>-</em> 這業想法是從何而來?<br><em>-</em> 為什麼會走到這個思路?<br><em>-</em> 有沒有其他可能的思考結果?<br><em>-</em> 有沒有可能受到其他因素的影響?<br><em>-</em> 這些想法有沒有足夠的根基、有沒有道理?</p><p>很不容易<br>但它的確是一個提高元認知能力的有效法門</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/chPromo1-1.jpg" alt="introspect"></p><p>不知道以上提的3個方法你是否有用過<br>若可以，我建議可以找對自己來說最簡單的方法  </p><p>比如說，我自己喜歡跳舞<br>我就會走這個走度去切入，專心跳、用力跳<br>找到自己的心流狀態  </p><p>若你試了以上的任一方式<br>歡迎留言讓我知道，一起成長<br>那我們下篇文章見!</p>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成長 </tag>
            
            <tag> 投資 </tag>
            
            <tag> 時間 </tag>
            
            <tag> 課程心得 </tag>
            
            <tag> 財富自由 </tag>
            
            <tag> 通往財富自由之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎麼把技能樹點好點滿：從如何學好英文說起</title>
      <link href="/2019/11/16/how-to-learn-english/"/>
      <url>/2019/11/16/how-to-learn-english/</url>
      
        <content type="html"><![CDATA[<p>學技能的重要性我想就不用多說了<br>下面就用一個有趣的例子來說明<br>學一門新語言其實沒有想像中困難</p><p><a href="https://growingdna.com/the-path-to-financial-free">講者</a>是<a href="https://zh.wikipedia.org/zh-tw/%E6%9C%9D%E9%B2%9C%E6%97%8F">朝鮮族</a>人<br>在那個地方，基本上所有人都可以講兩個語言: 朝鮮語與中文<br>甚至連路邊的狗都可以做到</p><p>今天你在路邊看到一條狗<br>若對牠用<strong>中文</strong>說「**嘿! 過來過來!**」<br>而他也回應跑過來了的話<br>那就代表他是條說中文的狗嘛</p><p>但你若對牠用<strong>朝鮮語</strong>說「**嘿! 過來過來!**」<br>而他也回應跑過來了的話<br>那就代表他是條說朝鮮語的狗囉</p><p>那麼，假說你無論是用<strong>中文</strong>，還是用<strong>朝鮮語</strong>叫他「**嘿! 過來過來!**」<br>而牠也都回應跑過來了的話<br>那就代表他是條雙語狗了</p><p>連狗都這樣的學習能力<br>其中的關鍵在哪呢?</p><p>我認為</p><p>是<strong>剛需</strong>，也就是剛性需求</p><p>是一個非常重要，不可或缺的需求  </p><p>什麼意思呢?<br>對這些生長在朝鮮的狗來說<br>因為有生存的需要，牠們必須要了解人們在說些什麼<br>這樣才有可能大幅提高牠們的存活率  </p><p>而這個需求，就是剛需<br>所以牠們需要了解人們在說什麼，藉此來加速他們習得技能的速度<br>並加強固化這個技能  </p><p>對狗狗來說，都可以習得語言這個技能了<br>那麼，為什麼偏偏對我們多數人來說<br>學習英語是那麼困難，甚至大部份的人都在離開學校後就停止並忘光光了呢?</p><p>因為沒有鋼需</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/1000x700-epic-fail-1-571x400.jpg" alt="why we always fail to learn English"></p><p>想想我們學習英文的歷程<br>通常是因為學校教了、要考試、得拿高分<br>所以要念要讀<br>但就只是為了這個考試<br>過了，拿高分也就肥了<br>沒過，拿了個低分也不會對學習有什麼幫助<br>反而只是大大的失望，慘一點的還會被老爸老媽數落<br>人生不可謂不難啊  </p><p>那如何學好一個新技能呢?<br>很簡單，給它設立一個鋼需</p><h2 id="究竟要如何學好英文"><a href="#究竟要如何學好英文" class="headerlink" title="究竟要如何學好英文?"></a>究竟要如何學好英文?</h2><p>還是拿學英文當例子<br>我們究竟要如何學好英文呢?<br>因為我們是活在未來的人 (至於活在未來是什麼，為什麼不是活在當作? 請待後續文章)</p><p>我們可以想像學好英文後的那個世界是什麼<br>用這個世界來當作是一個鋼性需求 讓自己去完成學英文這件事</p><p>以講者的例子來說<br>他要當知名英文補習班老師，而這須要背1萬個以上新單字<br>聽起來是個很可怕的數字是吧 (印象中我高中背單字也是背7000單啊~)  </p><p>但講者的想法是<br>若當上了該補習班老師，可以達到年薪500萬<br>這樣子換算下來，背一個單字的價值是500塊啊!<br>這是多划算的打工，怎麼能不幹!  </p><p>於是他樂在背單字，一天背100個<br>後來甚至想要發大財，一天背200個<br>樂此不疲</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/5689883_SS-MONEY-TN-711x400.jpg" alt="earn more money"></p><p>所以，不要想著「堅持」把事做好、把技能學好<br>而是要想給他設定一個鋼需，而這個鋼需可能是在未來的<br>若設立的當，你就不須要「堅持」去做<br>而是迫不及待的想要去完成  </p><p>因為你心底本身已經相信了<br>剩下的<br>就只是去實踐，如此而已  </p><p>共勉之，我們下篇文章見!</p><p>參考資料來源: <a href="https://growingdna.com/the-path-to-financial-free">李笑來: 通往財富自由之路</a> (<a href="https://growingdna.com/igetapp">得到APP</a> 課程)</p>]]></content>
      
      
      <categories>
          
          <category> 雜學清談 </category>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成長 </tag>
            
            <tag> 投資 </tag>
            
            <tag> 時間 </tag>
            
            <tag> 課程心得 </tag>
            
            <tag> 財富自由 </tag>
            
            <tag> 通往財富自由之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元認知能力：你最應該擁有的最重要能力</title>
      <link href="/2019/11/15/importance-of-pre-conscious/"/>
      <url>/2019/11/15/importance-of-pre-conscious/</url>
      
        <content type="html"><![CDATA[<p>在【<a href="https://growingdna.com/why-blog/">寫在開始之前: 為何要經營部落格?</a>】這篇文章裡<br>我提到了元認知能力，這邊就來分享說什麼是元認知能力</p><h2 id="元認知能力-對自己思考過程的認知與理解"><a href="#元認知能力-對自己思考過程的認知與理解" class="headerlink" title="元認知能力: 對自己思考過程的認知與理解"></a>元認知能力: 對自己思考過程的認知與理解</h2><p>根據<a href="https://growingdna.com/the-path-to-financial-free">李笑來</a>對元認知能力的定義<br>元認知能力也可以分成以下3個簡單的思考步驟</p><p>第一步:喔， 我原來是這麼想的…<br>第二步: 嗯? 我這麼想難道是不對的嗎?<br>第三步: 啊! 我應該這麼想才對…</p><p>不知道你是否有時候會有一種頓悟的感覺<br>就像是，「**欸! 我剛剛怎麼會這麼想? 明明就應該是這樣的啊!**」<br>然後事情就悄悄有了進展，或有一種茅塞頓開的感覺</p><p><strong>對! 就是這種感覺</strong></p><p>以我自己為例，在工作面試的過程中<br>常常會發現和面試官談完後，才發現這工作和自己想像的大不相同<br>甚至會有一種腦洞大開的感覺<br>但更重要的是，這個過程會讓我質疑起自己的信念，並對正在質疑自己的信念的自己感到不安<br>接著，就會啟動元認知能力，知道這種對正在質疑自己的自己其實是正在用一個更客觀的角度來觀察自己<br>這是好事，不要擔心也不要氣餒<br>因為這是成長進步的契機，深刻地去體會，了解自己的想法與思考過程<br>一次一次累積下來，想法就會越來越成熟了</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/getty_803789400_2000133320009280103_362124-800x371.jpg" alt="interview preparation"></p><p>拿音樂當例子來說好了<br>我自認為是個對音樂還滿感興趣的人<br>所以陸續學了吉他、Bass、爵士鼓、木箱鼓、鋼琴等等的<br>雖不厲害，但就是可以拿來吹噓的程度<br>而且我”以為”自己可以靠這個興趣來當作一個長期的動力，進而從事相關的行業</p><p>但在一次的面試中，我應徵的音樂教學網站的課程經理<br>當面試官在說明這個職位要做的事是包山包海、公司也還不能穩定獲利時</p><p>我猶豫了…</p><p>然後這才發現，喜歡音樂這件事並不足以讓我保持足夠高度的熱情去克服一切困難<br>充其量或許只能當作是一個興趣，或說嗜好<br>有空的時候玩玩，閒暇的時候聽聽音樂參加演唱會，也就夠了<br>要說大量付出，那還是免了吧</p><p>對於這樣的自己，我開始質疑了…<br>但下一步就是，元認知能力啟動</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/little-cute-girl-having-a-good-idea-on-the-blackboard-learning-591x400.jpg" alt="good idea pops up"></p><p>我認知道到這樣的質疑自己是一個思考的躍進<br>因為這個事件，我懷疑起了自己，但懷疑這件事，就是促使我更深層思考的啟機:<br>到底【更重要】的是什麼?<br>再進一步想，【最重要】的是什麼?</p><p>可能暫時沒有答案，但那也沒關係<br>因為重要的是元認知能力的啟動<br>它讓我去思考:</p><p>1. 喔，原來我沒那麼喜歡音樂<br>2. 難道這樣子的自己很糟的嗎…?<br>3. 啊! 我應該要想【更重要】和【最重要】的問題才對啊!</p><p>整個過程，是了解自己的過程<br>也是統合自己學習的必經之路<br>而這也印證了，人是必須要不斷學習的<br>而且，學習是要經過反思驗證，並在操作中持續修正完善，始會走向更成熟之路</p><p>元認知能力就是成長過程中，被修正完善時最重要的能力</p><p>共勉之，那我們下篇文章見!</p>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成長 </tag>
            
            <tag> 投資 </tag>
            
            <tag> 時間 </tag>
            
            <tag> 課程心得 </tag>
            
            <tag> 財富自由 </tag>
            
            <tag> 通往財富自由之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何開始第一筆投資?</title>
      <link href="/2019/11/14/how-to-start-your-first-investment/"/>
      <url>/2019/11/14/how-to-start-your-first-investment/</url>
      
        <content type="html"><![CDATA[<p>是要風險低一點: 定存? 儲蓄險?<br>還是風險高一點: 買股票? 申購基金?  </p><p>當然以上都可以做<br>但在【通往財富自由之路】課中<br>首先要建立的，還是思考方式的建立<br>因為講者的立場是要做好100%的功課，才會入場投資<br>而不是邊學邊做，並抱著僥倖的心態  </p><p>以下就分享他的3步驟</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>一、創建一個 excel 表格來紀錄<br>二、設想用1美元買Google的股票，或其他感興趣、自己分析過後有前景的股票<br>三、每個月月底更新股，算一下它相對於一開始投資時1美元的漲跌幅  </p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/images-1.jpeg" alt="tips to start investing"></p><p>完成! 沒錯就是這麼簡單<br>不過有幾點要提的是</p><h3 id="1-先用1美元來投資不是因為這是虛擬的"><a href="#1-先用1美元來投資不是因為這是虛擬的" class="headerlink" title="1. 先用1美元來投資不是因為這是虛擬的"></a><em>1.</em> 先用1美元來投資不是因為這是虛擬的</h3><p><em>2.</em> 一定要在月底再看股價，絕對不可以在這先前就看<br><em>3.</em> 幾次記錄後，可以加入定期定額的策略買入</p><p>以下分段敘述<br><em>1.</em> 先用1美元來投資不是因為這是虛擬的<br>而是因為<strong>投資的重點是看增長比例，而不是增長量</strong>  </p><p><em>2.</em> 一定要在月底再看股價，絕對不可以在這先前就看<br>因為<strong>重點是要擺在長期，不可因為短期波動受影響</strong><br>這是一開始就要訓練好的  </p><p><em>3.</em> 幾次記錄後，可以加入定期定額的策略買入<br>這是為了<strong>理解定期定額的威力，也就是它相對買了一個「長期」的均價</strong><br>使我們可以較不受短期股價無法預測起伏的影響  </p><p>以上方法我也還在學習中<br>這邊分享作法及目的給大家，期待能一起成長進步<br>若有興趣，也可以使用eToro的虛擬帳戶來試試<br><a href="https://growingdna.com/eToro-register">點選這邊</a>可以免費註冊試試身手<br>那我們下篇文章見!</p>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成長 </tag>
            
            <tag> 投資 </tag>
            
            <tag> 時間 </tag>
            
            <tag> 課程心得 </tag>
            
            <tag> 財富自由 </tag>
            
            <tag> 通往財富自由之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李笑來-通往財富自由之路: 出售時間的三個鐵律(下)</title>
      <link href="/2019/11/13/principle-of-selling-time-part2/"/>
      <url>/2019/11/13/principle-of-selling-time-part2/</url>
      
        <content type="html"><![CDATA[<h2 id="出售時間的三個鐵律-下"><a href="#出售時間的三個鐵律-下" class="headerlink" title="出售時間的三個鐵律(下)"></a>出售時間的三個鐵律(下)</h2><p>上篇已經提到出賣時間的第一個鐵律<br>也就是<strong>【成長才是關鍵】</strong><br>重點是要有成長的這個里程碑思維<br>而不是只觀注成功的終點式思維<br>如此一來，才有機會往<strong>【不為生活而出賣自己的時間】</strong>之路邁進<br>若還有不清楚的，可以點擊<a href="https://growingdna.com/principle-of-selling-your-time/">這邊</a>回顧全文</p><p>接下來講第二和第三點鐵律<br>也就是<strong>【重視價值，忽略估值】</strong>以及<strong>【耐心比什麼都重要】</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>二、重視價值，忽略估值</p><p>所謂價值，是有「<strong>自己</strong>」認知理解到長期實質意義的<br>而估值，卻只是不確定的「<strong>他人</strong>」給予的評價<br>舉個例子來說<br>職涯的選擇，應該重視這份工作本身給自己帶來了什麼可能性，創造了什麼價值<br>而不是用人單位給你的的估值 (而這份估值通常是薪水)</p><p>因為價值是長期有意義，而估值則反之<br>更可怕的是，若我們重視估值，那我們很可能會只選擇做增加估值的事<br>而不是去追求長期的成長，忘記了只有長期的成長才會帶來真正的價值<br>就像講者說的，換個方面來說<br>追求估值，不重視價值，本質上是個騙子<br>騙了他人來追求估值，同時騙過了自己，忘了價值</p><h3 id="三、耐心比什麼都重要"><a href="#三、耐心比什麼都重要" class="headerlink" title="三、耐心比什麼都重要"></a>三、耐心比什麼都重要</h3><p><img src="https://growingdna.com/wp-content/uploads/2019/11/1_op6BBod7jL1-WA8khqzH-A-594x400.jpeg" alt="importance of patience"></p><p>耐心可以比擬成投資裡的【複利】<br>而耐心帶來的效果就可以想成【複利效果】，長期的效果是如原子彈般大的</p><p>我想大家可能都聽過<a href="https://www.books.com.tw/exep/assp.php/lazzybug0608/products/0010668300?utm_source=lazzybug0608&utm_medium=ap-books&utm_content=recommend&utm_campaign=ap-201911">一萬小時定律(中文</a><a href="https://www.amazon.com/gp/product/0316017930/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=growingdna-20&creative=9325&linkCode=as2&creativeASIN=0316017930&linkId=327bc009b3882604a5459df542168ed4">&#x2F;英文)</a>、<a href="https://www.books.com.tw/exep/assp.php/lazzybug0608/products/0010752714?utm_source=lazzybug0608&utm_medium=ap-books&utm_content=recommend&utm_campaign=ap-201911">刻意練習(中文</a><a href="https://www.amazon.com/gp/product/B011H56MKS/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=growingdna-20&creative=9325&linkCode=as2&creativeASIN=B011H56MKS&linkId=a4f0503e6ad5b2b5ea725e458ed80288">&#x2F;英文)</a>的重要有太多理論學說在講耐心，甚至還有<a href="https://www.books.com.tw/exep/assp.php/lazzybug0608/products/0010326543?utm_source=lazzybug0608&utm_medium=ap-books&utm_content=recommend&utm_campaign=ap-201911">先別急著吃棉花糖(中文</a><a href="https://www.amazon.com/gp/product/0425205452/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=growingdna-20&creative=9325&linkCode=as2&creativeASIN=0425205452&linkId=942dc04d2faf21d446d7bde971f677e7">&#x2F;英文)</a>等實驗</p><p>但</p><p>真正實踐的人太少了<br>資訊世代、手機不離身的現代<br>要等，簡值是太<br>難尤其是要有耐心的等，什麼都不做，更是違反直覺<br>當然，我也不例外<br>所以才有這個日更發文的計劃，希望可以藉由寫作來加深自己的神經迴路<br>不斷內化所學並提升價值，並透過與讀者的分享過程中，見證耐心的可貴及重要</p><p>以上就是出賣時間的三個鐵律<br>再複習一下，它們分別是</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p><strong>一、成長才是關鍵<br>二、重視價值，忽略估值<br>三、耐心比什麼都重要</strong></p><p>這三點可以說是人生在世的基本價值體系<br>至於價值體系、操作系統，乃至行為選擇三者間的關係<br>就後文再來分享吧大家加油 我們下篇文章見!</p>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成長 </tag>
            
            <tag> 投資 </tag>
            
            <tag> 時間 </tag>
            
            <tag> 課程心得 </tag>
            
            <tag> 財富自由 </tag>
            
            <tag> 通往財富自由之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>這就是街舞2 EP4 觀後感</title>
      <link href="/2019/11/12/this-is-dance2-ep4-review/"/>
      <url>/2019/11/12/this-is-dance2-ep4-review/</url>
      
        <content type="html"><![CDATA[<p>這集看的真是太感動了! 肯定要發篇文來紀錄一下!! <br>話說在前頭，本文不討論大陸官方可能的介入因素 (如 Franklin 明顯失誤、AC 不讓穿女裝、Hip-Hop 翻譯成自由式街舞(之類的，和中國有嘻哈變成中國新說唱一樣)、賽制甚至劇情安排)<br>而是單看舞蹈、評審、舞者等互動後的簡單心得。<br>下面就挑幾段最有感觸的出來紀錄一下。</p><h2 id="這就是街舞2-EP4"><a href="#這就是街舞2-EP4" class="headerlink" title="這就是街舞2 EP4"></a>這就是街舞2 EP4</h2><h3 id="Franklin-Call-Out-Freestyle"><a href="#Franklin-Call-Out-Freestyle" class="headerlink" title="Franklin Call Out Freestyle"></a>Franklin Call Out Freestyle</h3><p><a href="https://youtu.be/69eRuWbfDHA">https://youtu.be/69eRuWbfDHA</a></p><p>這真的是扯不用錢。  </p><p>一直很喜歡 Franklin 那種無敵細膩的表達音樂方式。看上去每個動作的小巧卻又充滿巧思，真正去玩才會發現這些動作每個都超級不可思議，扯的是這段舞竟然是 Freestyle 啊我的媽，叫其他人怎麼吃飯QQ</p><hr><h3 id="Semi-張世民-Hip-Hop-Performance"><a href="#Semi-張世民-Hip-Hop-Performance" class="headerlink" title="Semi (張世民) Hip-Hop Performance"></a>Semi (張世民) Hip-Hop Performance</h3><p><a href="https://youtu.be/69eRuWbfDHA?t=2017">https://youtu.be/69eRuWbfDHA?t=2017</a></p><p>行雲流水的極致啊!<br>很難讓人不想到台灣的小黑，Body Control 真的是練到如火純青的階段，身體像是每個都分開，卻又完美地和音樂契合在一起，<br>跳 Hip-Hop 成這樣真的是沒什麼好挑剔了天哪~</p><hr><h3 id="花椰-Battle-Round"><a href="#花椰-Battle-Round" class="headerlink" title="花椰 Battle Round"></a>花椰 Battle Round</h3><p><a href="https://youtu.be/69eRuWbfDHA?t=2846">https://youtu.be/69eRuWbfDHA?t=2846</a></p><p>花椰也真的是台灣跳 Locking 的常勝軍了，不知道為啥在 PHD 裡最常注意到的就是他，或許是因為我的頭髮也曾經很像花椰吧XD</p><p>這段跳到失誤見血還堅持要 Ba 到 round 結束，完完全全就是打到心頭，看到 Locker 臨機應變的特點被應用在處理傷口上也是無敵到位，默默地是相當鼻酸啊……，太敬佩，Respect!!</p><hr><h3 id="葉正-Locking-Performance"><a href="#葉正-Locking-Performance" class="headerlink" title="葉正 Locking Performance"></a>葉正 Locking Performance</h3><p><a href="https://youtu.be/69eRuWbfDHA?t=4962">https://youtu.be/69eRuWbfDHA?t=4962</a></p><p>在 EP.3 的官方介紹說他的 Battle 是神仙打架，真的是不跨張、太扯了把 Locking 融在身體裡，還不忘加了一段踢踏舞進去，流暢度不用說，律動流轉自如，跳舞到這個程度根本就是跳舞&#x3D;生活，態度&#x3D;人生了啊!</p><hr><h3 id="高博-vs-馮正-Popping-Battle"><a href="#高博-vs-馮正-Popping-Battle" class="headerlink" title="高博 vs. 馮正 Popping Battle"></a>高博 vs. 馮正 Popping Battle</h3><p><a href="https://youtu.be/69eRuWbfDHA?t=3507">https://youtu.be/69eRuWbfDHA?t=3507</a></p><p>最後一定要放上這場世紀大戰了。</p><blockquote><p>高博是 KOD (Keep on Dancing, 國際四大街舞賽事之一)、舞佳舞的創辦人</p><p>馮正是被國際承認證的第十屆 KOD 裁判 (裁判都是 Popping Pete、Mr Wiggles、Suga Pop、Link、Stretch 等可怕人物啊啊啊)</p></blockquote><p>看兩個元老級大佬 Battle，如果說葉正是神仙打架，看這兩人 Battle 就像是看超級賽亞人 vs. 雷神索爾吧，反正舉手投足就是毀天滅地的XD</p><p>基本上兩個人就是沒在比賽，一整個相敬如賓，以 Battle 的型式來充滿節目表演的本質。個人是覺得很大程度讓 Dancer 興奮爆棚，劇組也花費很大心血來讓這場 Battle 昇華成世紀大對決，先不管商業不商業，看到他倆比賽就已經值回票價了，這時誰還管什麼輸贏，看完就可以走人了啊 XD</p><p>看完這段真的是亂激動一把的，覺得跳舞就是要這樣跳到骨子裡啊! 儘管在去全職搞跳舞是不太現實，但光是觀戰就已經是爽在邊上了，接下來的日子得全力拼一波寫 code ，以朝向最 Hip-Hop 工程師邁進勒!</p><p>最後要說的是</p><p>真的猛 給劇組一個 Respect!</p>]]></content>
      
      
      <categories>
          
          <category> 興趣陳列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Locking </tag>
            
            <tag> 嘻哈 </tag>
            
            <tag> 街舞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李笑來-通往財富自由之路: 出售時間的三個鐵律(上)</title>
      <link href="/2019/11/12/principle-of-selling-your-time/"/>
      <url>/2019/11/12/principle-of-selling-your-time/</url>
      
        <content type="html"><![CDATA[<p>我是個滿喜歡在網路上買課程學東西的人<br>接下來也會陸續跟大家分享學習的心得，希望可以與你一同成長進步~!</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/iStock_73362333_XXXLARGE-599x400.jpg" alt="Learn"></p><p>這應該會是一個系列文章<br>主要將針對我在得到APP上面購買的課程<strong>【李笑來-通往財富自由之路】</strong>展開<br>整體而言這是個對個人理財投資觀念的<strong>「心法」</strong><br>雖然也有一些投資建議<br>但我認為它其實更是算是一個以過來人的身份，對每個學生的人生規劃的指導原則</p><p>不只投資，更是對人生的<strong>「價值」</strong>來切入思考<br>提出最重要的不是成功，而是<strong>「成長」</strong><br>這對我來說是非常非常重要，也是這個部落格名稱<strong>【成長基因】</strong>的由來<br>所以我真的是迫不及待想要跟大家分享這門課程在講什麼啊~若有興趣，就請繼續發摟喔!</p><p>這門課討論的東西很多<br>我們第一個要講的，就是<strong>「時間」</strong></p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/1540208830_955987_1540210198_noticia_normal-562x400.jpg" alt="time"></p><p>你對「時間」的概念是什麼呢?課中提到，時間永遠都不夠用，而且也無法控制<br>所以，與其說是過「時間管理」，還不如<a href="https://www.books.com.tw/exep/assp.php/lazzybug0608/products/0010783146?utm_source=lazzybug0608&utm_medium=ap-books&utm_content=recommend&utm_campaign=ap-201911">把時間當作朋友</a>，從而去往夢想的彼岸<br>這門課的標題<strong>【通往財富自由之路】</strong>就是如此展開的<br>什麼是財富自由?<br>一個明確清楚的定義是<strong>「個人再也不用為了滿足生活而出售自己的時間」</strong></p><p>而於公於私，為了生活為了娛樂我們不時在「出售時間」<br>比如說為了生活而出售時間賺錢，比如說為了未來而出售時間學習<br>但無論如何，出售時間都一定要有「底線」，或者說是原則，又或是這邊說的鐵律<br>以下就針對課程提到的「出售時間的三個鐵律」來說明</p><h2 id="【出售時間的三個鐵律】"><a href="#【出售時間的三個鐵律】" class="headerlink" title="【出售時間的三個鐵律】"></a>【出售時間的三個鐵律】</h2><p><img src="https://growingdna.com/wp-content/uploads/2019/11/Principle_Stamp_Logo_Cleanrtwert-280x280.jpg"></p><h3 id="一、成長才是關鍵"><a href="#一、成長才是關鍵" class="headerlink" title="一、成長才是關鍵"></a>一、成長才是關鍵</h3><p>許多人只想著如何成功，卻忽略了<strong>成功是不斷成長的累積</strong><br>說實話，「現在」只是過去努力成長累積的結果若要成功，決不是一兩天努力就可以達成的<br>而<strong>成長，就是前往成功的里程碑</strong><br>而一般我們可能會有疑問會有兩個</p><p>說實話，「現在」只是過去努力成長累積的結果若要成功，決不是一兩天努力就可以達成的<br>而<strong>成長，就是前往成功的里程碑</strong><br>而一般我們可能會有疑問會有兩個</p><ol><li><strong>就算我不斷成長變的很強很厲害，但沒人看到該怎辦?</strong></li><li><strong>在做選擇時，我做的這個選擇，會不會讓我之前學的東西用不上?</strong></li></ol><p><img src="https://growingdna.com/wp-content/uploads/2019/11/question-mark-483x335.jpg" alt="questions"></p><p>第一個問題相對好解<br>原因是因為現在是資訊流動成本極低的時代<br>早期可能要三顧茅廬才請的到諸葛亮出山 (或至少花很多成本去找他吧? )<br>現在我們有Linkedin、104、CakeResume等等無限多平台可以使用<br>人才埋沒的可能性相對較低，素人掘起的例子比比皆是<br>現在大馬路望去的人可能長的沒差太多，但其內心、腦袋的水平可能是天差地遠<br>而且這些差異，會因為學習成長而擴大，因為資訊流動而被發掘出來</p><p>而第二個問題，則是體現出了思考模式的不同<br>若有這個想法<br>就代表他們的思維是「終點式思維」，而不是「里程碑式思維」<br>他們認為做了選擇之後就是終點，所以之前學習累積來的能力必須一定要用上<br><strong>但其實不是</strong><br>重要的是「里程碑式思維」，也就是<strong>成長</strong><br>正確的想法是，思考「在做了這個選擇後，能完善我之前的什麼能力、能讓我獲得什麼新能力」<br>如此一來，才不會被過去的自己禁錮，被之前的能力限制了<br>也就更有能力在成長中邁向財富自由之路</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/Break-a-habit-300x200.jpg" alt="Break-a-habit"></p><p>說了很多，怕大家看到這就眼花了<br>剩下兩個鐵律就請期待下篇囉!</p>]]></content>
      
      
      <categories>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成長 </tag>
            
            <tag> 投資 </tag>
            
            <tag> 時間 </tag>
            
            <tag> 課程心得 </tag>
            
            <tag> 財富自由 </tag>
            
            <tag> 通往財富自由之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寫在開始之前: 為何要經營部落格?</title>
      <link href="/2019/11/08/why-blog/"/>
      <url>/2019/11/08/why-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="在回答這個問題之前，想跟大家先討論一件事-何謂價值"><a href="#在回答這個問題之前，想跟大家先討論一件事-何謂價值" class="headerlink" title="在回答這個問題之前，想跟大家先討論一件事 - 何謂價值?"></a>在回答這個問題之前，想跟大家先討論一件事 - 何謂<strong>價值</strong>?</h2><p>簡單自介一下，我是個不務正業的網頁工程師，<br>大學念的是商管、第一份工作在大陸做生管、後來轉行做財會 &amp; Sales &amp; PM、至今又跳到完全陌生的領域來做工程師<br>生活除了工作，也不忘練舞、搞音樂、學投資理財、打嘴炮<br>整個過程其實會讓人一直去思考<br>為什麼要做、做了可以帶來什麼效益、不做的話誰來做會更好，等等的價值問題<br>而在經歷了許多不同面向甚至完全相反領域的東西後<br>慢慢體會到了幾件事</p><h3 id="第一-人生是連續不斷的，每件事情都會給當下或未來的自己賦與意義及價值"><a href="#第一-人生是連續不斷的，每件事情都會給當下或未來的自己賦與意義及價值" class="headerlink" title="第一: 人生是連續不斷的，每件事情都會給當下或未來的自己賦與意義及價值"></a><strong>第一: 人生是連續不斷的，每件事情都會給當下或未來的自己賦與意義及價值</strong></h3><p>這點應該很好理解，也可以說是老生常談了</p><ul><li><img src="https://growingdna.com/wp-content/uploads/2019/11/ab67616d0000b273b2e3bc32d051c45d2df73c67.jpeg" alt="endless_road"></li></ul><h3 id="第二-每件事都有價值，但彼此間並不等值，越早發生的事價值越大"><a href="#第二-每件事都有價值，但彼此間並不等值，越早發生的事價值越大" class="headerlink" title="第二: 每件事都有價值，但彼此間並不等值，越早發生的事價值越大"></a><strong>第二: 每件事都有價值，但彼此間並不等值，越早發生的事價值越大</strong></h3><p>這就有點意思了<br>舉例來說，大學畢業之後選擇第一份工作<br>我們可以選擇到一家大企業工作，而這個企業的名聲和內部競爭會加速個人成長，為未來的職場舖路而帶來價值<br>又或者<br>我們可以選擇到一家中小企業工作，而因著小企業本身一人多工的特性，也會給人帶來成長，也未未來的職場舖路而帶來價值</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E4%B8%8B%E8%BC%89.jpeg" alt="selection"></p><p>但這兩種選擇的價值是一樣的嗎?<br>我認為不是<br>事實上，它可能是指向了至少兩種不同的方向<br>若選了大企業工作，它可能指向的是更大、更核心的企業高層工作<br>若選了小企業工作，它可能指向的是更多元、更新創企業的創始員工</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/%E4%B8%8B%E8%BC%89-1.jpeg" alt="enterprise"></p><p>所以 兩個選擇都有價值，而兩種價值並不等價，朝向的方向也大大不同<br>隨著一連串選擇的不同，彼此之間價值累積就會有越來越大的差異<br>因此，選擇為何，就顯的特別重要了 而這就帶出了第三點</p><h3 id="第三-不斷成長，才有高機率可以做出高價值的選擇"><a href="#第三-不斷成長，才有高機率可以做出高價值的選擇" class="headerlink" title="第三: 不斷成長，才有高機率可以做出高價值的選擇"></a><strong>第三: 不斷成長，才有高機率可以做出高價值的選擇</strong></h3><p>從前面的論述就以推論出，決定價值高低最重要的關鍵就在於做選擇<br>而選擇的依據有許多，有名、有利、有愛、有自我實現…等等<br>而決定採用哪個依據的的要素是什麼呢?<br>我認為是 是<strong>成長</strong><br>而且是<strong>不斷地成長</strong></p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/ca0e19e0fffd11e7b7f3f3f595c3cf96_content_medium.jpg" alt="Be_strong"></p><p>因為唯有不斷成長，才能打開自己的思考維度<br>讓自己去思考更高維度的問題<br>這樣說或許太抽象了，這邊舉一個例子:<br>「假設現在有場賭局，贏的機率是60%，你擁有的賭本是1000元，請問單次最大賭注是多少時方可不致全盤皆輸?」  </p><p>你可能沒想過，但其實我也沒想過<br>這個問題其實是有公式可以算的 - <a href="https://zh.wikipedia.org/wiki/%E5%87%B1%E5%88%A9%E5%85%AC%E5%BC%8F">凱利公式</a><br>有興趣的朋友可以點連結看維基百科或 Google 相關應用，這裡就不展開說明</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/maxresdefault-1024x576.jpg" alt="formula_math"></p><p>所以從這邊我們就看出差異了，<br>有些人，包括我，根本不知道有這種算法<br>甚至連單次最大賭注的概念也沒有，這差異可以說是天地之遙<br>就像是要上考場的人不知道可以帶橡皮擦修改答案一樣，影響不可謂不深  </p><p>所以我們要做的，是<strong>不斷成長</strong>，不斷開展自己的元認知 (元認知是什麼之後會再跟大家分享)<br>&#x2F;&#x2F; 2019&#x2F;11&#x2F;15 新增文章: <a href="https://growingdna.com/importance-of-pre-conscious/">【元認知能力: 你最應該擁有的最重要能力</a>】<br><strong>讓自己不斷做出好的選擇，帶來高價值，並成就一個自己說的算的人生</strong></p><h3 id="最後，就是要提到為何要成立這個部落格"><a href="#最後，就是要提到為何要成立這個部落格" class="headerlink" title="最後，就是要提到為何要成立這個部落格"></a>最後，就是要提到為何要成立這個部落格</h3><p><img src="https://growingdna.com/wp-content/uploads/2019/11/Blog-Become-a-Book-Banner-800x339.jpg" alt="why build this blog"></p><p>因為，我認為要成長，就得不斷學習、內化、應用以至分享出去並獲得反饋<br>這款成長才會是真的，才會成為一個可以操作的系統<br>否則，它就永遠只是個想法，停留在永恆的當下而不能向前前進</p><p>也因此有了這個部落格<br>它紀錄了我的成長進步，也成就了你的學習歷程</p><p>我相信，這些對我有益的知識，也同樣對你有幫助<br>我相信，這些成長的基石，也可以同樣成為你的基石<br>再強調一次</p><h4 id="要成長，就得不斷學習、內化、應用以至分享出去並獲得反饋"><a href="#要成長，就得不斷學習、內化、應用以至分享出去並獲得反饋" class="headerlink" title="要成長，就得不斷學習、內化、應用以至分享出去並獲得反饋"></a>要成長，就得不斷學習、內化、應用以至分享出去並獲得反饋</h4><p>共勉之，彼此加油<br>讓我們一起來場學習學習，再學習的人生吧!</p><p><img src="https://growingdna.com/wp-content/uploads/2019/11/bigstock-business-success-leadership-127533122.jpg" alt="Succeed"></p>]]></content>
      
      
      <categories>
          
          <category> 雜學清談 </category>
          
          <category> 投資理財 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成長 </tag>
            
            <tag> 投資 </tag>
            
            <tag> 時間 </tag>
            
            <tag> 財富自由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聯絡我們</title>
      <link href="/2019/11/06/%E8%81%AF%E7%B5%A1%E6%88%91%E5%80%91/"/>
      <url>/2019/11/06/%E8%81%AF%E7%B5%A1%E6%88%91%E5%80%91/</url>
      
        <content type="html"><![CDATA[<p>你的姓名 (必填) [text* your-name] 你的電子郵件 (必填) [email* your-email] 主旨 [text your-subject] 你的訊息 [textarea your-message] [submit “傳送”] 1 [your-subject] (由《成長基因》的聯絡表單傳送) 成長基因 <a href="mailto:&#x67;&#114;&#x6f;&#119;&#x69;&#x6e;&#x67;&#100;&#110;&#x61;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x67;&#114;&#x6f;&#119;&#x69;&#x6e;&#x67;&#100;&#110;&#x61;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a> 寄件者: [your-name] &lt;[your-email]&gt; 主旨: [your-subject] 郵件內文: [your-message] – 這封電子郵件由《成長基因》的聯絡表單所傳送，網站網址為 <a href="https://growingdna.com/">https://growingdna.com</a> Reply-To: [your-email] [your-subject] (由《user’s Blog!》的聯絡表單傳送) user’s Blog! [your-email] 郵件內文: [your-message] – 這封電子郵件由《user’s Blog!》的聯絡表單所傳送，網站網址為 <a href="https://growingdna.com/">https://growingdna.com</a> Reply-To: <a href="mailto:&#x75;&#115;&#x65;&#x72;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;">&#x75;&#115;&#x65;&#x72;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;</a> 感謝你的留言，已將留言傳送給站務人員。 嘗試傳送郵件時發生錯誤。請稍後再試。 一個或多個欄位發生錯誤。請檢查並重試。 嘗試傳送郵件時發生錯誤。請稍後再試。 傳送郵件前，你必須接受條款及條件。 此為必填欄位。 輸入的內容太長。 輸入的內容太短。 日期格式不正確。 輸入的日期早於容許的最小值。 輸入的日期晚於容許的最大值。 上傳檔案時發生未知錯誤。 目前的登入身分沒有上傳這個檔案類型的權限。 檔案太大。 上傳檔案時發生錯誤。 無效的數值格式。 數值低於容許的最小值。 數值高於容許的最大值。 問答題的答案不正確。 目前輸入的認證碼不正確。 輸入的電子郵件地址無效。 無效的網址。 無效的電話號碼。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聯絡表單 1</title>
      <link href="/2019/11/06/%E8%81%AF%E7%B5%A1%E8%A1%A8%E5%96%AE-1/"/>
      <url>/2019/11/06/%E8%81%AF%E7%B5%A1%E8%A1%A8%E5%96%AE-1/</url>
      
        <content type="html"><![CDATA[<p>你的姓名 (必填) [text* your-name] 你的電子郵件 (必填) [email* your-email] 主旨 [text your-subject] 你的訊息 [textarea your-message] [submit “傳送”] [your-subject] (由《user’s Blog!》的聯絡表單傳送) user’s Blog! 寄件者: [your-name] &lt;[your-email]&gt; 主旨: [your-subject] 郵件內文: [your-message] – 這封電子郵件由《user’s Blog!》的聯絡表單所傳送，網站網址為 <a href="https://growingdna.com/">https://growingdna.com</a> <a href="mailto:&#x75;&#115;&#101;&#114;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#109;">&#x75;&#115;&#101;&#114;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#109;</a> Reply-To: [your-email] 0 0 [your-subject] (由《user’s Blog!》的聯絡表單傳送) user’s Blog! 郵件內文: [your-message] – 這封電子郵件由《user’s Blog!》的聯絡表單所傳送，網站網址為 <a href="https://growingdna.com/">https://growingdna.com</a> [your-email] Reply-To: <a href="mailto:&#117;&#x73;&#101;&#114;&#x40;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#117;&#x73;&#101;&#114;&#x40;&#101;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;</a> 0 0 感謝你的留言，已將留言傳送給站務人員。 嘗試傳送郵件時發生錯誤。請稍後再試。 一個或多個欄位發生錯誤。請檢查並重試。 嘗試傳送郵件時發生錯誤。請稍後再試。 傳送郵件前，你必須接受條款及條件。 此為必填欄位。 輸入的內容太長。 輸入的內容太短。</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Audio Sidebar Right</title>
      <link href="/2017/08/01/audio-sidebar-right/"/>
      <url>/2017/08/01/audio-sidebar-right/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gallery Sidebar Right</title>
      <link href="/2017/08/01/gallery-sidebar-right/"/>
      <url>/2017/08/01/gallery-sidebar-right/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Link Sidebar Right</title>
      <link href="/2017/08/01/link-sidebar-right/"/>
      <url>/2017/08/01/link-sidebar-right/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Quote Sidebar Right</title>
      <link href="/2017/08/01/quote-sidebar-right/"/>
      <url>/2017/08/01/quote-sidebar-right/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Video Sidebar Right</title>
      <link href="/2017/08/01/video-sidebar-right/"/>
      <url>/2017/08/01/video-sidebar-right/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Standard Sidebar Right</title>
      <link href="/2017/08/01/standard-sidebar-right/"/>
      <url>/2017/08/01/standard-sidebar-right/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Infinite Load More Posts</title>
      <link href="/2017/07/29/infinite-load-more-posts-2/"/>
      <url>/2017/07/29/infinite-load-more-posts-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>About me</title>
      <link href="/2017/07/17/about-me/"/>
      <url>/2017/07/17/about-me/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Category Listings</title>
      <link href="/2017/07/17/category-listings/"/>
      <url>/2017/07/17/category-listings/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Contact Me</title>
      <link href="/2017/07/17/contact-me/"/>
      <url>/2017/07/17/contact-me/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Grid 2 Columns</title>
      <link href="/2017/07/17/grid-2-columns/"/>
      <url>/2017/07/17/grid-2-columns/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Grid 3 Columns</title>
      <link href="/2017/07/17/grid-3-columns/"/>
      <url>/2017/07/17/grid-3-columns/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Grid with Sidebar</title>
      <link href="/2017/07/17/grid-with-sidebar-2/"/>
      <url>/2017/07/17/grid-with-sidebar-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Book Reviews</title>
      <link href="/2017/07/17/life-style/"/>
      <url>/2017/07/17/life-style/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Link Post</title>
      <link href="/2017/07/17/link-post/"/>
      <url>/2017/07/17/link-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Menu Item Style 2</title>
      <link href="/2017/07/17/menu-item-style-1/"/>
      <url>/2017/07/17/menu-item-style-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Quote Post</title>
      <link href="/2017/07/17/quote-post/"/>
      <url>/2017/07/17/quote-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Self-hosted Audio</title>
      <link href="/2017/07/17/self-hosted-audio/"/>
      <url>/2017/07/17/self-hosted-audio/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shop</title>
      <link href="/2017/07/17/shop/"/>
      <url>/2017/07/17/shop/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Typography</title>
      <link href="/2017/07/17/typography/"/>
      <url>/2017/07/17/typography/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Moments</title>
      <link href="/2017/07/17/travel/"/>
      <url>/2017/07/17/travel/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gallery Post</title>
      <link href="/2017/07/17/gallery-post/"/>
      <url>/2017/07/17/gallery-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 8</title>
      <link href="/2017/07/17/header-style-8/"/>
      <url>/2017/07/17/header-style-8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 9</title>
      <link href="/2017/07/17/header-style-9/"/>
      <url>/2017/07/17/header-style-9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 7</title>
      <link href="/2017/07/17/header-style-7/"/>
      <url>/2017/07/17/header-style-7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home Penci Slider 1</title>
      <link href="/2017/07/17/home-penci-slider-1/"/>
      <url>/2017/07/17/home-penci-slider-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home Penci Slider 2</title>
      <link href="/2017/07/17/home-penci-slider-2/"/>
      <url>/2017/07/17/home-penci-slider-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 21</title>
      <link href="/2017/07/17/home-with-slider-21/"/>
      <url>/2017/07/17/home-with-slider-21/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 22</title>
      <link href="/2017/07/17/home-with-slider-22/"/>
      <url>/2017/07/17/home-with-slider-22/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 23</title>
      <link href="/2017/07/17/home-with-slider-23/"/>
      <url>/2017/07/17/home-with-slider-23/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 24</title>
      <link href="/2017/07/17/home-with-slider-24/"/>
      <url>/2017/07/17/home-with-slider-24/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 25</title>
      <link href="/2017/07/17/home-with-slider-25/"/>
      <url>/2017/07/17/home-with-slider-25/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 20</title>
      <link href="/2017/07/17/home-with-slider-20/"/>
      <url>/2017/07/17/home-with-slider-20/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 26</title>
      <link href="/2017/07/17/home-with-slider-26/"/>
      <url>/2017/07/17/home-with-slider-26/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 27</title>
      <link href="/2017/07/17/home-with-slider-27/"/>
      <url>/2017/07/17/home-with-slider-27/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 29</title>
      <link href="/2017/07/17/home-with-slider-29/"/>
      <url>/2017/07/17/home-with-slider-29/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 30</title>
      <link href="/2017/07/17/home-with-slider-30/"/>
      <url>/2017/07/17/home-with-slider-30/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 28</title>
      <link href="/2017/07/17/home-with-slider-28/"/>
      <url>/2017/07/17/home-with-slider-28/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Real Awesome Gallery</title>
      <link href="/2017/07/17/real-awesome-gallery/"/>
      <url>/2017/07/17/real-awesome-gallery/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Soundcloud Audio</title>
      <link href="/2017/07/17/soundcloud-audio/"/>
      <url>/2017/07/17/soundcloud-audio/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Slider</title>
      <link href="/2017/07/17/slider-4/"/>
      <url>/2017/07/17/slider-4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Standard Post</title>
      <link href="/2017/07/17/standard-post/"/>
      <url>/2017/07/17/standard-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vimeo Post</title>
      <link href="/2017/07/17/vimeo-post/"/>
      <url>/2017/07/17/vimeo-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Youtube Post</title>
      <link href="/2017/07/17/youtube-post/"/>
      <url>/2017/07/17/youtube-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 6</title>
      <link href="/2017/07/17/header-style-6/"/>
      <url>/2017/07/17/header-style-6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 10</title>
      <link href="/2017/07/17/home-with-slider-10/"/>
      <url>/2017/07/17/home-with-slider-10/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 12</title>
      <link href="/2017/07/17/home-with-slider-12/"/>
      <url>/2017/07/17/home-with-slider-12/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 11</title>
      <link href="/2017/07/17/home-with-slider-11/"/>
      <url>/2017/07/17/home-with-slider-11/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 13</title>
      <link href="/2017/07/17/home-with-slider-13/"/>
      <url>/2017/07/17/home-with-slider-13/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 15</title>
      <link href="/2017/07/17/home-with-slider-15/"/>
      <url>/2017/07/17/home-with-slider-15/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 14</title>
      <link href="/2017/07/17/home-with-slider-14/"/>
      <url>/2017/07/17/home-with-slider-14/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 16</title>
      <link href="/2017/07/17/home-with-slider-16/"/>
      <url>/2017/07/17/home-with-slider-16/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 18</title>
      <link href="/2017/07/17/home-with-slider-18/"/>
      <url>/2017/07/17/home-with-slider-18/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 17</title>
      <link href="/2017/07/17/home-with-slider-17/"/>
      <url>/2017/07/17/home-with-slider-17/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 19</title>
      <link href="/2017/07/17/home-with-slider-19/"/>
      <url>/2017/07/17/home-with-slider-19/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 7</title>
      <link href="/2017/07/17/home-with-slider-7/"/>
      <url>/2017/07/17/home-with-slider-7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 8</title>
      <link href="/2017/07/17/home-with-slider-8/"/>
      <url>/2017/07/17/home-with-slider-8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 9</title>
      <link href="/2017/07/17/home-with-slider-9/"/>
      <url>/2017/07/17/home-with-slider-9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Infinite Scroll Load More</title>
      <link href="/2017/07/17/infinite-load-more-posts/"/>
      <url>/2017/07/17/infinite-load-more-posts/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Masonry 2 Columns</title>
      <link href="/2017/07/17/masonry-2-columns/"/>
      <url>/2017/07/17/masonry-2-columns/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Masonry with Sidebar</title>
      <link href="/2017/07/17/masonry-with-sidebar-2/"/>
      <url>/2017/07/17/masonry-with-sidebar-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Slider</title>
      <link href="/2017/07/17/slider-1/"/>
      <url>/2017/07/17/slider-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Single Portfolio</title>
      <link href="/2017/07/17/single-portfolio/"/>
      <url>/2017/07/17/single-portfolio/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Slider</title>
      <link href="/2017/07/17/slider-2/"/>
      <url>/2017/07/17/slider-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sliders</title>
      <link href="/2017/07/17/sliders/"/>
      <url>/2017/07/17/sliders/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Slider</title>
      <link href="/2017/07/17/slider-3/"/>
      <url>/2017/07/17/slider-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Overlay Then Grid</title>
      <link href="/2017/07/17/1st-overlay-then-grid/"/>
      <url>/2017/07/17/1st-overlay-then-grid/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Overlay Then List</title>
      <link href="/2017/07/17/1st-overlay-then-list/"/>
      <url>/2017/07/17/1st-overlay-then-list/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Audio Full Width</title>
      <link href="/2017/07/17/audio-full-width/"/>
      <url>/2017/07/17/audio-full-width/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gallery Full Width</title>
      <link href="/2017/07/17/gallery-full-width/"/>
      <url>/2017/07/17/gallery-full-width/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 4 (Centerd)</title>
      <link href="/2017/07/17/header-style-4-centerd/"/>
      <url>/2017/07/17/header-style-4-centerd/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 5 (Centerd)</title>
      <link href="/2017/07/17/header-style-5-centerd/"/>
      <url>/2017/07/17/header-style-5-centerd/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home Featured Video</title>
      <link href="/2017/07/17/home-featured-video/"/>
      <url>/2017/07/17/home-featured-video/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 2</title>
      <link href="/2017/07/17/home-with-slider-2/"/>
      <url>/2017/07/17/home-with-slider-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Link Full Width</title>
      <link href="/2017/07/17/link-full-width/"/>
      <url>/2017/07/17/link-full-width/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Magazine Layout 3</title>
      <link href="/2017/07/17/magazine-layout-3/"/>
      <url>/2017/07/17/magazine-layout-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Masonry 3 Columns</title>
      <link href="/2017/07/17/masonry-3-columns/"/>
      <url>/2017/07/17/masonry-3-columns/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mixed Style 2 Layout</title>
      <link href="/2017/07/17/mixed-style-2-layout/"/>
      <url>/2017/07/17/mixed-style-2-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mixed Layout</title>
      <link href="/2017/07/17/mixed-layout/"/>
      <url>/2017/07/17/mixed-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Overlay Layout</title>
      <link href="/2017/07/17/overlay-layout/"/>
      <url>/2017/07/17/overlay-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Page Full Width</title>
      <link href="/2017/07/17/page-full-width/"/>
      <url>/2017/07/17/page-full-width/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Page Left Sidebar</title>
      <link href="/2017/07/17/page-left-sidebar/"/>
      <url>/2017/07/17/page-left-sidebar/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Portfolio</title>
      <link href="/2017/07/17/portfolio/"/>
      <url>/2017/07/17/portfolio/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Quote Full Width</title>
      <link href="/2017/07/17/quote-full-width/"/>
      <url>/2017/07/17/quote-full-width/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Standard Full Width</title>
      <link href="/2017/07/17/standard-full-width/"/>
      <url>/2017/07/17/standard-full-width/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2</title>
      <link href="/2017/07/17/style-2-5/"/>
      <url>/2017/07/17/style-2-5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2</title>
      <link href="/2017/07/17/style-2-6/"/>
      <url>/2017/07/17/style-2-6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2 Sidebar Left</title>
      <link href="/2017/07/17/style-2-sidebar-left-4/"/>
      <url>/2017/07/17/style-2-sidebar-left-4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2 Sidebar Left</title>
      <link href="/2017/07/17/style-2-sidebar-left-5/"/>
      <url>/2017/07/17/style-2-sidebar-left-5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Video Full Width</title>
      <link href="/2017/07/17/video-full-width/"/>
      <url>/2017/07/17/video-full-width/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Classic Grid Sidebar</title>
      <link href="/2017/07/17/1st-classic-grid-sidebar/"/>
      <url>/2017/07/17/1st-classic-grid-sidebar/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Standard Grid Sidebar</title>
      <link href="/2017/07/17/1st-standard-grid-sidebar/"/>
      <url>/2017/07/17/1st-standard-grid-sidebar/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Audio Post</title>
      <link href="/2017/07/17/audio-post/"/>
      <url>/2017/07/17/audio-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Body Boxed Color</title>
      <link href="/2017/07/17/body-boxed-color/"/>
      <url>/2017/07/17/body-boxed-color/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Body Full Width</title>
      <link href="/2017/07/17/body-boxed-image/"/>
      <url>/2017/07/17/body-boxed-image/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Features</title>
      <link href="/2017/07/17/features/"/>
      <url>/2017/07/17/features/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 1</title>
      <link href="/2017/07/17/header-style-1/"/>
      <url>/2017/07/17/header-style-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Grid with Sidebar</title>
      <link href="/2017/07/17/grid-with-sidebar/"/>
      <url>/2017/07/17/grid-with-sidebar/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 2</title>
      <link href="/2017/07/17/header-style-2/"/>
      <url>/2017/07/17/header-style-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Header Style 3</title>
      <link href="/2017/07/17/header-style-3/"/>
      <url>/2017/07/17/header-style-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Headers</title>
      <link href="/2017/07/17/headers/"/>
      <url>/2017/07/17/headers/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Left Sidebar</title>
      <link href="/2017/07/17/home-with-left-sidebar/"/>
      <url>/2017/07/17/home-with-left-sidebar/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 5</title>
      <link href="/2017/07/17/home-with-slider-5/"/>
      <url>/2017/07/17/home-with-slider-5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 6</title>
      <link href="/2017/07/17/home-with-slider-6/"/>
      <url>/2017/07/17/home-with-slider-6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 4</title>
      <link href="/2017/07/17/home-with-slider-4/"/>
      <url>/2017/07/17/home-with-slider-4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Masonry with Sidebar</title>
      <link href="/2017/07/17/masonry-with-sidebar/"/>
      <url>/2017/07/17/masonry-with-sidebar/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2</title>
      <link href="/2017/07/17/style-2-2/"/>
      <url>/2017/07/17/style-2-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2</title>
      <link href="/2017/07/17/style-2-4/"/>
      <url>/2017/07/17/style-2-4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2</title>
      <link href="/2017/07/17/style-2-3/"/>
      <url>/2017/07/17/style-2-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2 Left Sidebar</title>
      <link href="/2017/07/17/style-2-left-sidebar/"/>
      <url>/2017/07/17/style-2-left-sidebar/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2 Sidebar Left</title>
      <link href="/2017/07/17/style-2-sidebar-left-2/"/>
      <url>/2017/07/17/style-2-sidebar-left-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2 Sidebar Left</title>
      <link href="/2017/07/17/style-2-sidebar-left-3/"/>
      <url>/2017/07/17/style-2-sidebar-left-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2 Sidebar Left</title>
      <link href="/2017/07/17/style-2-sidebar-left/"/>
      <url>/2017/07/17/style-2-sidebar-left/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Style 2</title>
      <link href="/2017/07/17/style-2/"/>
      <url>/2017/07/17/style-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Video Post</title>
      <link href="/2017/07/17/video-post/"/>
      <url>/2017/07/17/video-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Classic Then Grid 2</title>
      <link href="/2017/07/17/1st-classic-then-grid-2/"/>
      <url>/2017/07/17/1st-classic-then-grid-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Classic Then Boxed</title>
      <link href="/2017/07/17/1st-classic-then-boxed/"/>
      <url>/2017/07/17/1st-classic-then-boxed/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Classic Then Grid</title>
      <link href="/2017/07/17/1st-classic-then-grid/"/>
      <url>/2017/07/17/1st-classic-then-grid/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Classic Then List</title>
      <link href="/2017/07/17/1st-classic-then-list/"/>
      <url>/2017/07/17/1st-classic-then-list/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Standard Then Boxed</title>
      <link href="/2017/07/17/1st-standard-then-boxed/"/>
      <url>/2017/07/17/1st-standard-then-boxed/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Standard Then Grid 2</title>
      <link href="/2017/07/17/1st-standard-then-grid-2/"/>
      <url>/2017/07/17/1st-standard-then-grid-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Standard Then Grid</title>
      <link href="/2017/07/17/1st-standard-then-grid/"/>
      <url>/2017/07/17/1st-standard-then-grid/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1st Standard Then List</title>
      <link href="/2017/07/17/1st-standard-then-list/"/>
      <url>/2017/07/17/1st-standard-then-list/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Boxed Layout</title>
      <link href="/2017/07/17/boxed-layout/"/>
      <url>/2017/07/17/boxed-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Classic Layout</title>
      <link href="/2017/07/17/classic-layout/"/>
      <url>/2017/07/17/classic-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Grid 2 Columns Layout</title>
      <link href="/2017/07/17/grid-2-columns-layout/"/>
      <url>/2017/07/17/grid-2-columns-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Grid Layout</title>
      <link href="/2017/07/17/grid-layout/"/>
      <url>/2017/07/17/grid-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home</title>
      <link href="/2017/07/17/home-1/"/>
      <url>/2017/07/17/home-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home</title>
      <link href="/2017/07/17/home-2/"/>
      <url>/2017/07/17/home-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home</title>
      <link href="/2017/07/17/home-4/"/>
      <url>/2017/07/17/home-4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home</title>
      <link href="/2017/07/17/home-3/"/>
      <url>/2017/07/17/home-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 1</title>
      <link href="/2017/07/17/home-with-slider-1/"/>
      <url>/2017/07/17/home-with-slider-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Slider 3</title>
      <link href="/2017/07/17/home-with-slider-3/"/>
      <url>/2017/07/17/home-with-slider-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home with Sticky Sidebar</title>
      <link href="/2017/07/17/home-with-sticky-sidebar/"/>
      <url>/2017/07/17/home-with-sticky-sidebar/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Magazine Layout 1</title>
      <link href="/2017/07/17/magazine-layout-1/"/>
      <url>/2017/07/17/magazine-layout-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Magazine Layout 2</title>
      <link href="/2017/07/17/magazine-layout-2/"/>
      <url>/2017/07/17/magazine-layout-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Masonry 2 Columns Layout</title>
      <link href="/2017/07/17/masonry-2-columns-layout/"/>
      <url>/2017/07/17/masonry-2-columns-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Masonry Layout</title>
      <link href="/2017/07/17/masonry-layout/"/>
      <url>/2017/07/17/masonry-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Photography Layout</title>
      <link href="/2017/07/17/photography-layout/"/>
      <url>/2017/07/17/photography-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pages</title>
      <link href="/2017/07/17/pages/"/>
      <url>/2017/07/17/pages/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Standard Layout</title>
      <link href="/2017/07/17/standard-layout/"/>
      <url>/2017/07/17/standard-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>List Layout</title>
      <link href="/2017/07/17/list-layout/"/>
      <url>/2017/07/17/list-layout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Home</title>
      <link href="/2017/07/17/home/"/>
      <url>/2017/07/17/home/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Page 404</title>
      <link href="/2017/07/17/page-404/"/>
      <url>/2017/07/17/page-404/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Contact Form Flat</title>
      <link href="/2016/08/29/contact-form-outline/"/>
      <url>/2016/08/29/contact-form-outline/</url>
      
        <content type="html"><![CDATA[<p>[text* your-name placeholder “Your Name (required)”] [email* your-email placeholder “Your Email (required)”]</p><p>[textarea your-message placeholder “Your Message (required)”]</p><p>[submit class:button primary “Submit”]</p><p>Flatsome “[your-subject]“ [your-name] From: [your-name] &lt;[your-email]&gt; Subject: [your-subject] Message Body: [your-message] – This e-mail was sent from a contact form on Flatsome (<a href="http://flatsome.dev/">http://flatsome.dev</a>) <a href="mailto:&#x65;&#x6d;&#97;&#x69;&#108;&#64;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#x65;&#x6d;&#97;&#x69;&#108;&#64;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a> Reply-To: [your-email] Flatsome “[your-subject]“ Flatsome Message Body: [your-message] – This e-mail was sent from a contact form on Flatsome (<a href="http://flatsome.dev/">http://flatsome.dev</a>) [your-email] Reply-To: <a href="mailto:&#x65;&#109;&#97;&#x69;&#108;&#x40;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#x65;&#109;&#97;&#x69;&#108;&#x40;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a> Thank you for your message. It has been sent. There was an error trying to send your message. Please try again later. One or more fields have an error. Please check and try again. There was an error trying to send your message. Please try again later. You must accept the terms and conditions before sending your message. The field is required. The field is too long. The field is too short. The date format is incorrect. The date is before the earliest one allowed. The date is after the latest one allowed. There was an unknown error uploading the file. You are not allowed to upload files of this type. The file is too big. There was an error uploading the file. The number format is invalid. The number is smaller than the minimum allowed. The number is larger than the maximum allowed. The answer to the quiz is incorrect. Your entered code is incorrect. The e-mail address entered is invalid. The URL is invalid. The telephone number is invalid.</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Newsletter Vertical</title>
      <link href="/2016/08/25/newsletter-horizontal/"/>
      <url>/2016/08/25/newsletter-horizontal/</url>
      
        <content type="html"><![CDATA[<p>[email* your-email placeholder “Your Email (required)”] [submit class:button primary “Sign Up”]</p><p>New signup! Flatsome Theme New signup: [your-email] [your-email] Flatsome “[your-subject]“ Flatsome Message Body: [your-message] – This e-mail was sent from a contact form on Flatsome (<a href="http://flatsome.dev/">http://flatsome.dev</a>) [your-email] Reply-To: <a href="mailto:&#101;&#109;&#x61;&#105;&#x6c;&#x40;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#101;&#109;&#x61;&#105;&#x6c;&#x40;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a> Thank you for your message. It has been sent. There was an error trying to send your message. Please try again later. One or more fields have an error. Please check and try again. There was an error trying to send your message. Please try again later. You must accept the terms and conditions before sending your message. The field is required. The field is too long. The field is too short. The date format is incorrect. The date is before the earliest one allowed. The date is after the latest one allowed. There was an unknown error uploading the file. You are not allowed to upload files of this type. The file is too big. There was an error uploading the file. The number format is invalid. The number is smaller than the minimum allowed. The number is larger than the maximum allowed. The answer to the quiz is incorrect. Your entered code is incorrect. The e-mail address entered is invalid. The URL is invalid. The telephone number is invalid.</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Contact Form 1</title>
      <link href="/2016/08/16/contact-form-1-2/"/>
      <url>/2016/08/16/contact-form-1-2/</url>
      
        <content type="html"><![CDATA[<p>[text* your-name placeholder “Name*“]</p><p>[email* your-email placeholder “Email*“]</p><p>[text your-subject placeholder “Subject”]</p><p>[textarea* your-message placeholder “Your Message”]</p><p>[submit “Submit”]</p><p>The Best Simple &amp; Easy Wordpress Theme “[your-subject]“ [your-name] From: [your-name] Subject: [your-subject] Message Body: [your-message] – This e-mail was sent from a contact form on The Best Simple &amp; Easy Wordpress Theme (<a href="http://pencidesign.com/soledad/soledad-simple">http://pencidesign.com/soledad/soledad-simple</a>) <a href="mailto:&#112;&#x65;&#110;&#99;&#105;&#x64;&#x65;&#x73;&#105;&#103;&#x6e;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#112;&#x65;&#110;&#99;&#105;&#x64;&#x65;&#x73;&#105;&#103;&#x6e;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a> Reply-To: [your-email] The Best Simple &amp; Easy Wordpress Theme “[your-subject]“ The Best Simple &amp; Easy Wordpress Theme Message Body: [your-message] – This e-mail was sent from a contact form on The Best Simple &amp; Easy Wordpress Theme (<a href="http://pencidesign.com/soledad/soledad-simple">http://pencidesign.com/soledad/soledad-simple</a>) [your-email] Reply-To: <a href="mailto:&#x70;&#101;&#110;&#99;&#x69;&#100;&#x65;&#115;&#x69;&#x67;&#x6e;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#x70;&#101;&#110;&#99;&#x69;&#100;&#x65;&#115;&#x69;&#x67;&#x6e;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;</a> Thank you for your message. It has been sent. There was an error trying to send your message. Please try again later. One or more fields have an error. Please check and try again. There was an error trying to send your message. Please try again later. You must accept the terms and conditions before sending your message. The field is required. The field is too long. The field is too short. The date format is incorrect. The date is before the earliest one allowed. The date is after the latest one allowed. There was an unknown error uploading the file. You are not allowed to upload files of this type. The file is too big. There was an error uploading the file. The number format is invalid. The number is smaller than the minimum allowed. The number is larger than the maximum allowed. The answer to the quiz is incorrect. Your entered code is incorrect. The e-mail address entered is invalid. The URL is invalid. The telephone number is invalid.</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Contact Form 1</title>
      <link href="/2016/08/08/contact-form-1-3/"/>
      <url>/2016/08/08/contact-form-1-3/</url>
      
        <content type="html"><![CDATA[<p>[text* your-name placeholder “Name*“]</p><p>[email* your-email placeholder “Email*“]</p><p>[text your-subject placeholder “Subject”]</p><p>[textarea* your-message placeholder “Your Message”]</p><p>[submit “Submit”]</p><p>Soledad - Best WordPress Themes for Selling Books “[your-subject]“ [your-name] From: [your-name] Subject: [your-subject] Message Body: [your-message] – This e-mail was sent from a contact form on Soledad - Best WordPress Themes for Selling Books (<a href="http://pencidesign.com/soledad/soledad-book">http://pencidesign.com/soledad/soledad-book</a>) <a href="mailto:&#112;&#x65;&#110;&#x63;&#x69;&#x64;&#x65;&#115;&#x69;&#x67;&#x6e;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#112;&#x65;&#110;&#x63;&#x69;&#x64;&#x65;&#115;&#x69;&#x67;&#x6e;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a> Reply-To: [your-email] Soledad - Best WordPress Themes for Selling Books “[your-subject]“ Soledad - Best WordPress Themes for Selling Books Message Body: [your-message] – This e-mail was sent from a contact form on Soledad - Best WordPress Themes for Selling Books (<a href="http://pencidesign.com/soledad/soledad-book">http://pencidesign.com/soledad/soledad-book</a>) [your-email] Reply-To: <a href="mailto:&#112;&#x65;&#x6e;&#x63;&#x69;&#x64;&#x65;&#x73;&#105;&#x67;&#x6e;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#109;">&#112;&#x65;&#x6e;&#x63;&#x69;&#x64;&#x65;&#x73;&#105;&#x67;&#x6e;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#109;</a> Thank you for your message. It has been sent. There was an error trying to send your message. Please try again later. One or more fields have an error. Please check and try again. There was an error trying to send your message. Please try again later. You must accept the terms and conditions before sending your message. The field is required. The field is too long. The field is too short. The date format is incorrect. The date is before the earliest one allowed. The date is after the latest one allowed. There was an unknown error uploading the file. You are not allowed to upload files of this type. The file is too big. There was an error uploading the file. The number format is invalid. The number is smaller than the minimum allowed. The number is larger than the maximum allowed. The answer to the quiz is incorrect. Your entered code is incorrect. The e-mail address entered is invalid. The URL is invalid. The telephone number is invalid.</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Newsletter Horizontal</title>
      <link href="/2016/04/04/contact-form/"/>
      <url>/2016/04/04/contact-form/</url>
      
        <content type="html"><![CDATA[<p>[email* your-email placeholder “Your Email (required)”]</p><p>[submit class:button primary “Sign Up”]</p><p>Flatsome “[your-subject]“ [your-name] From: [your-name] &lt;[your-email]&gt; Subject: [your-subject] Message Body: [your-message] – This e-mail was sent from a contact form on Flatsome (<a href="http://flatsome.dev/">http://flatsome.dev</a>) <a href="mailto:&#101;&#x6d;&#x61;&#105;&#108;&#x40;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#101;&#x6d;&#x61;&#105;&#108;&#x40;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a> Flatsome “[your-subject]“ Flatsome Message Body: [your-message] – This e-mail was sent from a contact form on Flatsome (<a href="http://flatsome.dev/">http://flatsome.dev</a>) [your-email] Reply-To: <a href="mailto:&#101;&#109;&#x61;&#105;&#x6c;&#64;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#101;&#109;&#x61;&#105;&#x6c;&#64;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a> Thank you for your message. It has been sent. There was an error trying to send your message. Please try again later. One or more fields have an error. Please check and try again. There was an error trying to send your message. Please try again later. You must accept the terms and conditions before sending your message. The field is required. The field is too long. The field is too short. The date format is incorrect. The date is before the earliest one allowed. The date is after the latest one allowed. There was an unknown error uploading the file. You are not allowed to upload files of this type. The file is too big. There was an error uploading the file. The number format is invalid. The number is smaller than the minimum allowed. The number is larger than the maximum allowed. The answer to the quiz is incorrect. Your entered code is incorrect. The e-mail address entered is invalid. The URL is invalid. The telephone number is invalid.</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Contact form</title>
      <link href="/2016/04/04/contact-form-1/"/>
      <url>/2016/04/04/contact-form-1/</url>
      
        <content type="html"><![CDATA[<p>Your Name (required) [text* your-name] Your Email (required) [email* your-email]</p><p>Your Message (required) [textarea your-message]</p><p>[submit class:button primary “Submit”] New Message! <a href="mailto:&#x6d;&#x61;&#105;&#x6c;&#64;&#102;&#x6c;&#97;&#x74;&#x73;&#x6f;&#x6d;&#101;&#x2e;&#100;&#101;&#118;">&#x6d;&#x61;&#105;&#x6c;&#64;&#102;&#x6c;&#97;&#x74;&#x73;&#x6f;&#x6d;&#101;&#x2e;&#100;&#101;&#118;</a> Message: [your-message] <a href="mailto:&#101;&#x6d;&#97;&#105;&#x6c;&#64;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#101;&#x6d;&#97;&#105;&#x6c;&#64;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a> 1 Flatsome “[your-subject]“ Flatsome Message Body: [your-message] – This e-mail was sent from a contact form on Flatsome (<a href="http://flatsome.dev/">http://flatsome.dev</a>) [your-email] Reply-To: <a href="mailto:&#x65;&#x6d;&#x61;&#105;&#x6c;&#x40;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#x65;&#x6d;&#x61;&#105;&#x6c;&#x40;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;</a> Thank you for your message. It has been sent. There was an error trying to send your message. Please try again later. One or more fields have an error. Please check and try again. There was an error trying to send your message. Please try again later. You must accept the terms and conditions before sending your message. The field is required. The field is too long. The field is too short. The date format is incorrect. The date is before the earliest one allowed. The date is after the latest one allowed. There was an unknown error uploading the file. You are not allowed to upload files of this type. The file is too big. There was an error uploading the file. The number format is invalid. The number is smaller than the minimum allowed. The number is larger than the maximum allowed. The answer to the quiz is incorrect. Your entered code is incorrect. The e-mail address entered is invalid. The URL is invalid. The telephone number is invalid.</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
